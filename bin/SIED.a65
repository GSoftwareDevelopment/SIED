; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/02/28] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'assets//fonts.obx' FONTS_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00EC

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@012A

	.MACRO m@INLINE

; -------------------  ASM Block 00000027  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl
.endl							; overload

.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@012B

	.MACRO m@INLINE

; -------------------  ASM Block 00000034  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl
.endl							; overload

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000059  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$000B
AX1	= DATAORIGIN+$000C
AX2	= DATAORIGIN+$000D
DEVICE	= DATAORIGIN+$000E

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000060  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0010

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

; ------------------------------------------------------------

.local	CURSOR						; UNIT

.local	SETCURSOR					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000069  -------------------

  lda spr
  sta main.cursor.myVBL.CURSORSPR
  lda spr+1
  sta main.cursor.myVBL.CURSORSPR+1
  lda #1
  sta mRefresh
  lda $14
  cmp $14
  beq *-2

; ------------------------------------------------------------

SPR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPIVOT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000070  -------------------

  lda x
  sta main.cursor.myVBL.mpivotX
  lda y
  sta main.cursor.myVBL.mpivotY

; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYVBL						; PROCEDURE | ASSEMBLER | INTERRUPT | KEEP

; -------------------  ASM Block 00000071  -------------------

  lda #0
  sta 77

    // lda #<MAIN.cursor.myDLI
    // sta DLIV
    // lda #>MAIN.cursor.myDLI
    // sta DLIV+1

  icl 'asm/cursor.a65'
exVBL:
  jmp xitvbv

	rti						; ret
.endl

.local	INITCURSOR					; PROCEDURE

; optimize OK (CURSOR), line = 82

	lda #$20
	sta PMBASE

; optimize OK (CURSOR), line = 83

	lda #$03
	sta PMCTL

; optimize OK (CURSOR), line = 84

	lda #$02
	sta GPRIOR

; optimize OK (CURSOR), line = 85

	lda #$2A
	sta SDMACTL

; optimize OK (CURSOR), line = 87

	lda #$0F
	sta adr.PCOL
	lda #$00
	sta adr.PCOL+$01

; optimize OK (CURSOR), line = 88

	lda <MYVBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >MYVBL
	sta VVBLKD+1

; optimize OK (CURSOR), line = 89

	lda #$01
	sta MREFRESH

; optimize OK (CURSOR), line = 90

	sta MALLOWKEYS

; optimize OK (CURSOR), line = 91

	lda #$80
	sta _MX
	lda #$40
	sta _MY

; optimize OK (CURSOR), line = 92

	lda #$E8
	sta SETCURSOR.SPR
	lda #$80
	sta SETCURSOR.SPR+1
	jsr SETCURSOR

; optimize OK (CURSOR), line = 93

	lda #$00
	sta SETPIVOT.X
	sta SETPIVOT.Y
	jsr SETPIVOT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

adr._ARROW	= CODEORIGIN+$00E8
.var _ARROW	= adr._ARROW .word
adr._WAIT	= CODEORIGIN+$00EF
.var _WAIT	= adr._WAIT .word
adr._CROSS	= CODEORIGIN+$00F6
.var _CROSS	= adr._CROSS .word
MBUT_NONE	= $00
MBUT_LEFT	= $01
MREFRESH	= $5C
MALLOWKEYS	= $5D
_MX	= $52
_MY	= $53
MX	= $55
MY	= $54
MDX	= $5B
MDY	= $5A
STICK	= $0278
MBUTTON	= $4A
OMBUTTON	= $4B
SCREEN_LINES_ADDR	= $0600
PMG_ADDR	= $2000
SCREEN_ADDR	= $2400
EDITOR_ADDR	= $2800
FONTS_ADDR	= $3000
MAX_SPRITE	= $0F
MAX_GROUP	= $07
GPRIOR	= $026F
SDMACTL	= $022F
PMCTL	= $D01D
PMBASE	= $D407
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.PCOL	= $02C0
.var PCOL	= adr.PCOL .word

.endl							; UNIT CURSOR

.local	MYDLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000072  -------------------

COLPF0  = $D016  ; (708)
COLPF1  = $D017  ; (709)
COLPF2  = $D018  ; (710)
COLPF3  = $D019  ; (711)
COLPF4  = $D01A  ; (712)
WSYNC   = $D40A

  .macro m@setVDLI newVDLI
    lda #<:newVDLI
    sta DLIV
    lda #>:newVDLI
    sta DLIV+1
  .endm

dli1: // workarea
  pha
  lda #$E0
  sta wsync
  sta wsync
  sta COLPF4

  m@setVDLI DLI3

  pla
  rti

dli2: // timeline
  pha
  lda #$00
  sta wsync
  // sta wsync
  sta COLPF4

  m@setVDLI DLI3

  pla
  rti

dli3: // controls
  pha:txa:pha
  lda #$E6
  ldx #$E0
  sta wsync
  // sta wsync
  sta COLPF4
  stx COLPF1
  m@setVDLI DLI4

  pla:tax:pla
  rti

dli4: // status
  pha:txa:pha
  lda #$04
  ldx #$0f
  sta wsync
  sta COLPF4
  stx COLPF1
  m@setVDLI DLI5

  pla:tax:pla
  rti

dli5:
  pha
  lda 712
  sta wsync
  sta COLPF4

  m@setVDLI DLI1

  pla
  rti


	rti						; ret
.endl

.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000073  -------------------

 icl 'asm/get_line.a65' 
; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000074  -------------------

 icl 'asm/reduce_filename.a65' 
; ------------------------------------------------------------

INFN	= :EDX
OUTFN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
	sta KEYSCAN

; -------------------  ASM Block 00000075  -------------------

 icl 'asm/keyscan2asc.a65' 
@exit

; ------------------------------------------------------------

KEYSCAN	= DATAORIGIN+$0011
RESULT	= DATAORIGIN+$0012

@VarData	= KEYSCAN
@VarDataSize	= 1

	rts						; ret
.endl

.local	PUTIMAGE					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000077  -------------------

 icl 'asm/put-image.a65' 
; ------------------------------------------------------------

ADR	= :EDX
X	= :ECX
Y	= :EAX
WIDTH	= DATAORIGIN+$0014
HEIGHT	= DATAORIGIN+$0015

@VarData	= WIDTH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTSPRITE					; PROCEDURE | ASSEMBLER | REGISTER | KEEP

; -------------------  ASM Block 00000078  -------------------

 icl 'asm/put-sprite-or.a65' 
; ------------------------------------------------------------

ADR	= :EDX
X	= :ECX
Y	= :EAX
WIDTH	= DATAORIGIN+$0016
HEIGHT	= DATAORIGIN+$0017

@VarData	= WIDTH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTTEXT						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000080  -------------------

 icl 'asm/put-text.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
S	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTTEXTC					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000081  -------------------

 icl 'asm/put-textc.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
S	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INVERT						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000082  -------------------

 icl 'asm/invert.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
W	= :EAX
H	= DATAORIGIN+$0018

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLANK						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000083  -------------------

 icl 'asm/blank.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
W	= :EAX
H	= DATAORIGIN+$0019

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETSCREENWIDTH					; PROCEDURE | ASSEMBLER | REGISTER | INLINE

	.MACRO m@INLINE
	sta NSW

; -------------------  ASM Block 00000084  -------------------

  sta MAIN.PUTIMAGE._LNWIDTH
  sta MAIN.PUTSPRITE._LNWIDTH1
  sta MAIN.PUTSPRITE._LNWIDTH2

	.ENDM

; ------------------------------------------------------------

NSW	= :EDX
@exit
.endl

.local	NULLPROC					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETZONE						; PROCEDURE

; optimize OK (interface.inc), line = 25

	ldy N
	lda ACT
	sta adr._MZONEACTIVE,y

; optimize OK (interface.inc), line = 26

	lda X
	sta adr._MZONEX1,y
	sta __X

; optimize OK (interface.inc), line = 27

	lda Y
	sta adr._MZONEY1,y
	sta __Y

; optimize OK (interface.inc), line = 28

	lda X
	add W
	sub #$01
	sta adr._MZONEX2,y
	lda W
	sta __W

; optimize OK (interface.inc), line = 29

	lda Y
	add H
	sub #$01
	sta adr._MZONEY2,y
	lda H
	sta __H

; optimize OK (interface.inc), line = 30

	lda N
	asl @
	tay
	lda PRC
	sta adr._MZONEPROC,y
	lda PRC+1
	sta adr._MZONEPROC+1,y

; ------------------------------------------------------------

N	= DATAORIGIN+$001E
ACT	= DATAORIGIN+$001F
X	= DATAORIGIN+$0020
Y	= DATAORIGIN+$0021
W	= DATAORIGIN+$0022
H	= DATAORIGIN+$0023
PRC	= DATAORIGIN+$0024

@VarData	= N
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARZONE					; PROCEDURE
	sta N

; optimize OK (interface.inc), line = 36

	ldy N
	lda #$00
	sta adr._MZONEACTIVE,y

; optimize OK (interface.inc), line = 37

	lda #$FF
	sta adr._MZONEX1,y

; optimize OK (interface.inc), line = 38

	sta adr._MZONEX2,y

; optimize OK (interface.inc), line = 39

	sta adr._MZONEY1,y

; optimize OK (interface.inc), line = 40

	sta adr._MZONEY2,y

; optimize OK (interface.inc), line = 41

	lda N
	asl @
	tay
	lda <NULLPROC
	sta adr._MZONEPROC,y
	lda >NULLPROC
	sta adr._MZONEPROC+1,y

; ------------------------------------------------------------

N	= DATAORIGIN+$0026

@VarData	= N
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARWORKZONES					; PROCEDURE

; optimize OK (interface.inc), line = 46

	lda #$09
	sta I

l_0251
; --- ForToDoCondition
	lda I
	cmp #$20
	jcs l_025F

; optimize OK (interface.inc), line = 47

	jsr CLEARZONE

; --- ForToDoEpilog
	inc I
	jne l_0251
l_025F

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITINTERFACE					; PROCEDURE

; optimize OK (interface.inc), line = 52

	lda #$FF
	sta SZONE
	sta OZONE
	lda #$00
	sta CURSOR.OMBUTTON

; optimize OK (interface.inc), line = 53

	sta I

l_0281
; --- ForToDoCondition
	lda I
	cmp #$20
	jcs l_028F

; optimize OK (interface.inc), line = 54

	jsr CLEARZONE

; --- ForToDoEpilog
	inc I
	jne l_0281
l_028F

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETFREEZONE					; FUNCTION

; optimize OK (interface.inc), line = 59

	lda #$FF
	sta RESULT

; optimize OK (interface.inc), line = 60

	lda #$09
	sta I

l_02A9
; --- ForToDoCondition
	ldy I
	cpy #$20
	jcs l_02B7

; optimize OK (interface.inc), line = 62

	lda adr._MZONEX1,y
	cmp #$FF
	jne l_02CC
	lda I
	sta RESULT
	jmp @exit
l_02CC

; --- ForToDoEpilog
	inc I
	jne l_02A9
l_02B7
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0027
	rts						; ret
.endl

.local	ADDZONE						; FUNCTION | OVERLOAD
.local	@02DB

; optimize OK (interface.inc), line = 68

	lda N
	cmp #$FF
	jne l_02F0
	jsr GETFREEZONE
	lda GETFREEZONE.RESULT
	sta N
l_02F0

; optimize OK (interface.inc), line = 69

	lda N
	cmp #$FF
	jeq l_0309
	lda PRC
	sta SETZONE.PRC
	lda PRC+1
	sta SETZONE.PRC+1
	lda N
	sta SETZONE.N
	lda #$01
	sta SETZONE.ACT
	lda X
	sta SETZONE.X
	lda Y
	sta SETZONE.Y
	lda W
	sta SETZONE.W
	lda H
	sta SETZONE.H
	jsr SETZONE
l_0309

; optimize OK (interface.inc), line = 70

	lda N
	sta RESULT
@exit

; ------------------------------------------------------------

N	= DATAORIGIN+$0028
X	= DATAORIGIN+$0029
Y	= DATAORIGIN+$002A
W	= DATAORIGIN+$002B
H	= DATAORIGIN+$002C
PRC	= DATAORIGIN+$002D
RESULT	= DATAORIGIN+$002F

@VarData	= N
@VarDataSize	= 7

	rts						; ret
.endl
.endl							; overload

.local	ADDZONE						; FUNCTION | OVERLOAD
.local	@0324

; optimize OK (interface.inc), line = 75

	lda PRC
	sta ADDZONE.@02DB.PRC
	lda PRC+1
	sta ADDZONE.@02DB.PRC+1
	lda #$FF
	sta ADDZONE.@02DB.N
	lda X
	sta ADDZONE.@02DB.X
	lda Y
	sta ADDZONE.@02DB.Y
	lda W
	sta ADDZONE.@02DB.W
	lda H
	sta ADDZONE.@02DB.H
	jsr ADDZONE.@02DB
	lda ADDZONE.@02DB.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0030
Y	= DATAORIGIN+$0031
W	= DATAORIGIN+$0032
H	= DATAORIGIN+$0033
PRC	= DATAORIGIN+$0034
RESULT	= DATAORIGIN+$0036

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl
.endl							; overload

.local	ADDZONEH					; FUNCTION | OVERLOAD
.local	@0339

; optimize OK (interface.inc), line = 85

	lda PRC
	sta ADDZONE.@02DB.PRC
	lda PRC+1
	sta ADDZONE.@02DB.PRC+1
	lda __X
	add __W
	sta ADDZONE.@02DB.X
	lda N
	sta ADDZONE.@02DB.N
	lda __Y
	sta ADDZONE.@02DB.Y
	lda __W
	sta ADDZONE.@02DB.W
	lda __H
	sta ADDZONE.@02DB.H
	jsr ADDZONE.@02DB
	lda ADDZONE.@02DB.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

N	= DATAORIGIN+$0037
PRC	= DATAORIGIN+$0038
RESULT	= DATAORIGIN+$003A

@VarData	= N
@VarDataSize	= 3

	rts						; ret
.endl
.endl							; overload

.local	ADDZONEV					; FUNCTION | OVERLOAD
.local	@0356

; optimize OK (interface.inc), line = 90

	lda PRC
	sta ADDZONE.@0324.PRC
	lda PRC+1
	sta ADDZONE.@0324.PRC+1
	lda __Y
	add __H
	sta ADDZONE.@0324.Y
	lda __X
	sta ADDZONE.@0324.X
	lda __W
	sta ADDZONE.@0324.W
	lda __H
	sta ADDZONE.@0324.H
	jsr ADDZONE.@0324
	lda ADDZONE.@0324.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

PRC	= DATAORIGIN+$003B
RESULT	= DATAORIGIN+$003D

@VarData	= PRC
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

.local	CHECKZONES					; FUNCTION

	jmp l_0373

.local	REFRESHZONE					; PROCEDURE

; optimize OK (interface.inc), line = 104

	lda OZONE
	sub #$09
	svc
	eor #$80
	jmi l_0388

; optimize OK (interface.inc), line = 106

	lda OZONE
	jsr INVERTZONE

; optimize OK (interface.inc), line = 107

	lda #$FF
	sta OZONE
l_0388

; optimize OK (interface.inc), line = 109

	lda NZONE
	sub #$09
	svc
	eor #$80
	jmi l_03A5

; optimize OK (interface.inc), line = 111

	lda NZONE
	jsr INVERTZONE

; optimize OK (interface.inc), line = 112

	lda NZONE
	sta OZONE
l_03A5
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRESSED						; FUNCTION

; optimize OK (interface.inc), line = 118

	lda NZONE
	sta SZONE

; optimize OK (interface.inc), line = 119

	lda #$FF
	sta NZONE

; optimize OK (interface.inc), line = 120

	lda #$00
	sta CURSOR.OMBUTTON

; optimize OK (interface.inc), line = 121

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003F
	rts						; ret
.endl
l_0373

; optimize OK (interface.inc), line = 125

	lda #$00
	sta RESULT

; optimize OK (interface.inc), line = 126

	lda #$FF
	sta NZONE
	sta SZONE

; optimize OK (interface.inc), line = 127

	lda #$00
	sta I

l_03DE
; --- ForToDoCondition
	ldy I
	cpy #$20
	jcs l_03EC

; optimize OK (interface.inc), line = 129

	lda adr._MZONEACTIVE,y
	jeq l_03FB

; optimize OK (interface.inc), line = 130

	lda adr._MZONEX1,y
	sta :STACKORIGIN+10
	ldy #$00
	lda CURSOR.MX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	jmi l_0446
	ldy I
	lda adr._MZONEX2,y
	sta :STACKORIGIN+11
	ldy #$00
	lda CURSOR.MX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jmi l_0446
	ldy I
	lda adr._MZONEY1,y
	sta :STACKORIGIN+11
	ldy #$00
	lda CURSOR.MY
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jmi l_0446
	ldy I
	lda adr._MZONEY2,y
	sta :STACKORIGIN+11
	ldy #$00
	lda CURSOR.MY
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jmi l_0446

; optimize OK (interface.inc), line = 133

	lda I
	sta NZONE
	jmp b_03DE					; break
l_0446
l_03FB

; --- ForToDoEpilog
	inc I
	jne l_03DE
l_03EC
b_03DE

; optimize OK (interface.inc), line = 137

	lda NZONE
	cmp #$FF
	jeq l_0468

; optimize OK (interface.inc), line = 139

	sub #$09
	svc
	eor #$80
	jpl l_047B

; optimize FAIL ('REFRESHZONE', interface.inc), line = 141

	jsr REFRESHZONE

; optimize OK (interface.inc), line = 142

	lda CURSOR.MBUTTON
	jne l_048F

; optimize OK (interface.inc), line = 144

	lda CURSOR.OMBUTTON
	cmp #$01
	jne l_04B0
	lda NZONE
	cmp OZONE
	jne l_04B0

; optimize FAIL ('PRESSED', interface.inc), line = 145

	jsr PRESSED
	lda PRESSED.RESULT
	sta RESULT
l_04B0
	jmp l_04C0
l_048F

; optimize OK (interface.inc), line = 149

	lda NZONE
	cmp OZONE
	jeq l_04D4

; optimize OK (interface.inc), line = 151

	sub #$03
	svc
	eor #$80
	jpl l_04E7

; optimize OK (interface.inc), line = 153

	lda #$FF
	jsr SETICON

; optimize OK (interface.inc), line = 154

	ldy NZONE
	lda adr._MZONEX1,y
	sta PUTIMAGE.X
	ldy #$00
	lda NZONE
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+14
	add #$03
	sta :STACKORIGIN+13
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+14
	asl :STACKORIGIN+13
	rol @
	sta :STACKORIGIN+STACKWIDTH+13
	lda :STACKORIGIN+13
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+13
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+13
	lda adr.AICONS,y
	sta PUTIMAGE.ADR
	lda adr.AICONS+1,y
	sta PUTIMAGE.ADR+1
	lda #$32
	sta PUTIMAGE.Y
	lda #$03
	sta PUTIMAGE.WIDTH
	lda #$0C
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE
	jmp l_0506
l_04E7

; optimize OK (interface.inc), line = 156

	lda NZONE
	sub #$03
	jsr SETCONTROL
l_0506

; optimize OK (interface.inc), line = 158

	lda NZONE
	sta OZONE

; optimize OK (interface.inc), line = 159

	lda #$01
	sta CURSOR.OMBUTTON
l_04D4
l_04C0
	jmp l_0523
l_047B

; optimize OK (interface.inc), line = 165

	lda CURSOR.MBUTTON
	jne l_0535

; optimize OK (interface.inc), line = 167

	lda CURSOR.OMBUTTON
	cmp #$01
	jne l_0548
	jsr PRESSED
	lda PRESSED.RESULT
	sta RESULT
l_0548

; optimize OK (interface.inc), line = 168

	lda NZONE
	cmp OZONE
	jeq l_0563
	jsr REFRESHZONE
l_0563
	jmp l_0570
l_0535

; optimize OK (interface.inc), line = 172

	lda #$FF
	sta NZONE

; optimize FAIL ('REFRESHZONE', interface.inc), line = 173

	jsr REFRESHZONE

; optimize OK (interface.inc), line = 174

	lda #$01
	sta CURSOR.OMBUTTON
l_0570
l_0523
	jmp l_0582
l_0468

; optimize FAIL ('REFRESHZONE', interface.inc), line = 180

	jsr REFRESHZONE

; optimize OK (interface.inc), line = 181

	lda CURSOR.OMBUTTON
	cmp #$01
	jne l_0595

; optimize OK (interface.inc), line = 183

	lda #$FF
	jsr SETICON
	lda #$FF
	jsr SETCONTROL

; optimize OK (interface.inc), line = 184

	lda #$FF
	sta OZONE

; optimize OK (interface.inc), line = 185

	lda #$00
	sta CURSOR.OMBUTTON
l_0595
l_0582
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003E
NZONE	= $57
	rts						; ret
.endl

.local	INVERTZONE					; PROCEDURE
	sta I

; optimize OK (controls.inc), line = 9

	ldy I
	lda adr._MZONEX2,y
	sub adr._MZONEX1,y
	sta _W

; optimize OK (controls.inc), line = 10

	lda adr._MZONEY2,y
	sub adr._MZONEY1,y
	sta _H

; optimize OK (controls.inc), line = 11

	lda adr._MZONEY1,y
	sta INVERT.Y
	lda adr._MZONEX1,y
	sta INVERT.X
	lda _W
	sta INVERT.W
	lda _H
	sta INVERT.H
	jsr INVERT

; ------------------------------------------------------------

I	= DATAORIGIN+$0040
_W	= DATAORIGIN+$0041
_H	= DATAORIGIN+$0042

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARWORKAREA					; PROCEDURE

; optimize OK (controls.inc), line = 16

	lda #$00
	sta SYSTEM.FILLCHAR.@012A.A
	lda #$28
	sta SYSTEM.FILLCHAR.@012A.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR.@012A.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR.@012A.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
	m@INLINE
	.ENDL

; optimize FAIL ('CLEARWORKZONES', controls.inc), line = 17

	jsr CLEARWORKZONES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSTATUS					; PROCEDURE

; optimize OK (controls.inc), line = 22

	lda adr.YSCR+$F8
	sta SYSTEM.FILLCHAR.@012A.A
	lda adr.YSCR+1+$F8
	sta SYSTEM.FILLCHAR.@012A.A+1
	lda #$18
	sta SYSTEM.FILLCHAR.@012A.COUNT
	lda #$01
	sta SYSTEM.FILLCHAR.@012A.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
	m@INLINE
	.ENDL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETSTATUS					; PROCEDURE

; optimize FAIL ('CLEARSTATUS', controls.inc), line = 27

	jsr CLEARSTATUS

; optimize OK (controls.inc), line = 28

	lda #$28
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (controls.inc), line = 29

	lda #$00
	sta PUTTEXTC.X
	lda #$45
	sta PUTTEXTC.Y
	lda S
	sta PUTTEXTC.S
	lda S+1
	sta PUTTEXTC.S+1
	jsr PUTTEXTC

; ------------------------------------------------------------

S	= DATAORIGIN+$0043

@VarData	= S
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETICON						; PROCEDURE
	sta N

; optimize OK (controls.inc), line = 38

	lda #$28
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (controls.inc), line = 39

	lda #$00
	sta I

l_060D
; --- ForToDoCondition
	ldy I
	cpy #$03
	jcs l_061B

; optimize OK (controls.inc), line = 41

	lda adr._MZONEX1,y
	sta _X

; optimize OK (controls.inc), line = 42

	lda adr._MZONEACTIVE,y
	jeq l_0633

; optimize OK (controls.inc), line = 44

	lda I
	cmp N
	jne l_0648

; optimize OK (controls.inc), line = 46

	lda _X
	sub #$01
	sta PUTIMAGE.X
	lda #$BB
	sta PUTIMAGE.ADR
	lda #$83
	sta PUTIMAGE.ADR+1
	lda #$30
	sta PUTIMAGE.Y
	lda #$05
	sta PUTIMAGE.WIDTH
	lda #$0F
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE

; optimize OK (controls.inc), line = 47

	ldy #$00
	lda N
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add #$06
	sta :STACKORIGIN+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	jmp l_066A
l_0648

; optimize OK (controls.inc), line = 50

	lda I
	asl @
	tay
l_066A
	lda adr.AICONS,y
	sta P
	lda adr.AICONS+1,y
	sta P+1

; optimize OK (controls.inc), line = 51

	lda P
	sta PUTIMAGE.ADR
	lda P+1
	sta PUTIMAGE.ADR+1
	lda _X
	sta PUTIMAGE.X
	lda #$32
	sta PUTIMAGE.Y
	lda #$03
	sta PUTIMAGE.WIDTH
	lda #$0C
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE
l_0633

; --- ForToDoEpilog
	inc I
	jne l_060D
l_061B

; ------------------------------------------------------------

N	= DATAORIGIN+$0045
_X	= DATAORIGIN+$0046
P	= DATAORIGIN+$0047

@VarData	= N
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETCONTROL					; PROCEDURE
	sta N

; optimize OK (controls.inc), line = 72

	lda #$28
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (controls.inc), line = 73

	lda #$00
	sta I

l_0691
; --- ForToDoCondition
	lda I
	cmp #$06
	jcs l_069F

; optimize OK (controls.inc), line = 75

	add #$03
	tay
	lda adr._MZONEX1,y
	sta _X

; optimize OK (controls.inc), line = 76

	lda I
	cmp N
	jne l_06C0

; optimize OK (controls.inc), line = 77

	asl @
	tay
	lda adr.ACONTROLS+$0C,y
	sta P
	lda adr.ACONTROLS+1+$0C,y
	jmp l_06D6
l_06C0

; optimize OK (controls.inc), line = 79

	lda I
	asl @
	tay
	lda adr.ACONTROLS,y
	sta P
	lda adr.ACONTROLS+1,y
l_06D6
	sta P+1

; optimize OK (controls.inc), line = 80

	lda P
	sta PUTIMAGE.ADR
	lda P+1
	sta PUTIMAGE.ADR+1
	lda _X
	sta PUTIMAGE.X
	lda #$37
	sta PUTIMAGE.Y
	lda #$03
	sta PUTIMAGE.WIDTH
	lda #$08
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE

; --- ForToDoEpilog
	inc I
	jne l_0691
l_069F

; ------------------------------------------------------------

N	= DATAORIGIN+$0049
_X	= DATAORIGIN+$004A
P	= DATAORIGIN+$004B

@VarData	= N
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDBUTTON					; FUNCTION

; optimize OK (controls.inc), line = 88

	lda X
	sta PUTTEXT.X
	lda Y
	sta PUTTEXT.Y
	lda CAP
	sta PUTTEXT.S
	lda CAP+1
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (controls.inc), line = 89

	lda PRC
	sta ADDZONE.@02DB.PRC
	lda PRC+1
	sta ADDZONE.@02DB.PRC+1
	ldy CAP+1
	sty :bp+1
	ldy CAP
	lda (:bp),y
	add #$02
	sta ADDZONE.@02DB.W
	lda Y
	sub #$01
	sta ADDZONE.@02DB.Y
	lda X
	sub #$01
	sta ADDZONE.@02DB.X
	lda #$FF
	sta ADDZONE.@02DB.N
	lda #$07
	sta ADDZONE.@02DB.H
	jsr ADDZONE.@02DB
	lda ADDZONE.@02DB.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$004D
Y	= DATAORIGIN+$004E
CAP	= DATAORIGIN+$004F
PRC	= DATAORIGIN+$0051
RESULT	= DATAORIGIN+$0053

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	ADDINPUT					; FUNCTION

; optimize OK (controls.inc), line = 96

	lda X
	sta PUTTEXT.X
	lda Y
	sta PUTTEXT.Y
	lda VALUE
	sta PUTTEXT.S
	lda VALUE+1
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (controls.inc), line = 97

	lda PRC
	sta ADDZONE.@02DB.PRC
	lda PRC+1
	sta ADDZONE.@02DB.PRC+1
	lda W
	add #$02
	sta ADDZONE.@02DB.W
	lda Y
	sub #$01
	sta ADDZONE.@02DB.Y
	lda X
	sub #$01
	sta ADDZONE.@02DB.X
	lda #$FF
	sta ADDZONE.@02DB.N
	lda #$07
	sta ADDZONE.@02DB.H
	jsr ADDZONE.@02DB
	lda ADDZONE.@02DB.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0054
Y	= DATAORIGIN+$0055
W	= DATAORIGIN+$0056
VALUE	= DATAORIGIN+$0057
PRC	= DATAORIGIN+$0059
RESULT	= DATAORIGIN+$005B

@VarData	= X
@VarDataSize	= 7

	rts						; ret
.endl

.local	DOINPUT						; FUNCTION

	jmp l_0741

.local	REFRESHVALUE					; PROCEDURE

; optimize OK (controls.inc), line = 110

	lda X
	sta BLANK.X
	lda Y
	sta BLANK.Y
	lda W
	sta BLANK.W
	lda #$07
	sta BLANK.H
	jsr BLANK

; optimize OK (controls.inc), line = 111

	lda Y
	add #$01
	sta PUTTEXT.Y
	lda X
	sta PUTTEXT.X
	lda VALUE
	sta PUTTEXT.S
	lda VALUE+1
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (controls.inc), line = 112

	ldy VALUE+1
	sty :bp+1
	ldy VALUE
	lda (:bp),y
	sta LN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0741

; optimize OK (controls.inc), line = 116

	lda SZONE
	sta OZONE

; optimize OK (controls.inc), line = 117

	ldy SZONE
	lda adr._MZONEX1,y
	sta X

; optimize OK (controls.inc), line = 118

	lda adr._MZONEY1,y
	sta Y

; optimize OK (controls.inc), line = 119

	lda adr._MZONEX2,y
	sub X
	sub #$01
	sta W

; optimize OK (controls.inc), line = 120

	lda #$00
	sta adr._MZONEACTIVE,y

; optimize FAIL (0, controls.inc), line = 121

	inc X

; optimize FAIL ('REFRESHVALUE', controls.inc), line = 122

	jsr REFRESHVALUE

; optimize OK (controls.inc), line = 123

	lda LN
	sta CX

; optimize OK (controls.inc), line = 124

	ldy TM
	iny
	sty CTM
	lda #$00
	sta ISCRS
	sta CURSOR.MALLOWKEYS
	lda #$FF
	sta KEYB

; --- RepeatUntilProlog
l_07B8

; optimize OK (controls.inc), line = 126

	lda X
	add CX
	sta CH

; optimize OK (controls.inc), line = 127

	lda TM
	cmp CTM
	jne l_07D8

; optimize OK (controls.inc), line = 129

	add #$14
	sta CTM

; optimize OK (controls.inc), line = 130

	lda CH
	sta INVERT.X
	lda Y
	sta INVERT.Y
	lda #$00
	sta INVERT.W
	lda #$06
	sta INVERT.H
	jsr INVERT
	ldy #1
	lda ISCRS
	beq @+
	dey
@
	tya
	sta ISCRS
l_07D8

; optimize FAIL ('CHECKZONES', controls.inc), line = 132

	jsr CHECKZONES

; optimize OK (controls.inc), line = 133

	lda CURSOR.MBUTTON
	jeq l_080A

; optimize OK (controls.inc), line = 135

	lda ISCRS
	jeq l_0817
	lda CH
	sta INVERT.X
	lda Y
	sta INVERT.Y
	lda #$00
	sta INVERT.W
	lda #$06
	sta INVERT.H
	jsr INVERT
l_0817

; optimize OK (controls.inc), line = 136

	lda #$FE
	sta RESULT
	jmp b_07B8					; break
l_080A

; optimize OK (controls.inc), line = 138

	lda KEYB
	cmp #$FF
	jeq l_083B

; optimize OK (controls.inc), line = 140

	lda ISCRS
	jeq l_0848
	lda CH
	sta INVERT.X
	lda Y
	sta INVERT.Y
	lda #$00
	sta INVERT.W
	lda #$06
	sta INVERT.H
	jsr INVERT
	lda #$00
	sta ISCRS
l_0848

; optimize OK (controls.inc), line = 141

	lda KEYB
	sta @CASETMP_0004
	cmp #$1C
	jne l_0863
@

; optimize OK (controls.inc), line = 142

	lda #$FF
	sta RESULT
	jmp b_07B8					; break
	jmp a_0004
l_0863
	cmp #$0C
	jne l_086E

; optimize OK (controls.inc), line = 143

	lda OZONE
	sta RESULT
	jmp b_07B8					; break
	jmp a_0004
l_086E
	cmp #$86
	jne l_087B

; optimize OK (controls.inc), line = 144

	lda CX
	jmi l_088D
	jeq l_088D
	dec CX
l_088D
	jmp a_0004
l_087B
	cmp #$87
	jne l_089B

; optimize OK (controls.inc), line = 145

	ldy #$00
	lda CX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	cmp W
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	jpl l_08AF
	inc CX
l_08AF
	jmp a_0004
l_089B
	cmp #$34
	jne l_08BD

; optimize OK (controls.inc), line = 148

	ldy #$00
	lda CX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda :STACKORIGIN+9
	cmp LN
@
	jne l_08D1
	lda LN
	sub #$01
	ldy VALUE+1
	sty :bp+1
	ldy VALUE
	sta (:bp),y
l_08D1

; optimize OK (controls.inc), line = 149

	mwy VALUE :bp2
	ldy CX
	lda #$00
	sta (:bp2),y

; optimize OK (controls.inc), line = 150

	tya
	jmi l_08F8
	jeq l_08F8
	dec CX
l_08F8

; optimize FAIL ('REFRESHVALUE', controls.inc), line = 151

	jsr REFRESHVALUE
	jmp a_0004
l_08BD

; optimize OK (controls.inc), line = 154

	lda KEYB
	jsr KEYSCAN2ASC
	lda KEYSCAN2ASC.RESULT
	sta CH

; optimize OK (controls.inc), line = 155

	cmp #$60
	jcc l_091B
	sub #$20
	sta CH
l_091B

; optimize OK (controls.inc), line = 156

	ldy #$00
	lda CX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	cmp W
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	jpl l_0933
	inc CX
l_0933

; optimize OK (controls.inc), line = 157

	mwy VALUE :bp2
	ldy CX
	lda CH
	sta (:bp2),y

; optimize OK (controls.inc), line = 158

	ldy #$00
	lda CX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	lda LN
	cmp :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+9
	svc
	eor #$80
	jpl l_0957
	ldy VALUE+1
	sty :bp+1
	ldy VALUE
	lda CX
	sta (:bp),y
l_0957

; optimize FAIL ('REFRESHVALUE', controls.inc), line = 159

	jsr REFRESHVALUE
a_0004

; optimize OK (controls.inc), line = 161

	lda TM
	sta CTM
	lda #$FF
	sta KEYB
l_083B

; optimize OK (controls.inc), line = 163

	jmp l_07B8
b_07B8

; optimize OK (controls.inc), line = 164

	lda #$01
	sta CURSOR.MALLOWKEYS

; optimize OK (controls.inc), line = 165

	lda #$FF
	sta KEYB

; optimize OK (controls.inc), line = 166

	ldy OZONE
	lda #$01
	sta adr._MZONEACTIVE,y
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$005C
RESULT	= DATAORIGIN+$005E
OZONE	= DATAORIGIN+$005F
CX	= DATAORIGIN+$0060
CH	= DATAORIGIN+$0061
LN	= DATAORIGIN+$0062
X	= DATAORIGIN+$0063
Y	= DATAORIGIN+$0064
W	= DATAORIGIN+$0065
CTM	= DATAORIGIN+$0066
ISCRS	= DATAORIGIN+$0067
@CASETMP_0004	= DATAORIGIN+$0068

@VarData	= VALUE
@VarDataSize	= 12

	rts						; ret
.endl

.local	ADDFILELABEL					; PROCEDURE

; optimize OK (controls.inc), line = 183

	lda N
	cmp #$0F
	jcc l_099D
	jmp @exit
l_099D

; optimize OK (controls.inc), line = 184

	ldy N
	lda adr._DIRFILEX,y
	sta X
	lda adr._DIRFILEY,y
	sta Y

; optimize OK (controls.inc), line = 185

	lda N
	asl @
	tay
	lda adr.DIRNAME,y
	sta PUTTEXT.S
	lda adr.DIRNAME+1,y
	sta PUTTEXT.S+1
	lda X
	sta PUTTEXT.X
	lda Y
	sta PUTTEXT.Y
	jsr PUTTEXT

; optimize OK (controls.inc), line = 186

	lda PRC
	sta ADDZONE.@02DB.PRC
	lda PRC+1
	sta ADDZONE.@02DB.PRC+1
	lda Y
	sub #$01
	sta ADDZONE.@02DB.Y
	lda X
	sub #$01
	sta ADDZONE.@02DB.X
	lda #$0E
	add N
	sta ADDZONE.@02DB.N
	lda #$0E
	sta ADDZONE.@02DB.W
	lda #$07
	sta ADDZONE.@02DB.H
	jsr ADDZONE.@02DB

; ------------------------------------------------------------

N	= DATAORIGIN+$014A
PRC	= DATAORIGIN+$014B
X	= DATAORIGIN+$014D
Y	= DATAORIGIN+$014E

@VarData	= N
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWABOUT					; PROCEDURE

; optimize OK (about.inc), line = 3

	lda #$FF
	jsr SETMODULE

; optimize OK (about.inc), line = 4

	lda #$14
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (about.inc), line = 5

	lda #$0A
	sta PUTTEXT.X
	lda #$06
	sta PUTTEXT.Y
	lda #$01
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 6

	lda #$0A
	sta PUTTEXT.X
	lda #$0C
	sta PUTTEXT.Y
	lda #$15
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 7

	lda #$0F
	sta PUTTEXT.X
	lda #$18
	sta PUTTEXT.Y
	lda #$29
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 8

	lda #$01
	sta PUTTEXT.X
	lda #$24
	sta PUTTEXT.Y
	lda #$32
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 9

	lda #$59
	sta SETSTATUS.S
	lda #$80
	sta SETSTATUS.S+1
	jsr SETSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOCHOICEFILE					; PROCEDURE

; optimize OK (module-disk.inc), line = 13

	lda SZONE
	sta @CASETMP_0005
	cmp #14
	bmi @+
	cmp #29
	seq
	bpl @+
	jmp *+6
@
	jmp l_0A03
@

; optimize OK (module-disk.inc), line = 15

	lda SZONE
	asl @
	tay
	lda adr.DIRNAME-$1C,y
	sta @move.src
	lda adr.DIRNAME+1-$1C,y
	sta @move.src+1
	@moveSTRING FN #17

; optimize OK (module-disk.inc), line = 17

	lda #$07
	sta BLANK.X
	lda #$01
	sta BLANK.Y
	lda #$0C
	sta BLANK.W
	lda #$05
	sta BLANK.H
	jsr BLANK

; optimize OK (module-disk.inc), line = 18

	lda #$07
	sta PUTTEXT.X
	lda #$01
	sta PUTTEXT.Y
	lda FN
	sta PUTTEXT.S
	lda FN+1
	sta PUTTEXT.S+1
	jsr PUTTEXT
l_0A03
a_0005

; ------------------------------------------------------------

@CASETMP_0005	= DATAORIGIN+$0151

@VarData	= @CASETMP_0005
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOPREVPAGEDIR					; PROCEDURE

; optimize OK (module-disk.inc), line = 27

	lda DIRPAGEBEGIN
	sub #$0E
	sta DIRPAGEBEGIN
	scs
	dec DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 28

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DONEXTPAGEDIR					; PROCEDURE

; optimize OK (module-disk.inc), line = 33

	lda DIRPAGEBEGIN
	add #$0E
	sta DIRPAGEBEGIN
	scc
	inc DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 34

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READDIRECTORY					; PROCEDURE

; optimize OK (module-disk.inc), line = 43

	lda adr.DEV+$01
	cmp #$44
	jne l_0A3C

; optimize OK (module-disk.inc), line = 45

	lda #$03
	sta CURSOR.SETPIVOT.X
	sta CURSOR.SETPIVOT.Y
	jsr CURSOR.SETPIVOT
	lda #$EF
	sta CURSOR.SETCURSOR.SPR
	lda #$80
	sta CURSOR.SETCURSOR.SPR+1
	jsr CURSOR.SETCURSOR

; optimize OK (module-disk.inc), line = 46

	lda DEV
	sta @move.src
	lda DEV+1
	sta @move.src+1
	@moveSTRING _FN #21
	lda adr.FILEMASK
	sta SYSTEM.MOVE.@012B.COUNT
	lda adr._FN
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda <adr._FN
	add :STACKORIGIN+10
	sta SYSTEM.MOVE.@012B.DEST
	lda >adr._FN
	adc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.MOVE.@012B.DEST+1
	lda <adr.FILEMASK+$01
	sta SYSTEM.MOVE.@012B.SOURCE
	lda >adr.FILEMASK+$01
	sta SYSTEM.MOVE.@012B.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE.@012B.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@012B
	m@INLINE
	.ENDL

; optimize OK (module-disk.inc), line = 47

	lda DIRPAGEBEGIN
	sta DIRSEEK
	lda DIRPAGEBEGIN+1
	sta DIRSEEK+1

; optimize OK (module-disk.inc), line = 48

	lda DIRPAGEBEGIN+1
	jmi l_0A68
	ora DIRPAGEBEGIN
	jeq l_0A68
	lda #$72
	jmp l_0A74
l_0A68
	lda #$7D
l_0A74
	sta SETSTATUS.S
	lda #$80
	sta SETSTATUS.S+1
	jsr SETSTATUS

; optimize OK (module-disk.inc), line = 49

	lda #$01
	sta CIO.OPN.CHN
	lda #$06
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda _FN
	sta CIO.OPN.DEVICE
	lda _FN+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; optimize OK (module-disk.inc), line = 50

	lda #$FF
	sta N

; --- WhileProlog
	jmp l_0A82
l_0A83

; optimize OK (module-disk.inc), line = 53

	lda #$01
	sta GETLN.CHN
	lda _FN
	sta GETLN.BUF
	lda _FN+1
	sta GETLN.BUF+1
	jsr GETLN

; optimize OK (module-disk.inc), line = 54

	lda adr._FN+$01
	cmp #$30
	jcc l_0A9A

; optimize OK (module-disk.inc), line = 56

	dec adr._FN
	lda _FN
	sta SETSTATUS.S
	lda _FN+1
	sta SETSTATUS.S+1
	jsr SETSTATUS

; optimize OK (module-disk.inc), line = 57

	lda #$03
	sta SYSTEM.IORESULT
	jmp b_0A83					; break
l_0A9A

; optimize OK (module-disk.inc), line = 60

	lda DIRSEEK+1
	jmi l_0AC1
	ora DIRSEEK
	jeq l_0AC1

; optimize FAIL (0, module-disk.inc), line = 62

	lda DIRSEEK
	bne @+
	dec DIRSEEK+1
@
	dec DIRSEEK
	jmp c_0A83					; continue
l_0AC1

; optimize OK (module-disk.inc), line = 65

	lda N
	cmp #$FF
	jne l_0ADA
	lda #$92
	sta SETSTATUS.S
	lda #$80
	sta SETSTATUS.S+1
	jsr SETSTATUS
l_0ADA

; optimize FAIL (0, module-disk.inc), line = 68

	inc N

; optimize OK (module-disk.inc), line = 69

	lda N
	asl @
	tay
	lda adr.DIRNAME,y
	sta REDUCEFILENAME.OUTFN
	lda adr.DIRNAME+1,y
	sta REDUCEFILENAME.OUTFN+1
	lda _FN
	sta REDUCEFILENAME.INFN
	lda _FN+1
	sta REDUCEFILENAME.INFN+1
	jsr REDUCEFILENAME
c_0A83
l_0A82

; optimize OK (module-disk.inc), line = 51

	lda SYSTEM.IORESULT
	cmp #$01
	jne l_0A83w
	lda N
	sub #$0F
	svc
	eor #$80
	jpl l_0A83w
	jmp l_0A83
l_0A83w
b_0A83
	jmp l_0B0C
l_0A3C

; optimize OK (module-disk.inc), line = 73

	lda #$A0
	sta SYSTEM.IORESULT
l_0B0C

; optimize OK (module-disk.inc), line = 74

	lda adr.YSCR+$84
	sta SYSTEM.FILLCHAR.@012A.A
	lda adr.YSCR+1+$84
	sta SYSTEM.FILLCHAR.@012A.A+1
	lda #$F8
	sta SYSTEM.FILLCHAR.@012A.COUNT
	lda #$02
	sta SYSTEM.FILLCHAR.@012A.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
	m@INLINE
	.ENDL

; optimize OK (module-disk.inc), line = 75

	lda SYSTEM.IORESULT
	cmp #$04
	jcc l_0B28
	ldy #256-14
	mva:rne CODEORIGIN+$00A7+14-256,y adr._FN+14-256,y+

; optimize OK (module-disk.inc), line = 78

	lda SYSTEM.IORESULT
	lsr @
	lsr @
	lsr @
	lsr @
	sta N
	ldy N
	lda adr._HEX,y
	sta adr._FN+$0C

; optimize OK (module-disk.inc), line = 79

	lda SYSTEM.IORESULT
	and #$0F
	sta N
	ldy N
	lda adr._HEX,y
	sta adr._FN+$0D

; optimize OK (module-disk.inc), line = 80

	lda _FN
	sta SETSTATUS.S
	lda _FN+1
	sta SETSTATUS.S+1
	jsr SETSTATUS
	jmp l_0B5D
l_0B28

; optimize OK (module-disk.inc), line = 84

	lda #$0E
	sta J

l_0B66
; --- ForToDoCondition
	lda J
	cmp #$1F
	jcs l_0B74
	jsr CLEARZONE

; --- ForToDoEpilog
	inc J
	jne l_0B66
l_0B74

; optimize OK (module-disk.inc), line = 85

	lda #$00
	sta J

; --- WhileProlog
	jmp l_0B83
l_0B84

; optimize OK (module-disk.inc), line = 87

	lda J
	sta ADDFILELABEL.N
	lda <DOCHOICEFILE
	sta ADDFILELABEL.PRC
	lda >DOCHOICEFILE
	sta ADDFILELABEL.PRC+1
	jsr ADDFILELABEL

; optimize FAIL (0, module-disk.inc), line = 88

	inc J
l_0B83

; optimize OK (module-disk.inc), line = 85

	lda N
	sub J
	svc
	eor #$80
	jpl l_0B84

; optimize OK (module-disk.inc), line = 90

	lda DIRPAGEBEGIN+1
	bmi @+
	ora DIRPAGEBEGIN
	sne
@
	jmp *+6
@	jmp l_0BB7x
	lda SYSTEM.IORESULT
	cmp #$03
	jcs l_0BB7
@
l_0BB7x

; optimize OK (module-disk.inc), line = 92

	lda #$1B
	sta BLANK.X
	lda #$29
	sta BLANK.Y
	lda #$0C
	sta BLANK.W
	lda #$05
	sta BLANK.H
	jsr BLANK
	lda #$1C
	jsr CLEARZONE

; optimize OK (module-disk.inc), line = 93

	lda DIRPAGEBEGIN+1
	jmi l_0BD0
	ora DIRPAGEBEGIN
	jeq l_0BD0

; optimize OK (module-disk.inc), line = 94

	lda #$1B
	sta ADDBUTTON.X
	lda #$29
	sta ADDBUTTON.Y
	lda #$B5
	sta ADDBUTTON.CAP
	lda #$80
	sta ADDBUTTON.CAP+1
	lda <DOPREVPAGEDIR
	sta ADDBUTTON.PRC
	lda >DOPREVPAGEDIR
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON
l_0BD0

; optimize OK (module-disk.inc), line = 95

	lda SYSTEM.IORESULT
	cmp #$03
	jcs l_0BE9

; optimize OK (module-disk.inc), line = 97

	lda #$23
	sta ADDBUTTON.X
	lda #$29
	sta ADDBUTTON.Y
	lda #$BA
	sta ADDBUTTON.CAP
	lda #$80
	sta ADDBUTTON.CAP+1
	lda <DONEXTPAGEDIR
	sta ADDBUTTON.PRC
	lda >DONEXTPAGEDIR
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize FAIL ('CLEARSTATUS', module-disk.inc), line = 98

	jsr CLEARSTATUS
l_0B5D
l_0BE9
l_0BB7

; optimize OK (module-disk.inc), line = 102

	lda #$01
	jsr CIO.CLS

; optimize OK (module-disk.inc), line = 103

	lda #$00
	sta CURSOR.SETPIVOT.X
	sta CURSOR.SETPIVOT.Y
	jsr CURSOR.SETPIVOT
	lda #$E8
	sta CURSOR.SETCURSOR.SPR
	lda #$80
	sta CURSOR.SETCURSOR.SPR+1
	jsr CURSOR.SETCURSOR

; ------------------------------------------------------------

N	= DATAORIGIN+$0152
J	= DATAORIGIN+$0153
DIRSEEK	= DATAORIGIN+$0154

@VarData	= N
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STARTDIRECTORY					; PROCEDURE

; optimize OK (module-disk.inc), line = 108

	lda #$00
	sta DIRPAGEBEGIN
	sta DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 109

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOFILENAME					; PROCEDURE

; optimize OK (module-disk.inc), line = 114

	lda FN
	sta DOINPUT.VALUE
	lda FN+1
	sta DOINPUT.VALUE+1
	jsr DOINPUT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DODEVICE					; PROCEDURE

; optimize OK (module-disk.inc), line = 119

	lda DEV
	sta DOINPUT.VALUE
	lda DEV+1
	sta DOINPUT.VALUE+1
	jsr DOINPUT
	lda DOINPUT.RESULT
	jmi l_0C20
	jsr STARTDIRECTORY
l_0C20
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWDISKDIRECTORY				; PROCEDURE

; optimize OK (module-disk.inc), line = 124

	lda CURMODULE
	jeq @exit
l_0C3A

; optimize OK (module-disk.inc), line = 125

	lda #$00
	jsr SETMODULE

; optimize OK (module-disk.inc), line = 126

	lda adr.YSCR+$82
	sta :bp2
	lda adr.YSCR+1+$82
	sta :bp2+1
	lda #$FF
	ldy #$13
	sta:rpl (:bp2),y-

; optimize OK (module-disk.inc), line = 127

	lda #$14
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (module-disk.inc), line = 128

	lda #$01
	sta ADDINPUT.X
	sta ADDINPUT.Y
	lda #$04
	sta ADDINPUT.W
	lda DEV
	sta ADDINPUT.VALUE
	lda DEV+1
	sta ADDINPUT.VALUE+1
	lda <DODEVICE
	sta ADDINPUT.PRC
	lda >DODEVICE
	sta ADDINPUT.PRC+1
	jsr ADDINPUT

; optimize OK (module-disk.inc), line = 129

	lda #$07
	sta ADDINPUT.X
	lda #$01
	sta ADDINPUT.Y
	lda #$0C
	sta ADDINPUT.W
	lda FN
	sta ADDINPUT.VALUE
	lda FN+1
	sta ADDINPUT.VALUE+1
	lda <DOFILENAME
	sta ADDINPUT.PRC
	lda >DOFILENAME
	sta ADDINPUT.PRC+1
	jsr ADDINPUT

; optimize OK (module-disk.inc), line = 130

	lda #$15
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$BF
	sta ADDBUTTON.CAP
	lda #$80
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize OK (module-disk.inc), line = 131

	lda #$1B
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$C4
	sta ADDBUTTON.CAP
	lda #$80
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize OK (module-disk.inc), line = 132

	lda #$21
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$C9
	sta ADDBUTTON.CAP
	lda #$80
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize FAIL ('STARTDIRECTORY', module-disk.inc), line = 133

	jsr STARTDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWPATHEDITOR					; PROCEDURE

; optimize OK (module-path.inc), line = 3

	lda CURMODULE
	cmp #$01
	jeq @exit
l_0C76

; optimize OK (module-path.inc), line = 4

	lda #$01
	jsr SETMODULE

; optimize OK (module-path.inc), line = 6

	lda #$03
	sta ADDZONE.@02DB.N
	lda #$01
	sta ADDZONE.@02DB.X
	lda #$37
	sta ADDZONE.@02DB.Y
	lda #$03
	sta ADDZONE.@02DB.W
	lda #$07
	sta ADDZONE.@02DB.H
	lda <NULLPROC
	sta ADDZONE.@02DB.PRC
	lda >NULLPROC
	sta ADDZONE.@02DB.PRC+1
	jsr ADDZONE.@02DB

; optimize OK (module-path.inc), line = 7

	lda #$04
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-path.inc), line = 8

	lda #$05
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-path.inc), line = 9

	lda #$06
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-path.inc), line = 11

	lda #$07
	sta ADDZONE.@02DB.N
	lda #$0F
	sta ADDZONE.@02DB.X
	lda #$37
	sta ADDZONE.@02DB.Y
	lda #$03
	sta ADDZONE.@02DB.W
	lda #$07
	sta ADDZONE.@02DB.H
	lda <NULLPROC
	sta ADDZONE.@02DB.PRC
	lda >NULLPROC
	sta ADDZONE.@02DB.PRC+1
	jsr ADDZONE.@02DB

; optimize OK (module-path.inc), line = 12

	lda #$08
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-path.inc), line = 14

	lda #$FF
	jsr SETCONTROL

; optimize OK (module-path.inc), line = 15

	lda #$2C
	sta adr.HPOSP+$02
	lda #$E6
	sta adr.PCOL+$02
	lda #$03
	sta adr.SIZEP+$02

; optimize OK (module-path.inc), line = 16

	lda #$14
	.LOCAL +MAIN.SETSCREENWIDTH
	m@INLINE
	.ENDL

; optimize OK (module-path.inc), line = 17

	lda #$06
	sta PUTIMAGE.ADR
	lda #$84
	sta PUTIMAGE.ADR+1
	lda #$00
	sta PUTIMAGE.X
	sta PUTIMAGE.Y
	lda #$03
	sta PUTIMAGE.WIDTH
	lda #$30
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE

; optimize OK (module-path.inc), line = 19

	lda #$00
	sta ADDZONE.@0324.X
	sta ADDZONE.@0324.Y
	lda #$03
	sta ADDZONE.@0324.W
	lda #$0C
	sta ADDZONE.@0324.H
	lda <NULLPROC
	sta ADDZONE.@0324.PRC
	lda >NULLPROC
	sta ADDZONE.@0324.PRC+1
	jsr ADDZONE.@0324

; optimize OK (module-path.inc), line = 20

	lda <NULLPROC
	sta ADDZONEV.@0356.PRC
	lda >NULLPROC
	sta ADDZONEV.@0356.PRC+1
	jsr ADDZONEV.@0356

; optimize OK (module-path.inc), line = 21

	lda <NULLPROC
	sta ADDZONEV.@0356.PRC
	lda >NULLPROC
	sta ADDZONEV.@0356.PRC+1
	jsr ADDZONEV.@0356

; optimize OK (module-path.inc), line = 22

	lda <NULLPROC
	sta ADDZONEV.@0356.PRC
	lda >NULLPROC
	sta ADDZONEV.@0356.PRC+1
	jsr ADDZONEV.@0356

; optimize OK (module-path.inc), line = 23

	lda #$03
	sta ADDZONE.@0324.X
	lda #$00
	sta ADDZONE.@0324.Y
	lda #$03
	sta ADDZONE.@0324.W
	lda #$0C
	sta ADDZONE.@0324.H
	lda <NULLPROC
	sta ADDZONE.@0324.PRC
	lda >NULLPROC
	sta ADDZONE.@0324.PRC+1
	jsr ADDZONE.@0324

; optimize OK (module-path.inc), line = 24

	lda <NULLPROC
	sta ADDZONEV.@0356.PRC
	lda >NULLPROC
	sta ADDZONEV.@0356.PRC+1
	jsr ADDZONEV.@0356

; optimize OK (module-path.inc), line = 25

	lda <NULLPROC
	sta ADDZONEV.@0356.PRC
	lda >NULLPROC
	sta ADDZONEV.@0356.PRC+1
	jsr ADDZONEV.@0356
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSCENARIOEDITOR				; PROCEDURE

; optimize OK (module-scenario.inc), line = 3

	lda CURMODULE
	cmp #$02
	jeq @exit
l_0CCD

; optimize OK (module-scenario.inc), line = 4

	lda #$02
	jsr SETMODULE

; optimize OK (module-scenario.inc), line = 5

	lda #$03
	sta ADDZONE.@02DB.N
	lda #$01
	sta ADDZONE.@02DB.X
	lda #$37
	sta ADDZONE.@02DB.Y
	lda #$03
	sta ADDZONE.@02DB.W
	lda #$07
	sta ADDZONE.@02DB.H
	lda <NULLPROC
	sta ADDZONE.@02DB.PRC
	lda >NULLPROC
	sta ADDZONE.@02DB.PRC+1
	jsr ADDZONE.@02DB

; optimize OK (module-scenario.inc), line = 6

	lda #$04
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-scenario.inc), line = 7

	lda #$05
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-scenario.inc), line = 8

	lda #$06
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-scenario.inc), line = 10

	lda #$07
	sta ADDZONE.@02DB.N
	lda #$0F
	sta ADDZONE.@02DB.X
	lda #$37
	sta ADDZONE.@02DB.Y
	lda #$03
	sta ADDZONE.@02DB.W
	lda #$07
	sta ADDZONE.@02DB.H
	lda <NULLPROC
	sta ADDZONE.@02DB.PRC
	lda >NULLPROC
	sta ADDZONE.@02DB.PRC+1
	jsr ADDZONE.@02DB

; optimize OK (module-scenario.inc), line = 11

	lda #$08
	sta ADDZONEH.@0339.N
	lda <NULLPROC
	sta ADDZONEH.@0339.PRC
	lda >NULLPROC
	sta ADDZONEH.@0339.PRC+1
	jsr ADDZONEH.@0339

; optimize OK (module-scenario.inc), line = 12

	lda #$FF
	jsr SETCONTROL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETMODULE					; PROCEDURE
	sta CM

; optimize OK (module.inc), line = 3

	sta CURMODULE

; optimize OK (module.inc), line = 4

	lda #$03
	sta I

l_0CFB
; --- ForToDoCondition
	lda I
	cmp #$0A
	jcs l_0D09
	jsr CLEARZONE

; --- ForToDoEpilog
	inc I
	jne l_0CFB
l_0D09

; optimize OK (module.inc), line = 5

	lda #$01
	sta adr._MZONEACTIVE

; optimize OK (module.inc), line = 6

	sta adr._MZONEACTIVE+$01

; optimize OK (module.inc), line = 7

	sta adr._MZONEACTIVE+$02

; optimize OK (module.inc), line = 8

	lda adr.YSCR+$D0
	sta SYSTEM.FILLCHAR.@012A.A
	lda adr.YSCR+1+$D0
	sta SYSTEM.FILLCHAR.@012A.A+1
	lda #$58
	sta SYSTEM.FILLCHAR.@012A.COUNT
	lda #$02
	sta SYSTEM.FILLCHAR.@012A.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
	m@INLINE
	.ENDL

; optimize OK (module.inc), line = 9

	lda #$00
	sta adr.HPOSP+$02

; optimize OK (module.inc), line = 10

	lda CM
	jsr SETICON

; optimize FAIL ('CLEARSTATUS', module.inc), line = 11

	jsr CLEARSTATUS

; optimize FAIL ('CLEARWORKAREA', module.inc), line = 12

	jsr CLEARWORKAREA

; optimize OK (module.inc), line = 13

	ldy #1
	lda CM
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE

; optimize OK (module.inc), line = 14

	ldy #1
	lda CM
	cmp #$01
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE+$01

; optimize OK (module.inc), line = 15

	ldy #1
	lda CM
	cmp #$02
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE+$02

; ------------------------------------------------------------

CM	= DATAORIGIN+$0156

@VarData	= CM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITMODULES					; PROCEDURE

; optimize OK (module.inc), line = 20

	lda #$00
	sta SETZONE.N
	sta SETZONE.ACT
	lda #$1C
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWDISKDIRECTORY
	sta SETZONE.PRC
	lda >SHOWDISKDIRECTORY
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 21

	lda #$01
	sta SETZONE.N
	lda #$00
	sta SETZONE.ACT
	lda #$20
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWPATHEDITOR
	sta SETZONE.PRC
	lda >SHOWPATHEDITOR
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 22

	lda #$02
	sta SETZONE.N
	lda #$00
	sta SETZONE.ACT
	lda #$24
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWSCENARIOEDITOR
	sta SETZONE.PRC
	lda >SHOWSCENARIOEDITOR
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 23

	lda #$78
	sta I

l_0D7B
; --- ForToDoCondition
	lda I
	cmp #$7B
	jcs l_0D89
	asl @
	tay
	lda adr.YSCR,y
	add #$08
	sta :bp2
	lda adr.YSCR+1,y
	adc #$00
	sta :bp2+1
	lda #$55
	ldy #$1F
	sta:rpl (:bp2),y-

; --- ForToDoEpilog
	inc I
	jne l_0D7B
l_0D89

; optimize OK (module.inc), line = 24

	lda #$00
	sta PUTTEXTC.X
	lda #$3F
	sta PUTTEXTC.Y
	lda #$D0
	sta PUTTEXTC.S
	lda #$80
	sta PUTTEXTC.S+1
	jsr PUTTEXTC
	ldy #256-5
	mva:rne CODEORIGIN+$00D9+5-256,y adr.FILEMASK+5-256,y+
	ldy #256-3
	mva:rne CODEORIGIN+$00DE+3-256,y adr.DEV+3-256,y+
	ldy #256-7
	mva:rne CODEORIGIN+$00E1+7-256,y adr.FN+7-256,y+

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITEDITOR					; PROCEDURE

; optimize OK (SIED.pas), line = 44

	lda #$00
	sta I

l_0DAB
; --- ForToDoCondition
	ldy I
	cpy #$20
	jcs l_0DB9

; optimize OK (SIED.pas), line = 46

	lda #$00
	sta adr._ASC2INT,y

; optimize OK (SIED.pas), line = 47

	lda I
	sta adr._ASC2INT+$20,y

; optimize OK (SIED.pas), line = 48

	lda #$20
	add I
	ldy I
	sta adr._ASC2INT+$40,y

; optimize OK (SIED.pas), line = 49

	lda #$20
	add I
	sta adr._ASC2INT+$60,y

; --- ForToDoEpilog
	inc I
	jne l_0DAB
l_0DB9

; optimize OK (SIED.pas), line = 51

	lda #$00
	sta I

l_0DFD
; --- ForToDoCondition
	lda I
	cmp #$38
	jcs l_0E0B
	sta :STACKORIGIN+9
	lda #$10
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	lda :eax
	sta :STACKORIGIN+10
	lda #$24
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	asl @
	tay
	lda :STACKORIGIN+10
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_0DFD
l_0E0B

; optimize OK (SIED.pas), line = 52

	lda #$00
	sta I

l_0E2A
; --- ForToDoCondition
	lda I
	cmp #$30
	jcs l_0E38
	ldy #$00
	lda I
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add #$38
	asl @
	sta :STACKORIGIN+9
	lda #$14
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	lda :eax
	sta :STACKORIGIN+10
	lda #$28
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda :STACKORIGIN+10
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_0E2A
l_0E38

; optimize OK (SIED.pas), line = 53

	lda #$00
	sta I

l_0E5B
; --- ForToDoCondition
	lda I
	cmp #$18
	jcs l_0E69
	lda #$68
	sta :STACKORIGIN+9
	ldy #$00
	lda I
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add :STACKORIGIN+9
	asl @
	sta :STACKORIGIN+9
	lda #$C0
	sta :STACKORIGIN+10
	lda #$2B
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$28
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	ldy :STACKORIGIN+9
	lda :STACKORIGIN+10
	add :eax
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_0E5B
l_0E69

; optimize OK (SIED.pas), line = 54

	lda #$00
	sta SYSTEM.FILLCHAR.@012A.A
	lda #$20
	sta SYSTEM.FILLCHAR.@012A.A+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.COUNT
	lda #$10
	sta SYSTEM.FILLCHAR.@012A.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@012A.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
	m@INLINE
	.ENDL

; optimize OK (SIED.pas), line = 55

	lda #$FF
	ldy #$31
	sta:rpl $2317,y-

; optimize OK (SIED.pas), line = 56

	lda #$01
	sta ACTIVEPAGE

; optimize OK (SIED.pas), line = 57

	lda #$00
	sta SDMACTL

; -------------------  ASM Block 00000089  -------------------

    lda $14
    cmp $14
    beq *-2
  
; -------------------  ASM Block 00000090  -------------------

 sei; 
; optimize OK (SIED.pas), line = 65

	mva <MYDLI VDSLST
	mva >MYDLI VDSLST+1

; optimize OK (SIED.pas), line = 66

	lda #$C0
	sta NMIEN

; -------------------  ASM Block 00000091  -------------------

 cli; 
; optimize OK (SIED.pas), line = 68

	lda #$FD
	sta SDLST
	lda #$80
	sta SDLST+1

; optimize OK (SIED.pas), line = 69

	lda #$EA
	sta PFCOL0
	lda #$00
	sta PFCOL1
	lda #$0F
	sta PFCOL2
	lda #$E0
	sta PFCOL4

; optimize OK (SIED.pas), line = 70

	lda #$0A
	sta KRPDEL
	lda #$01
	sta KEYREP

; optimize FAIL ('CURSOR.INITCURSOR', SIED.pas), line = 72

	jsr CURSOR.INITCURSOR

; optimize FAIL ('INITINTERFACE', SIED.pas), line = 73

	jsr INITINTERFACE

; optimize FAIL ('INITMODULES', SIED.pas), line = 74

	jsr INITMODULES

; optimize FAIL ('SHOWABOUT', SIED.pas), line = 75

	jsr SHOWABOUT

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_00EC

; optimize FAIL ('INITEDITOR', SIED.pas), line = 79

	jsr INITEDITOR

; --- WhileProlog
	jmp l_0EC3
l_0EC4

; optimize FAIL ('CHECKZONES', SIED.pas), line = 82

	jsr CHECKZONES
	lda CHECKZONES.RESULT
	jeq l_0ECE

; -------------------  ASM Block 00000092  -------------------

        lda szone
        asl @
        tay
        lda adr._mzonePROC,y
        sta jaddr
        lda adr._mzonePROC+1,y
        sta jaddr+1
        jsr jaddr:$ffff
      
l_0ECE
l_0EC3

; optimize OK (SIED.pas), line = 80

	jmp l_0EC4

; ------------------------------------------------------------

SCREEN_LINES_ADDR	= $0600
PMG_ADDR	= $2000
SCREEN_ADDR	= $2400
EDITOR_ADDR	= $2800
FONTS_ADDR	= $3000
MAX_SPRITE	= $0F
MAX_GROUP	= $07
ZP_TM	= $14
ZP_NFRMTM	= $12
ZP_CURGROUP	= $1C
ZP_CURPWRSPRITE	= $1D
ZP_CURTRLSPRITE	= $1E
ZP_AX1	= $20
ZP_AY1	= $21
ZP_AX2	= $22
ZP_AY2	= $23
ZP_BX1	= $24
ZP_BY1	= $25
ZP_BX2	= $26
ZP_BY2	= $27
ZP__X1	= $28
ZP__Y1	= $29
ZP__X2	= $2A
ZP__Y2	= $2B
ZP_NXTTLEVENT	= $2C
ZP_SCR	= $2E
ZP_BCDSCORE	= $70
ZP_BCDLEVEL	= $74
ZP_PLAYERLIVES	= $75
ZP_BCDMISSILES	= $76
ZP_F1PWR	= $77
ZP_F1SPD	= $78
ZP_F2PWR	= $79
ZP_KEYCODE	= $7A
ZP_JOYDIRECTION	= $7B
ZP_JOYFIRE1	= $7C
ZP_JOYFIRE2	= $7E
ZP_ACTIVEPAGE	= $D4
ZP_I	= $D5
ZP_J	= $D6
ZP_TRAILADR	= $D7
ZP_DYVAL	= $D9
ZP_DXVAL	= $DA
ZP_SPRITEN	= $E0
ZP_SPRITEX	= $E1
ZP_SPRITEY	= $E2
ZP_SPRITEI	= $E3
ZP_GAMESTAT	= $E4
ZP_TLADR	= $E5
ZP_TIMERS	= $E7
ZP_TIMER0	= $E8
ZP_TIMER1	= $E9
ZP_TIMER2	= $EA
ZP_TIMER3	= $EB
ZP_TIMER4	= $EC
ZP_TIMER5	= $ED
ZP_CURTIMELINE	= $EE
DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_MODE_40X24T2	= $02
DL_MODE_40X24T5	= $04
DL_MODE_40X12T5	= $05
DL_MODE_20X24T5	= $06
DL_MODE_20X12T5	= $07
DL_MODE_40X24G4	= $08
DL_MODE_80X48G2	= $09
DL_MODE_80X48G4	= $0A
DL_MODE_160X96G2	= $0B
DL_MODE_160X192G2	= $0C
DL_MODE_160X96G4	= $0D
DL_MODE_160X192G4	= $0E
DL_MODE_320X192G2	= $0F
DL_JMP	= $01
DL_JVB	= $41
adr.DLIST	= CODEORIGIN+$00FD
.var DLIST	= adr.DLIST .word
adr._CONTROLS	= CODEORIGIN+$0157
.var _CONTROLS	= adr._CONTROLS .word
adr._ICONS	= CODEORIGIN+$0277
.var _ICONS	= adr._ICONS .word
adr._ICARD	= CODEORIGIN+$03BB
.var _ICARD	= adr._ICARD .word
adr._IPATH	= CODEORIGIN+$0406
.var _IPATH	= adr._IPATH .word
adr._FONT	= CODEORIGIN+$04C6
.var _FONT	= adr._FONT .word
adr._CFONT	= CODEORIGIN+$073C
.var _CFONT	= adr._CFONT .word
adr.ACONTROLS	= CODEORIGIN+$0877
.var ACONTROLS	= adr.ACONTROLS .word
adr.AICONS	= CODEORIGIN+$088F
.var AICONS	= adr.AICONS .word
K_L	= $00
K_J	= $01
K_SEMICO	= $02
K_F1	= $03
K_F2	= $04
K_K	= $05
K_PLUS	= $06
K_LEFT	= $06
K_STAR	= $07
K_RIGHT	= $07
K_O	= $08
K_P	= $0A
K_U	= $0B
K_RETURN	= $0C
K_I	= $0D
K_UP	= $0E
K_DOWN	= $0F
K_V	= $10
K_HELP	= $11
K_C	= $12
K_F3	= $13
K_F4	= $14
K_B	= $15
K_X	= $16
K_Z	= $17
K_4	= $18
K_3	= $1A
K_6	= $1B
K_ESC	= $1C
K_5	= $1D
K_2	= $1E
K_1	= $1F
K_COMMA	= $20
K_SPACE	= $21
K_DOT	= $22
K_N	= $23
K_M	= $25
K_BACKSL	= $26
K_INVERS	= $27
K_R	= $28
K_E	= $2A
K_Y	= $2B
K_TAB	= $2C
K_T	= $2D
K_W	= $2E
K_Q	= $2F
K_9	= $30
K_0	= $32
K_7	= $33
K_DELETE	= $34
K_8	= $35
K_CLEAR	= $36
K_INSERT	= $37
K_F	= $38
K_H	= $39
K_D	= $3A
K_CAPS	= $3C
K_G	= $3D
K_S	= $3E
K_A	= $3F
KMOD_SHIFT	= $40
KMOD_CTRL	= $80
KRPDEL	= $02D9
KEYREP	= $02DA
KEYB	= $02FC
BRKKEY	= $11
adr._ASC2INT	= $0480
.var _ASC2INT	= adr._ASC2INT .word
GPRIOR	= $026F
SDMACTL	= $022F
PMCTL	= $D01D
PMBASE	= $D407
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.PCOL	= $02C0
.var PCOL	= adr.PCOL .word
I	= $3E
TM	= $14
CURMODULE	= DATAORIGIN+$0013
DLIV	= $0200
NMIEN	= $D40E
SDLST	= $0230
GTIACS	= $026F
PFCOL0	= $02C4
PFCOL1	= $02C5
PFCOL2	= $02C6
PFCOL3	= $02C7
PFCOL4	= $02C8
ACTIVEPAGE	= $D4
SCR	= $2E
adr.YSCR	= $0600
.var YSCR	= adr.YSCR .word
adr.AFONT	= $3000
.var AFONT	= adr.AFONT .word
adr.AFONTC	= $3100
.var AFONTC	= adr.AFONTC .word
MAX_ZONES	= $1F
USER_ZONES_BEGIN	= $09
adr._MZONEACTIVE	= $0500
.var _MZONEACTIVE	= adr._MZONEACTIVE .word
adr._MZONEX1	= $0520
.var _MZONEX1	= adr._MZONEX1 .word
adr._MZONEY1	= $0540
.var _MZONEY1	= adr._MZONEY1 .word
adr._MZONEX2	= $0560
.var _MZONEX2	= adr._MZONEX2 .word
adr._MZONEY2	= $0580
.var _MZONEY2	= adr._MZONEY2 .word
adr._MZONEPROC	= $05A0
.var _MZONEPROC	= adr._MZONEPROC .word
SZONE	= $50
OZONE	= $51
__X	= DATAORIGIN+$001A
__Y	= DATAORIGIN+$001B
__W	= DATAORIGIN+$001C
__H	= DATAORIGIN+$001D
YCONTROLS	= $37
adr._DIRFILEX	= CODEORIGIN+$08A1
.var _DIRFILEX	= adr._DIRFILEX .word
adr._DIRFILEY	= CODEORIGIN+$08B0
.var _DIRFILEY	= adr._DIRFILEY .word
adr.DIRNAME	= [DATAORIGIN+$0069] .array [15] .word
.var DIRNAME	= adr.DIRNAME .word
adr._HEX	= CODEORIGIN+$08BF
.var _HEX	= adr._HEX .word
adr.DEV	= $0400
.var DEV	= adr.DEV .word
adr.FN	= $0405
.var FN	= adr.FN .word
adr._FN	= $0417
.var _FN	= adr._FN .word
adr.FILEMASK	= $042C
.var FILEMASK	= adr.FILEMASK .word
DIRPAGEBEGIN	= DATAORIGIN+$014F
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
DISABLEIOCBCOPY
BASICOFF
ROMOFF
NOROMFONT
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi

	.ifdef MAIN.CURSOR.@UnitInit
	jsr MAIN.CURSOR.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	ift .SIZEOF(MAIN.CURSOR) > 0
	.print 'CURSOR: ',MAIN.CURSOR,'..',MAIN.CURSOR+.SIZEOF(MAIN.CURSOR)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $FF $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 <[DATAORIGIN+$0087] >[DATAORIGIN+$0087] <[DATAORIGIN+$0094] >[DATAORIGIN+$0094] <[DATAORIGIN+$00A1] >[DATAORIGIN+$00A1] <[DATAORIGIN+$00AE]  >[DATAORIGIN+$00AE] <[DATAORIGIN+$00BB] >[DATAORIGIN+$00BB] <[DATAORIGIN+$00C8] >[DATAORIGIN+$00C8] <[DATAORIGIN+$00D5] >[DATAORIGIN+$00D5] <[DATAORIGIN+$00E2]
.by  >[DATAORIGIN+$00E2] <[DATAORIGIN+$00EF] >[DATAORIGIN+$00EF] <[DATAORIGIN+$00FC] >[DATAORIGIN+$00FC] <[DATAORIGIN+$0109] >[DATAORIGIN+$0109] <[DATAORIGIN+$0116]  >[DATAORIGIN+$0116] <[DATAORIGIN+$0123] >[DATAORIGIN+$0123] <[DATAORIGIN+$0130] >[DATAORIGIN+$0130] <[DATAORIGIN+$013D] >[DATAORIGIN+$013D]

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 343

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $13 $53 $50 $41 $43 $45 $20  $49 $4D $50 $41 $43 $54 $20 $45  $44 $49 $54 $4F $52 $13 $2D $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $08 $47 $53 $44 $20 $32 $30
.by  $32 $34 $26 $47 $49 $54 $3A $2F  $2F $47 $53 $4F $46 $54 $57 $41  $52 $45 $44 $45 $56 $45 $4C $4F
.by  $50 $4D $45 $4E $54 $2F $53 $50  $41 $43 $45 $49 $4D $50 $41 $43  $54 $07 $32 $38 $2D $32 $2D $32
.by  $34 $10 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44  $45 $46 $0A $53 $45 $45 $4B $49
.by  $4E $47 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
.by  $2E $2E $14 $52 $45 $41 $44 $49  $4E $47 $20 $44 $49 $52 $45 $43  $54 $4F $52 $59 $2E $2E $2E $0D
.by  $49 $2F $4F $20 $45 $52 $52 $4F  $52 $20 $24 $30 $30 $04 $50 $52  $45 $56 $04 $4E $45 $58 $54 $04
.by  $4C $4F $41 $44 $04 $53 $41 $56  $45 $06 $45 $58 $50 $4F $52 $54  $08 $30 $30 $3A $30 $30 $2E $30
.by  $30 $04 $2A $2E $2A $9B $02 $44  $3A $06 $4E $4F $4E $41 $4D $45  $10 $18 $3C $3E $78 $60 $80 $BA
.by  $7C $F6 $EE $6C $BA $44 $10 $10  $00 $C6 $00 $10 $10 $70 $70 $70  $70 $30 $80 $20 $4B $00 $28 $0B
.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $90 $0D
.by  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $30 $0D  $0D $0D $0D $0D $B0 $0D $0D $0D
.by  $0D $0D $0D $8D $41 $FD $80 $15  $55 $40 $56 $59 $50 $56 $69 $58  $56 $A9 $58 $56 $69 $58 $56 $59
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $9A $54 $15 $AA $54 $15 $9A
.by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $56 $95 $50 $56 $A5 $58  $56 $A9 $58 $56 $A5 $58 $56 $95
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $A5 $54  $15 $A9 $54 $15 $AA $54 $15 $A9
.by  $54 $15 $A5 $54 $05 $55 $50 $15  $55 $40 $56 $59 $50 $56 $99 $58  $56 $A9 $58 $56 $99 $58 $56 $59
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $A6 $54 $15 $AA $54 $15 $A6
.by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $55 $55 $50 $56 $A9 $58  $56 $A9 $58 $56 $A9 $58 $55 $55
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $55 $54  $15 $AA $54 $15 $AA $54 $15 $AA
.by  $54 $15 $55 $54 $05 $55 $50 $15  $55 $40 $56 $A9 $50 $55 $55 $58  $5A $AA $58 $56 $A9 $58 $55 $A5
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $AA $54  $15 $55 $54 $16 $AA $94 $15 $AA
.by  $54 $15 $69 $54 $05 $55 $50 $15  $55 $40 $55 $A5 $50 $56 $A9 $58  $5A $AA $58 $55 $55 $58 $56 $A9
.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $69 $54  $15 $AA $54 $16 $AA $94 $15 $55
.by  $54 $15 $AA $54 $05 $55 $50 $55  $55 $54 $6A $A9 $56 $6A $A9 $56  $55 $55 $5A $55 $65 $54 $55 $89
.by  $56 $55 $65 $56 $55 $55 $56 $55  $65 $56 $55 $65 $56 $55 $55 $56  $2A $AA $AA $00 $00 $14 $00 $01
.by  $46 $00 $04 $5A $00 $01 $18 $00  $04 $68 $00 $32 $20 $00 $48 $00  $00 $E0 $00 $0D $20 $00 $D2 $80
.by  $00 $28 $00 $00 $00 $00 $00 $15  $55 $00 $56 $6A $40 $25 $55 $60  $06 $69 $60 $05 $55 $60 $06 $99
.by  $60 $05 $55 $60 $06 $6A $60 $05  $55 $60 $05 $9A $94 $01 $55 $5A  $00 $AA $A8 $00 $00 $00 $15 $55
.by  $55 $1A $AA $55 $1A $AA $55 $15  $55 $54 $15 $59 $55 $15 $62 $55  $15 $59 $55 $15 $55 $55 $15 $59
.by  $55 $15 $59 $55 $15 $55 $55 $00  $00 $00 $00 $00 $05 $00 $00 $51  $00 $01 $14 $00 $00 $44 $00 $01
.by  $10 $00 $0C $00 $00 $10 $00 $00  $30 $00 $03 $40 $00 $34 $00 $00  $00 $00 $00 $00 $00 $00 $05 $55
.by  $40 $15 $9A $90 $01 $55 $50 $01  $9A $50 $01 $55 $50 $01 $A6 $50  $01 $55 $50 $01 $9A $90 $01 $55
.by  $50 $01 $66 $A5 $00 $55 $54 $AA  $AA $AA $95 $55 $55 $9A $AA $55  $9A $AA $55 $95 $55 $56 $95 $59
.by  $55 $95 $62 $55 $95 $59 $55 $95  $55 $55 $95 $59 $55 $95 $59 $55  $95 $55 $55 $AA $AA $AA $AA $AA
.by  $A5 $AA $AA $51 $AA $A9 $16 $AA  $AA $46 $AA $A9 $9A $AA $AE $AA  $AA $9A $AA $AA $BA $AA $AB $6A
.by  $AA $B6 $AA $AA $AA $AA $AA $AA  $AA $AA $A5 $55 $6A $95 $9A $9A  $A9 $55 $5A $A9 $9A $5A $A9 $55
.by  $5A $A9 $A6 $5A $A9 $55 $5A $A9  $9A $9A $A9 $55 $5A $A9 $66 $A5  $AA $55 $56 $2A $AA $AA $AA $AA
.by  $0A $AA $AA $AA $A8 $0A $AA $AA  $AA $A8 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA
.by  $A0 $02 $AA $AA $AA $A0 $02 $AA  $AA $AA $A0 $02 $AA $AA $AA $A0  $02 $AA $AA $AA $A0 $02 $AA $AA
.by  $AA $A0 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA  $A0 $00 $AA $AA $AA $80 $00 $10
.by  $01 $1F $D0 $01 $54 $52 $01 $6F  $D1 $81 $74 $51 $E1 $6F $D0 $F9  $54 $50 $F1 $1F $D0 $61 $14 $90
.by  $41 $1F $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $40 $10 $0D  $38 $10 $31 $2C $10 $C1 $32 $13
.by  $01 $11 $14 $01 $08 $93 $01 $05  $D3 $C1 $03 $D1 $A1 $01 $91 $11  $00 $10 $01 $FF $FF $FF $00 $10
.by  $01 $00 $10 $01 $54 $17 $C1 $01  $10 $31 $00 $10 $09 $00 $90 $09  $00 $10 $09 $01 $10 $31 $54 $17
.by  $C1 $00 $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $00 $10 $01  $07 $D0 $01 $1F $90 $01 $23 $10
.by  $01 $47 $10 $01 $3F $10 $01 $1F  $90 $01 $07 $D0 $01 $00 $10 $01  $00 $10 $01 $FF $FF $FF $00 $00
.by  $00 $00 $3E $00 $01 $80 $00 $40  $00 $40 $00 $40 $00 $80 $00 $80  $1F $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $03 $80 $0E $00  $1B $80 $0E $00 $03 $80 $00 $00  $00 $00 $00 $00 $00 $00 $40 $40
.by  $40 $00 $40 $A0 $A0 $00 $00 $00  $A0 $E0 $A0 $E0 $A0 $40 $60 $80  $20 $C0 $A0 $20 $40 $80 $A0 $40
.by  $A0 $40 $A0 $60 $40 $40 $00 $00  $00 $40 $80 $80 $80 $40 $80 $40  $40 $40 $80 $00 $A0 $40 $A0 $00
.by  $00 $40 $E0 $40 $00 $00 $00 $00  $40 $80 $00 $00 $E0 $00 $00 $00  $00 $00 $00 $40 $20 $20 $40 $80
.by  $80 $40 $A0 $A0 $A0 $40 $40 $C0  $40 $40 $40 $C0 $20 $40 $80 $E0  $C0 $20 $40 $20 $C0 $80 $A0 $60
.by  $20 $20 $E0 $80 $C0 $20 $C0 $40  $80 $C0 $A0 $40 $E0 $20 $40 $80  $80 $40 $A0 $40 $A0 $40 $40 $A0
.by  $60 $20 $40 $00 $40 $00 $40 $00  $00 $40 $00 $40 $80 $20 $40 $80  $40 $20 $00 $E0 $00 $E0 $00 $80
.by  $40 $20 $40 $80 $E0 $20 $40 $00  $40 $E0 $A0 $A0 $80 $E0 $E0 $A0  $A0 $E0 $A0 $E0 $A0 $C0 $A0 $E0
.by  $E0 $80 $80 $80 $E0 $C0 $A0 $A0  $A0 $C0 $E0 $80 $C0 $80 $E0 $E0  $80 $C0 $80 $80 $E0 $80 $A0 $A0
.by  $E0 $A0 $A0 $E0 $A0 $A0 $E0 $40  $40 $40 $E0 $20 $20 $20 $A0 $E0  $A0 $A0 $C0 $A0 $A0 $80 $80 $80
.by  $80 $E0 $C0 $E0 $E0 $A0 $A0 $C0  $A0 $A0 $A0 $A0 $E0 $A0 $A0 $A0  $E0 $E0 $A0 $E0 $80 $80 $E0 $A0
.by  $A0 $A0 $C0 $E0 $A0 $C0 $A0 $A0  $60 $80 $40 $20 $C0 $E0 $40 $40  $40 $40 $A0 $A0 $A0 $A0 $C0 $A0
.by  $A0 $A0 $C0 $80 $A0 $A0 $E0 $E0  $C0 $A0 $A0 $40 $A0 $A0 $A0 $A0  $60 $20 $C0 $E0 $20 $40 $80 $E0
.by  $60 $40 $40 $40 $60 $80 $80 $40  $20 $20 $C0 $40 $40 $40 $C0 $40  $A0 $00 $00 $00 $00 $00 $00 $00
.by  $E0 $04 $04 $04 $00 $04 $0A $0A  $00 $00 $00 $0A $0E $0A $0E $0A  $04 $06 $08 $02 $0C $0A $02 $04
.by  $08 $0A $04 $0A $04 $0A $06 $04  $04 $00 $00 $00 $04 $08 $08 $08  $04 $08 $04 $04 $04 $08 $00 $0A
.by  $04 $0A $00 $00 $04 $0E $04 $00  $00 $00 $00 $04 $08 $00 $00 $0E  $00 $00 $00 $00 $00 $00 $04 $02
.by  $02 $04 $08 $08 $04 $0A $0A $0A  $04 $04 $0C $04 $04 $04 $0C $02  $04 $08 $0E $0C $02 $04 $02 $0C
.by  $08 $0A $06 $02 $02 $0E $08 $0C  $02 $0C $04 $08 $0C $0A $04 $0E  $02 $04 $08 $08 $04 $0A $04 $0A
.by  $04 $04 $0A $06 $02 $04 $00 $04  $00 $04 $00 $00 $04 $00 $04 $08  $02 $04 $08 $04 $02 $00 $0E $00
.by  $0E $00 $08 $04 $02 $04 $08 $0E  $02 $04 $00 $04 $0E $0A $0A $08  $0E $0E $0A $0A $0E $0A $0E $0A
.by  $0C $0A $0E $0E $08 $08 $08 $0E  $0C $0A $0A $0A $0C $0E $08 $0C  $08 $0E $0E $08 $0C $08 $08 $0E
.by  $08 $0A $0A $0E $0A $0A $0E $0A  $0A $0E $04 $04 $04 $0E $02 $02  $02 $0A $0E $0A $0A $0C $0A $0A
.by  $08 $08 $08 $08 $0E $0C $0E $0E  $0A $0A $0C $0A $0A $0A $0A $0E  $0A $0A $0A $0E $0E $0A $0E $08
.by  $08 $0E $0A $0A $0A $0C $0E $0A  $0C $0A $0A $06 $08 $04 $02 $0C  $0E $04 $04 $04 $04 $0A $0A $0A
.by  $0A $0C $0A $0A $0A $0C $08 $0A  $0A $0E $0E $0C $0A $0A $04 $0A  $0A $0A $0A $06 $02 $0C $0E $02
.by  $04 $08 $0E $06 $04 $04 $04 $06  $08 $08 $04 $02 $02 $0C $04 $04  $04 $0C $04 $0A $00 $00 $00 $00
.by  $00 $00 $00 $0E $30 $30 $30 $00  $30 $CC $CC $00 $00 $00 $CC $FC  $CC $FC $CC $3C $F0 $30 $3C $F0
.by  $CC $0C $30 $C0 $CC $30 $CC $30  $CC $3C $30 $30 $00 $00 $00 $30  $C0 $C0 $C0 $30 $30 $0C $0C $0C
.by  $30 $00 $00 $30 $00 $00 $00 $30  $FC $30 $00 $00 $00 $00 $30 $C0  $00 $00 $FC $00 $00 $00 $00 $00
.by  $00 $30 $0C $0C $30 $C0 $C0 $FC  $CC $CC $CC $FC $30 $F0 $30 $30  $30 $F0 $0C $30 $C0 $FC $FC $0C
.by  $30 $0C $F0 $CC $CC $3C $0C $0C  $FC $C0 $F0 $0C $F0 $30 $C0 $F0  $CC $30 $FC $0C $30 $C0 $C0 $30
.by  $CC $30 $CC $30 $30 $CC $3C $0C  $30 $00 $30 $00 $30 $00 $00 $30  $00 $30 $C0 $0C $30 $C0 $30 $0C
.by  $00 $FC $00 $FC $00 $C0 $30 $0C  $30 $C0 $F0 $0C $30 $00 $30 $30  $CC $CC $C0 $3C $FC $CC $CC $FC
.by  $CC $FC $CC $F0 $CC $FC $FC $C0  $C0 $C0 $FC $F0 $CC $CC $CC $F0  $FC $C0 $F0 $C0 $FC $FC $C0 $F0
.by  $C0 $C0 $FC $C0 $CC $CC $FC $CC  $CC $FC $CC $CC $FC $30 $30 $30  $FC $0C $0C $0C $0C $F0 $CC $CC
.by  $F0 $CC $CC $C0 $C0 $C0 $C0 $FC  $F0 $FC $FC $CC $CC $F0 $CC $CC  $CC $CC $30 $CC $CC $CC $30 $FC
.by  $CC $FC $C0 $C0 $30 $CC $CC $CC  $3C $FC $CC $F0 $CC $CC $3C $C0  $30 $0C $F0 $FC $30 $30 $30 $30
.by  $CC $CC $CC $CC $F0 $CC $CC $CC  $F0 $C0 $CC $CC $FC $FC $F0 $CC  $CC $30 $CC $CC $CC $CC $3C $0C
.by  $F0 $FC $0C $30 $C0 $FC $3C $30  $30 $30 $3C $C0 $C0 $30 $0C $0C  $F0 $30 $30 $30 $F0 $30 $CC $00
.by  $00 $00 $00 $00 $00 $00 $FC $57  $81 $87 $81 $E7 $81 $B7 $81 $17  $82 $47 $82 $6F $81 $9F $81 $FF
.by  $81 $CF $81 $2F $82 $5F $82 $77  $82 $9B $82 $BF $82 $E3 $82 $07  $83 $2B $83 $4F $83 $73 $83 $97
.by  $83 $01 $01 $01 $01 $01 $0E $0E  $0E $0E $0E $1B $1B $1B $1B $1B  $0D $14 $1B $22 $29 $0D $14 $1B
.by  $22 $29 $0D $14 $1B $22 $29 $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $41 $42 $43 $44 $45 $46
.endm

	end
