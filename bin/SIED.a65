; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/02/28] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $8000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	DOSFILE 'core/bin/core.lib' CORE_LIB 0 0 0 0 0 0 0 0
	RCDATA 'assets//fonts.bin' FONTS_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'asc2int.bin' ASC2INT_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'scan2asc.bin' SCAN2ASC_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_01AF

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@01ED

	.MACRO m@INLINE

; -------------------  ASM Block 00000027  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl
.endl							; overload

.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@01EE

	.MACRO m@INLINE

; -------------------  ASM Block 00000034  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl
.endl							; overload

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	OPN						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000059  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$03		;komenda: OPEN
	sta iccmd,x

	inw device		;omin bajt z dlugoscia STRING-a

	lda device		;adres nazwy pliku
	sta icbufa,x
	lda device+1
	sta icbufa+1,x

	lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
	sta icax1,x

	lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
	sta icax2,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$000B
AX1	= DATAORIGIN+$000C
AX2	= DATAORIGIN+$000D
DEVICE	= DATAORIGIN+$000E

@VarData	= CHN
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLS						; PROCEDURE | ASSEMBLER
	sta CHN

; -------------------  ASM Block 00000060  -------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #$0c		;komenda: CLOSE
	sta iccmd,x

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	pla:tax

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0010

@VarData	= CHN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

; ------------------------------------------------------------

.local	CURSOR						; UNIT

.local	SETCURSOR					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000069  -------------------

  lda spr
  sta main.cursor.myVBL.CURSORSPR
  lda spr+1
  sta main.cursor.myVBL.CURSORSPR+1
  lda #1
  sta mRefresh
  lda $14
  cmp $14
  beq *-2

; ------------------------------------------------------------

SPR	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPIVOT					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000070  -------------------

  lda x
  sta main.cursor.myVBL.mpivotX
  lda y
  sta main.cursor.myVBL.mpivotY

; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYVBL						; PROCEDURE | ASSEMBLER | INTERRUPT | KEEP

; -------------------  ASM Block 00000071  -------------------

  lda #0
  sta 77

    // lda #<MAIN.cursor.myDLI
    // sta DLIV
    // lda #>MAIN.cursor.myDLI
    // sta DLIV+1

  icl 'asm/cursor.a65'
exVBL:
  jmp xitvbv

	rti						; ret
.endl

.local	INITCURSOR					; PROCEDURE

; optimize OK (CURSOR), line = 68

	lda #$20
	sta PMBASE

; optimize OK (CURSOR), line = 69

	lda #$03
	sta PMCTL

; optimize OK (CURSOR), line = 70

	lda #$02
	sta GPRIOR

; optimize OK (CURSOR), line = 71

	lda #$2A
	sta SDMACTL

; optimize OK (CURSOR), line = 73

	lda #$0F
	sta adr.PCOL
	lda #$00
	sta adr.PCOL+$01

; optimize OK (CURSOR), line = 74

	lda <MYVBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >MYVBL
	sta VVBLKD+1

; optimize OK (CURSOR), line = 75

	lda #$01
	sta MREFRESH

; optimize OK (CURSOR), line = 76

	sta MALLOWKEYS

; optimize OK (CURSOR), line = 77

	lda #$80
	sta _MX
	lda #$40
	sta _MY

; optimize OK (CURSOR), line = 78

	lda #$AB
	sta SETCURSOR.SPR
	lda #$81
	sta SETCURSOR.SPR+1
	jsr SETCURSOR

; optimize OK (CURSOR), line = 79

	lda #$00
	sta SETPIVOT.X
	sta SETPIVOT.Y
	jsr SETPIVOT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

adr._ARROW	= CODEORIGIN+$01AB
.var _ARROW	= adr._ARROW .word
adr._WAIT	= CODEORIGIN+$01B2
.var _WAIT	= adr._WAIT .word
adr._CROSS	= CODEORIGIN+$01B9
.var _CROSS	= adr._CROSS .word
MBUT_NONE	= $00
MBUT_LEFT	= $01
MREFRESH	= $5C
MALLOWKEYS	= $5D
_MX	= $52
_MY	= $53
MX	= $55
MY	= $54
MDX	= $5B
MDY	= $5A
STICK	= $0278
MBUTTON	= $4A
OMBUTTON	= $4B
SCREEN_LINES_ADDR	= $0600
PMG_ADDR	= $2000
SCREEN_ADDR	= $2400
EDITOR_ADDR	= $2800
FONTS_ADDR	= $3000
MAX_SPRITE	= $0F
MAX_GROUP	= $07
CORE_LIB	= $D800
ASC2INT_ADDR	= $1F00
SCAN2ASC_ADDR	= $1F80
GPRIOR	= $026F
SDMACTL	= $022F
PMCTL	= $D01D
PMBASE	= $D407
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.PCOL	= $02C0
.var PCOL	= adr.PCOL .word

.endl							; UNIT CURSOR

.local	MYDLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000072  -------------------

COLPF0  = $D016  ; (708)
COLPF1  = $D017  ; (709)
COLPF2  = $D018  ; (710)
COLPF3  = $D019  ; (711)
COLPF4  = $D01A  ; (712)
WSYNC   = $D40A

  .macro m@setVDLI newVDLI
    lda #<:newVDLI
    sta DLIV
    lda #>:newVDLI
    sta DLIV+1
  .endm

dli1: // workarea
  pha
  lda #$E0
  sta wsync
  sta wsync
  sta COLPF4

  m@setVDLI DLI3

  pla
  rti

dli2: // timeline
  pha
  lda #$00
  sta wsync
  // sta wsync
  sta COLPF4

  m@setVDLI DLI3

  pla
  rti

dli3: // controls
  pha:txa:pha
  lda #$E6
  ldx #$E0
  sta wsync
  // sta wsync
  sta COLPF4
  stx COLPF1
  m@setVDLI DLI4

  pla:tax:pla
  rti

dli4: // status
  pha:txa:pha
  lda #$04
  ldx #$0f
  sta wsync
  sta COLPF4
  stx COLPF1
  m@setVDLI DLI5

  pla:tax:pla
  rti

dli5:
  pha
  lda 712
  sta wsync
  sta COLPF4

  m@setVDLI DLI1

  pla
  rti


	rti						; ret
.endl

.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000073  -------------------

 icl 'asm/get_line.a65' 
; ------------------------------------------------------------

CHN	= :EDX
BUF	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000074  -------------------

 icl 'asm/reduce_filename.a65' 
; ------------------------------------------------------------

INFN	= :EDX
OUTFN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWABOUT					; PROCEDURE

; optimize OK (about.inc), line = 3

	lda #$FF
	jsr SETMODULE

; optimize OK (about.inc), line = 4

	lda #$14
	jsr SETSCREENWIDTH

; optimize OK (about.inc), line = 5

	lda #$0A
	sta PUTTEXT.X
	lda #$06
	sta PUTTEXT.Y
	lda #$C4
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 6

	lda #$0A
	sta PUTTEXT.X
	lda #$0C
	sta PUTTEXT.Y
	lda #$D8
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 7

	lda #$0F
	sta PUTTEXT.X
	lda #$18
	sta PUTTEXT.Y
	lda #$EC
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 8

	lda #$01
	sta PUTTEXT.X
	lda #$24
	sta PUTTEXT.Y
	lda #$F5
	sta PUTTEXT.S
	lda #$80
	sta PUTTEXT.S+1
	jsr PUTTEXT

; optimize OK (about.inc), line = 9

	lda #$1C
	sta SETSTATUS.S
	lda #$81
	sta SETSTATUS.S+1
	jsr SETSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDFILELABEL					; PROCEDURE

; optimize OK (module-disk.inc), line = 24

	lda N
	cmp #$0F
	jcc l_029B
	jmp @exit
l_029B

; optimize OK (module-disk.inc), line = 25

	ldy N
	lda adr._DIRFILEX,y
	sta X
	lda adr._DIRFILEY,y
	sta Y

; optimize OK (module-disk.inc), line = 26

	lda N
	asl @
	tay
	lda adr.DIRNAME,y
	sta PUTTEXT.S
	lda adr.DIRNAME+1,y
	sta PUTTEXT.S+1
	lda X
	sta PUTTEXT.X
	lda Y
	sta PUTTEXT.Y
	jsr PUTTEXT

; optimize OK (module-disk.inc), line = 27

	lda PRC
	sta ADDZONEN.PRC
	lda PRC+1
	sta ADDZONEN.PRC+1
	lda Y
	sub #$01
	sta ADDZONEN.Y
	lda X
	sub #$01
	sta ADDZONEN.X
	lda #$0E
	add N
	sta ADDZONEN.N
	lda #$0E
	sta ADDZONEN.W
	lda #$07
	sta ADDZONEN.H
	jsr ADDZONEN

; ------------------------------------------------------------

N	= DATAORIGIN+$00FD
PRC	= DATAORIGIN+$00FE
X	= DATAORIGIN+$0100
Y	= DATAORIGIN+$0101

@VarData	= N
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOCHOICEFILE					; PROCEDURE

; optimize OK (module-disk.inc), line = 32

	lda SZONE
	sta @CASETMP_0004
	cmp #14
	bmi @+
	cmp #29
	seq
	bpl @+
	jmp *+6
@
	jmp l_02E7
@

; optimize OK (module-disk.inc), line = 34

	lda SZONE
	asl @
	tay
	lda adr.DIRNAME-$1C,y
	sta @move.src
	lda adr.DIRNAME+1-$1C,y
	sta @move.src+1
	@moveSTRING FN #17

; optimize OK (module-disk.inc), line = 36

	lda #$07
	sta BLANK.X
	lda #$01
	sta BLANK.Y
	lda #$0C
	sta BLANK.W
	lda #$05
	sta BLANK.H
	jsr BLANK

; optimize OK (module-disk.inc), line = 37

	lda #$07
	sta PUTTEXT.X
	lda #$01
	sta PUTTEXT.Y
	lda FN
	sta PUTTEXT.S
	lda FN+1
	sta PUTTEXT.S+1
	jsr PUTTEXT
l_02E7
a_0004

; ------------------------------------------------------------

@CASETMP_0004	= DATAORIGIN+$0102

@VarData	= @CASETMP_0004
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOPREVPAGEDIR					; PROCEDURE

; optimize OK (module-disk.inc), line = 46

	lda DIRPAGEBEGIN
	sub #$0E
	sta DIRPAGEBEGIN
	scs
	dec DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 47

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DONEXTPAGEDIR					; PROCEDURE

; optimize OK (module-disk.inc), line = 52

	lda DIRPAGEBEGIN
	add #$0E
	sta DIRPAGEBEGIN
	scc
	inc DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 53

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READDIRECTORY					; PROCEDURE

; optimize OK (module-disk.inc), line = 62

	lda adr.DEV+$01
	cmp #$44
	jne l_0320

; optimize OK (module-disk.inc), line = 64

	lda #$03
	sta CURSOR.SETPIVOT.X
	sta CURSOR.SETPIVOT.Y
	jsr CURSOR.SETPIVOT
	lda #$B2
	sta CURSOR.SETCURSOR.SPR
	lda #$81
	sta CURSOR.SETCURSOR.SPR+1
	jsr CURSOR.SETCURSOR

; optimize OK (module-disk.inc), line = 65

	lda DEV
	sta @move.src
	lda DEV+1
	sta @move.src+1
	@moveSTRING _FN #21
	lda adr.FILEMASK
	sta SYSTEM.MOVE.@01EE.COUNT
	lda adr._FN
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda <adr._FN
	add :STACKORIGIN+10
	sta SYSTEM.MOVE.@01EE.DEST
	lda >adr._FN
	adc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.MOVE.@01EE.DEST+1
	lda <adr.FILEMASK+$01
	sta SYSTEM.MOVE.@01EE.SOURCE
	lda >adr.FILEMASK+$01
	sta SYSTEM.MOVE.@01EE.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE.@01EE.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@01EE
	m@INLINE
	.ENDL

; optimize OK (module-disk.inc), line = 66

	lda DIRPAGEBEGIN
	sta DIRSEEK
	lda DIRPAGEBEGIN+1
	sta DIRSEEK+1

; optimize OK (module-disk.inc), line = 67

	lda DIRPAGEBEGIN+1
	jmi l_034C
	ora DIRPAGEBEGIN
	jeq l_034C
	lda #$35
	jmp l_0358
l_034C
	lda #$40
l_0358
	sta SETSTATUS.S
	lda #$81
	sta SETSTATUS.S+1
	jsr SETSTATUS

; optimize OK (module-disk.inc), line = 68

	lda #$01
	sta CIO.OPN.CHN
	lda #$06
	sta CIO.OPN.AX1
	lda #$00
	sta CIO.OPN.AX2
	lda _FN
	sta CIO.OPN.DEVICE
	lda _FN+1
	sta CIO.OPN.DEVICE+1
	jsr CIO.OPN

; optimize OK (module-disk.inc), line = 69

	lda #$FF
	sta N

; --- WhileProlog
	jmp l_0366
l_0367

; optimize OK (module-disk.inc), line = 72

	lda #$01
	sta GETLN.CHN
	lda _FN
	sta GETLN.BUF
	lda _FN+1
	sta GETLN.BUF+1
	jsr GETLN

; optimize OK (module-disk.inc), line = 73

	lda adr._FN+$01
	cmp #$30
	jcc l_037E

; optimize OK (module-disk.inc), line = 75

	dec adr._FN
	lda _FN
	sta SETSTATUS.S
	lda _FN+1
	sta SETSTATUS.S+1
	jsr SETSTATUS

; optimize OK (module-disk.inc), line = 76

	lda #$03
	sta SYSTEM.IORESULT
	jmp b_0367					; break
l_037E

; optimize OK (module-disk.inc), line = 79

	lda DIRSEEK+1
	jmi l_03A5
	ora DIRSEEK
	jeq l_03A5

; optimize FAIL (0, module-disk.inc), line = 81

	lda DIRSEEK
	bne @+
	dec DIRSEEK+1
@
	dec DIRSEEK
	jmp c_0367					; continue
l_03A5

; optimize OK (module-disk.inc), line = 84

	lda N
	cmp #$FF
	jne l_03BE
	lda #$55
	sta SETSTATUS.S
	lda #$81
	sta SETSTATUS.S+1
	jsr SETSTATUS
l_03BE

; optimize FAIL (0, module-disk.inc), line = 87

	inc N

; optimize OK (module-disk.inc), line = 88

	lda N
	asl @
	tay
	lda adr.DIRNAME,y
	sta REDUCEFILENAME.OUTFN
	lda adr.DIRNAME+1,y
	sta REDUCEFILENAME.OUTFN+1
	lda _FN
	sta REDUCEFILENAME.INFN
	lda _FN+1
	sta REDUCEFILENAME.INFN+1
	jsr REDUCEFILENAME
c_0367
l_0366

; optimize OK (module-disk.inc), line = 70

	lda SYSTEM.IORESULT
	cmp #$01
	jne l_0367w
	lda N
	sub #$0F
	svc
	eor #$80
	jpl l_0367w
	jmp l_0367
l_0367w
b_0367
	jmp l_03F0
l_0320

; optimize OK (module-disk.inc), line = 92

	lda #$A0
	sta SYSTEM.IORESULT
l_03F0

; optimize OK (module-disk.inc), line = 93

	lda adr.YSCR+$84
	sta SYSTEM.FILLCHAR.@01ED.A
	lda adr.YSCR+1+$84
	sta SYSTEM.FILLCHAR.@01ED.A+1
	lda #$F8
	sta SYSTEM.FILLCHAR.@01ED.COUNT
	lda #$02
	sta SYSTEM.FILLCHAR.@01ED.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@01ED.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
	m@INLINE
	.ENDL

; optimize OK (module-disk.inc), line = 94

	lda SYSTEM.IORESULT
	cmp #$04
	jcc l_040C
	ldy #256-14
	mva:rne CODEORIGIN+$016A+14-256,y adr._FN+14-256,y+

; optimize OK (module-disk.inc), line = 97

	lda SYSTEM.IORESULT
	lsr @
	lsr @
	lsr @
	lsr @
	sta N
	ldy N
	lda adr._HEX,y
	sta adr._FN+$0C

; optimize OK (module-disk.inc), line = 98

	lda SYSTEM.IORESULT
	and #$0F
	sta N
	ldy N
	lda adr._HEX,y
	sta adr._FN+$0D

; optimize OK (module-disk.inc), line = 99

	lda _FN
	sta SETSTATUS.S
	lda _FN+1
	sta SETSTATUS.S+1
	jsr SETSTATUS
	jmp l_0441
l_040C

; optimize OK (module-disk.inc), line = 103

	lda #$0E
	sta J

l_044A
; --- ForToDoCondition
	lda J
	cmp #$1F
	jcs l_0458
	jsr CLEARZONE

; --- ForToDoEpilog
	inc J
	jne l_044A
l_0458

; optimize OK (module-disk.inc), line = 104

	lda #$00
	sta J

; --- WhileProlog
	jmp l_0467
l_0468

; optimize OK (module-disk.inc), line = 106

	lda J
	sta ADDFILELABEL.N
	lda <DOCHOICEFILE
	sta ADDFILELABEL.PRC
	lda >DOCHOICEFILE
	sta ADDFILELABEL.PRC+1
	jsr ADDFILELABEL

; optimize FAIL (0, module-disk.inc), line = 107

	inc J
l_0467

; optimize OK (module-disk.inc), line = 104

	lda N
	sub J
	svc
	eor #$80
	jpl l_0468

; optimize OK (module-disk.inc), line = 109

	lda DIRPAGEBEGIN+1
	bmi @+
	ora DIRPAGEBEGIN
	sne
@
	jmp *+6
@	jmp l_049Bx
	lda SYSTEM.IORESULT
	cmp #$03
	jcs l_049B
@
l_049Bx

; optimize OK (module-disk.inc), line = 111

	lda #$1B
	sta BLANK.X
	lda #$29
	sta BLANK.Y
	lda #$0C
	sta BLANK.W
	lda #$05
	sta BLANK.H
	jsr BLANK
	lda #$1C
	jsr CLEARZONE

; optimize OK (module-disk.inc), line = 112

	lda DIRPAGEBEGIN+1
	jmi l_04B4
	ora DIRPAGEBEGIN
	jeq l_04B4

; optimize OK (module-disk.inc), line = 113

	lda #$1B
	sta ADDBUTTON.X
	lda #$29
	sta ADDBUTTON.Y
	lda #$78
	sta ADDBUTTON.CAP
	lda #$81
	sta ADDBUTTON.CAP+1
	lda <DOPREVPAGEDIR
	sta ADDBUTTON.PRC
	lda >DOPREVPAGEDIR
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON
l_04B4

; optimize OK (module-disk.inc), line = 114

	lda SYSTEM.IORESULT
	cmp #$03
	jcs l_04CD

; optimize OK (module-disk.inc), line = 116

	lda #$23
	sta ADDBUTTON.X
	lda #$29
	sta ADDBUTTON.Y
	lda #$7D
	sta ADDBUTTON.CAP
	lda #$81
	sta ADDBUTTON.CAP+1
	lda <DONEXTPAGEDIR
	sta ADDBUTTON.PRC
	lda >DONEXTPAGEDIR
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize FAIL ('CLEARSTATUS', module-disk.inc), line = 117

	jsr CLEARSTATUS
l_0441
l_04CD
l_049B

; optimize OK (module-disk.inc), line = 121

	lda #$01
	jsr CIO.CLS

; optimize OK (module-disk.inc), line = 122

	lda #$00
	sta CURSOR.SETPIVOT.X
	sta CURSOR.SETPIVOT.Y
	jsr CURSOR.SETPIVOT
	lda #$AB
	sta CURSOR.SETCURSOR.SPR
	lda #$81
	sta CURSOR.SETCURSOR.SPR+1
	jsr CURSOR.SETCURSOR

; ------------------------------------------------------------

N	= DATAORIGIN+$0103
J	= DATAORIGIN+$0104
DIRSEEK	= DATAORIGIN+$0105

@VarData	= N
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STARTDIRECTORY					; PROCEDURE

; optimize OK (module-disk.inc), line = 127

	lda #$00
	sta DIRPAGEBEGIN
	sta DIRPAGEBEGIN+1

; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 128

	jsr READDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOFILENAME					; PROCEDURE

; optimize OK (module-disk.inc), line = 133

	lda FN
	sta DOINPUT.VALUE
	lda FN+1
	sta DOINPUT.VALUE+1
	jsr DOINPUT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DODEVICE					; PROCEDURE

; optimize OK (module-disk.inc), line = 138

	lda DEV
	sta DOINPUT.VALUE
	lda DEV+1
	sta DOINPUT.VALUE+1
	jsr DOINPUT
	lda DOINPUT.RESULT
	jmi l_0504
	jsr STARTDIRECTORY
l_0504
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWDISKDIRECTORY				; PROCEDURE

; optimize OK (module-disk.inc), line = 143

	lda CURMODULE
	jeq @exit
l_051E

; optimize OK (module-disk.inc), line = 144

	lda #$00
	jsr SETMODULE

; optimize OK (module-disk.inc), line = 145

	lda adr.YSCR+$82
	sta :bp2
	lda adr.YSCR+1+$82
	sta :bp2+1
	lda #$FF
	ldy #$13
	sta:rpl (:bp2),y-

; optimize OK (module-disk.inc), line = 146

	lda #$14
	jsr SETSCREENWIDTH

; optimize OK (module-disk.inc), line = 147

	lda #$01
	sta ADDINPUT.X
	sta ADDINPUT.Y
	lda #$04
	sta ADDINPUT.W
	lda DEV
	sta ADDINPUT.VALUE
	lda DEV+1
	sta ADDINPUT.VALUE+1
	lda <DODEVICE
	sta ADDINPUT.PRC
	lda >DODEVICE
	sta ADDINPUT.PRC+1
	jsr ADDINPUT

; optimize OK (module-disk.inc), line = 148

	lda #$07
	sta ADDINPUT.X
	lda #$01
	sta ADDINPUT.Y
	lda #$0C
	sta ADDINPUT.W
	lda FN
	sta ADDINPUT.VALUE
	lda FN+1
	sta ADDINPUT.VALUE+1
	lda <DOFILENAME
	sta ADDINPUT.PRC
	lda >DOFILENAME
	sta ADDINPUT.PRC+1
	jsr ADDINPUT

; optimize OK (module-disk.inc), line = 149

	lda #$15
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$82
	sta ADDBUTTON.CAP
	lda #$81
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize OK (module-disk.inc), line = 150

	lda #$1B
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$87
	sta ADDBUTTON.CAP
	lda #$81
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize OK (module-disk.inc), line = 151

	lda #$21
	sta ADDBUTTON.X
	lda #$01
	sta ADDBUTTON.Y
	lda #$8C
	sta ADDBUTTON.CAP
	lda #$81
	sta ADDBUTTON.CAP+1
	lda <NULLPROC
	sta ADDBUTTON.PRC
	lda >NULLPROC
	sta ADDBUTTON.PRC+1
	jsr ADDBUTTON

; optimize FAIL ('STARTDIRECTORY', module-disk.inc), line = 152

	jsr STARTDIRECTORY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWPATHEDITOR					; PROCEDURE

; optimize OK (module-path.inc), line = 3

	lda CURMODULE
	cmp #$01
	jeq @exit
l_055A

; optimize OK (module-path.inc), line = 4

	lda #$01
	jsr SETMODULE

; optimize OK (module-path.inc), line = 6

	lda #$03
	sta ADDZONEN.N
	lda #$01
	sta ADDZONEN.X
	lda #$37
	sta ADDZONEN.Y
	lda #$03
	sta ADDZONEN.W
	lda #$07
	sta ADDZONEN.H
	lda <NULLPROC
	sta ADDZONEN.PRC
	lda >NULLPROC
	sta ADDZONEN.PRC+1
	jsr ADDZONEN

; optimize OK (module-path.inc), line = 7

	lda #$04
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-path.inc), line = 8

	lda #$05
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-path.inc), line = 9

	lda #$06
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-path.inc), line = 11

	lda #$07
	sta ADDZONEN.N
	lda #$0F
	sta ADDZONEN.X
	lda #$37
	sta ADDZONEN.Y
	lda #$03
	sta ADDZONEN.W
	lda #$07
	sta ADDZONEN.H
	lda <NULLPROC
	sta ADDZONEN.PRC
	lda >NULLPROC
	sta ADDZONEN.PRC+1
	jsr ADDZONEN

; optimize OK (module-path.inc), line = 12

	lda #$08
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-path.inc), line = 14

	lda #$FF
	jsr SETCONTROL

; optimize OK (module-path.inc), line = 15

	lda #$2C
	sta adr.HPOSP+$02
	lda #$E6
	sta adr.PCOL+$02
	lda #$03
	sta adr.SIZEP+$02

; optimize OK (module-path.inc), line = 16

	lda #$14
	jsr SETSCREENWIDTH

; optimize OK (module-path.inc), line = 17

	lda _IPATH
	sta PUTIMAGE.ADR
	lda _IPATH+1
	sta PUTIMAGE.ADR+1
	lda #$00
	sta PUTIMAGE.X
	sta PUTIMAGE.Y
	lda #$03
	sta PUTIMAGE.WIDTH
	lda #$30
	sta PUTIMAGE.HEIGHT
	jsr PUTIMAGE

; optimize OK (module-path.inc), line = 19

	lda #$00
	sta ADDZONE.X
	sta ADDZONE.Y
	lda #$03
	sta ADDZONE.W
	lda #$0C
	sta ADDZONE.H
	lda <NULLPROC
	sta ADDZONE.PRC
	lda >NULLPROC
	sta ADDZONE.PRC+1
	jsr ADDZONE

; optimize OK (module-path.inc), line = 20

	lda <NULLPROC
	sta ADDZONEV.PRC
	lda >NULLPROC
	sta ADDZONEV.PRC+1
	jsr ADDZONEV

; optimize OK (module-path.inc), line = 21

	lda <NULLPROC
	sta ADDZONEV.PRC
	lda >NULLPROC
	sta ADDZONEV.PRC+1
	jsr ADDZONEV

; optimize OK (module-path.inc), line = 22

	lda <NULLPROC
	sta ADDZONEV.PRC
	lda >NULLPROC
	sta ADDZONEV.PRC+1
	jsr ADDZONEV

; optimize OK (module-path.inc), line = 23

	lda #$03
	sta ADDZONE.X
	lda #$00
	sta ADDZONE.Y
	lda #$03
	sta ADDZONE.W
	lda #$0C
	sta ADDZONE.H
	lda <NULLPROC
	sta ADDZONE.PRC
	lda >NULLPROC
	sta ADDZONE.PRC+1
	jsr ADDZONE

; optimize OK (module-path.inc), line = 24

	lda <NULLPROC
	sta ADDZONEV.PRC
	lda >NULLPROC
	sta ADDZONEV.PRC+1
	jsr ADDZONEV

; optimize OK (module-path.inc), line = 25

	lda <NULLPROC
	sta ADDZONEV.PRC
	lda >NULLPROC
	sta ADDZONEV.PRC+1
	jsr ADDZONEV
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSCENARIOEDITOR				; PROCEDURE

; optimize OK (module-scenario.inc), line = 3

	lda CURMODULE
	cmp #$02
	jeq @exit
l_05B2

; optimize OK (module-scenario.inc), line = 4

	lda #$02
	jsr SETMODULE

; optimize OK (module-scenario.inc), line = 5

	lda #$03
	sta ADDZONEN.N
	lda #$01
	sta ADDZONEN.X
	lda #$37
	sta ADDZONEN.Y
	lda #$03
	sta ADDZONEN.W
	lda #$07
	sta ADDZONEN.H
	lda <NULLPROC
	sta ADDZONEN.PRC
	lda >NULLPROC
	sta ADDZONEN.PRC+1
	jsr ADDZONEN

; optimize OK (module-scenario.inc), line = 6

	lda #$04
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-scenario.inc), line = 7

	lda #$05
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-scenario.inc), line = 8

	lda #$06
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-scenario.inc), line = 10

	lda #$07
	sta ADDZONEN.N
	lda #$0F
	sta ADDZONEN.X
	lda #$37
	sta ADDZONEN.Y
	lda #$03
	sta ADDZONEN.W
	lda #$07
	sta ADDZONEN.H
	lda <NULLPROC
	sta ADDZONEN.PRC
	lda >NULLPROC
	sta ADDZONEN.PRC+1
	jsr ADDZONEN

; optimize OK (module-scenario.inc), line = 11

	lda #$08
	sta ADDZONEHN.N
	lda <NULLPROC
	sta ADDZONEHN.PRC
	lda >NULLPROC
	sta ADDZONEHN.PRC+1
	jsr ADDZONEHN

; optimize OK (module-scenario.inc), line = 12

	lda #$FF
	jsr SETCONTROL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETMODULE					; PROCEDURE
	sta CM

; optimize OK (module.inc), line = 3

	sta CURMODULE

; optimize OK (module.inc), line = 4

	lda #$03
	sta I

l_05E0
; --- ForToDoCondition
	lda I
	cmp #$0A
	jcs l_05EE
	jsr CLEARZONE

; --- ForToDoEpilog
	inc I
	jne l_05E0
l_05EE

; optimize OK (module.inc), line = 5

	lda #$01
	sta adr._MZONEACTIVE

; optimize OK (module.inc), line = 6

	sta adr._MZONEACTIVE+$01

; optimize OK (module.inc), line = 7

	sta adr._MZONEACTIVE+$02

; optimize OK (module.inc), line = 8

	lda adr.YSCR+$D0
	sta SYSTEM.FILLCHAR.@01ED.A
	lda adr.YSCR+1+$D0
	sta SYSTEM.FILLCHAR.@01ED.A+1
	lda #$58
	sta SYSTEM.FILLCHAR.@01ED.COUNT
	lda #$02
	sta SYSTEM.FILLCHAR.@01ED.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@01ED.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
	m@INLINE
	.ENDL

; optimize OK (module.inc), line = 9

	lda #$00
	sta adr.HPOSP+$02

; optimize OK (module.inc), line = 10

	lda CM
	jsr SETICON

; optimize FAIL ('CLEARSTATUS', module.inc), line = 11

	jsr CLEARSTATUS

; optimize FAIL ('CLEARWORKAREA', module.inc), line = 12

	jsr CLEARWORKAREA

; optimize OK (module.inc), line = 13

	ldy #1
	lda CM
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE

; optimize OK (module.inc), line = 14

	ldy #1
	lda CM
	cmp #$01
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE+$01

; optimize OK (module.inc), line = 15

	ldy #1
	lda CM
	cmp #$02
	bne @+
	dey
@
	tya
	sta adr._MZONEACTIVE+$02

; ------------------------------------------------------------

CM	= DATAORIGIN+$0107

@VarData	= CM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITMODULES					; PROCEDURE

; optimize OK (module.inc), line = 20

	lda #$00
	sta SETZONE.N
	sta SETZONE.ACT
	lda #$1C
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWDISKDIRECTORY
	sta SETZONE.PRC
	lda >SHOWDISKDIRECTORY
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 21

	lda #$01
	sta SETZONE.N
	lda #$00
	sta SETZONE.ACT
	lda #$20
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWPATHEDITOR
	sta SETZONE.PRC
	lda >SHOWPATHEDITOR
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 22

	lda #$02
	sta SETZONE.N
	lda #$00
	sta SETZONE.ACT
	lda #$24
	sta SETZONE.X
	lda #$31
	sta SETZONE.Y
	lda #$03
	sta SETZONE.W
	lda #$0F
	sta SETZONE.H
	lda <SHOWSCENARIOEDITOR
	sta SETZONE.PRC
	lda >SHOWSCENARIOEDITOR
	sta SETZONE.PRC+1
	jsr SETZONE

; optimize OK (module.inc), line = 23

	lda #$78
	sta I

l_0660
; --- ForToDoCondition
	lda I
	cmp #$7B
	jcs l_066E
	asl @
	tay
	lda adr.YSCR,y
	add #$08
	sta :bp2
	lda adr.YSCR+1,y
	adc #$00
	sta :bp2+1
	lda #$55
	ldy #$1F
	sta:rpl (:bp2),y-

; --- ForToDoEpilog
	inc I
	jne l_0660
l_066E

; optimize OK (module.inc), line = 24

	lda #$00
	sta PUTTEXTC.X
	lda #$3F
	sta PUTTEXTC.Y
	lda #$93
	sta PUTTEXTC.S
	lda #$81
	sta PUTTEXTC.S+1
	jsr PUTTEXTC
	ldy #256-5
	mva:rne CODEORIGIN+$019C+5-256,y adr.FILEMASK+5-256,y+
	ldy #256-3
	mva:rne CODEORIGIN+$01A1+3-256,y adr.DEV+3-256,y+
	ldy #256-7
	mva:rne CODEORIGIN+$01A4+7-256,y adr.FN+7-256,y+

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITEDITOR					; PROCEDURE

; optimize OK (SIED.pas), line = 44

	lda #$80
	sta KEYDEFP
	lda #$1F
	sta KEYDEFP+1

; optimize OK (SIED.pas), line = 45

	lda #$00
	sta I

l_0694
; --- ForToDoCondition
	lda I
	cmp #$38
	jcs l_06A2
	sta :STACKORIGIN+9
	lda #$10
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	lda :eax
	sta :STACKORIGIN+10
	lda #$24
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	asl @
	tay
	lda :STACKORIGIN+10
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_0694
l_06A2

; optimize OK (SIED.pas), line = 46

	lda #$00
	sta I

l_06C1
; --- ForToDoCondition
	lda I
	cmp #$30
	jcs l_06CF
	ldy #$00
	lda I
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add #$38
	asl @
	sta :STACKORIGIN+9
	lda #$14
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	lda :eax
	sta :STACKORIGIN+10
	lda #$28
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda :STACKORIGIN+10
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_06C1
l_06CF

; optimize OK (SIED.pas), line = 47

	lda #$00
	sta I

l_06F2
; --- ForToDoCondition
	lda I
	cmp #$18
	jcs l_0700
	lda #$68
	sta :STACKORIGIN+9
	ldy #$00
	lda I
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add :STACKORIGIN+9
	asl @
	sta :STACKORIGIN+9
	lda #$C0
	sta :STACKORIGIN+10
	lda #$2B
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$28
	sta :ecx
	sta :ztmp8
	lda I
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sec
	bit :ztmp10
	bpl @+
	sbc :ztmp8
@
	bit :ztmp8
	bpl @+
	sbc :ztmp10
@
	sta :eax+1
	ldy :STACKORIGIN+9
	lda :STACKORIGIN+10
	add :eax
	sta adr.YSCR,y
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta adr.YSCR+1,y

; --- ForToDoEpilog
	inc I
	jne l_06F2
l_0700

; optimize OK (SIED.pas), line = 48

	lda #$00
	sta SYSTEM.FILLCHAR.@01ED.A
	lda #$20
	sta SYSTEM.FILLCHAR.@01ED.A+1
	lda #$00
	sta SYSTEM.FILLCHAR.@01ED.COUNT
	lda #$10
	sta SYSTEM.FILLCHAR.@01ED.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@01ED.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
	m@INLINE
	.ENDL

; optimize OK (SIED.pas), line = 49

	lda #$FF
	ldy #$31
	sta:rpl $2317,y-

; optimize OK (SIED.pas), line = 50

	lda #$01
	sta ACTIVEPAGE

; optimize OK (SIED.pas), line = 51

	lda #$00
	sta SDMACTL

; -------------------  ASM Block 00000077  -------------------

    lda $14
    cmp $14
    beq *-2
  
; -------------------  ASM Block 00000078  -------------------

 sei; 
; optimize OK (SIED.pas), line = 59

	mva <MYDLI VDSLST
	mva >MYDLI VDSLST+1

; optimize OK (SIED.pas), line = 60

	lda #$C0
	sta NMIEN

; -------------------  ASM Block 00000079  -------------------

 cli; 
; optimize OK (SIED.pas), line = 62

	lda #$C0
	sta SDLST
	lda #$81
	sta SDLST+1

; optimize OK (SIED.pas), line = 63

	lda #$EA
	sta PFCOL0
	lda #$00
	sta PFCOL1
	lda #$0F
	sta PFCOL2
	lda #$E0
	sta PFCOL4

; optimize OK (SIED.pas), line = 64

	lda #$0A
	sta KRPDEL
	lda #$01
	sta KEYREP

; optimize FAIL ('CURSOR.INITCURSOR', SIED.pas), line = 66

	jsr CURSOR.INITCURSOR

; optimize FAIL ('INITINTERFACE', SIED.pas), line = 67

	jsr INITINTERFACE

; optimize FAIL ('INITMODULES', SIED.pas), line = 68

	jsr INITMODULES

; optimize FAIL ('SHOWABOUT', SIED.pas), line = 69

	jsr SHOWABOUT

; ------------------------------------------------------------

KEYDEFP	= $79
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_01AF

; optimize FAIL ('INITEDITOR', SIED.pas), line = 73

	jsr INITEDITOR

; --- WhileProlog
	jmp l_075A
l_075B

; optimize FAIL ('CHECKZONES', SIED.pas), line = 76

	jsr CHECKZONES
	lda CHECKZONES.RESULT
	jeq l_0765

; -------------------  ASM Block 00000080  -------------------

        lda szone
        asl @
        tay
        lda adr._mzonePROC,y
        sta jaddr
        lda adr._mzonePROC+1,y
        sta jaddr+1
        jsr jaddr:$ffff
      
l_0765
l_075A

; optimize OK (SIED.pas), line = 74

	jmp l_075B

; ------------------------------------------------------------

SCREEN_LINES_ADDR	= $0600
PMG_ADDR	= $2000
SCREEN_ADDR	= $2400
EDITOR_ADDR	= $2800
FONTS_ADDR	= $3000
MAX_SPRITE	= $0F
MAX_GROUP	= $07
CORE_LIB	= $D800
ASC2INT_ADDR	= $1F00
SCAN2ASC_ADDR	= $1F80
ZP_TM	= $14
ZP_NFRMTM	= $12
ZP_CURGROUP	= $1C
ZP_CURPWRSPRITE	= $1D
ZP_CURTRLSPRITE	= $1E
ZP_AX1	= $20
ZP_AY1	= $21
ZP_AX2	= $22
ZP_AY2	= $23
ZP_BX1	= $24
ZP_BY1	= $25
ZP_BX2	= $26
ZP_BY2	= $27
ZP__X1	= $28
ZP__Y1	= $29
ZP__X2	= $2A
ZP__Y2	= $2B
ZP_NXTTLEVENT	= $2C
ZP_SCR	= $2E
ZP_BCDSCORE	= $70
ZP_BCDLEVEL	= $74
ZP_PLAYERLIVES	= $75
ZP_BCDMISSILES	= $76
ZP_F1PWR	= $77
ZP_F1SPD	= $78
ZP_F2PWR	= $79
ZP_KEYCODE	= $7A
ZP_JOYDIRECTION	= $7B
ZP_JOYFIRE1	= $7C
ZP_JOYFIRE2	= $7E
ZP_ACTIVEPAGE	= $D4
ZP_I	= $D5
ZP_J	= $D6
ZP_TRAILADR	= $D7
ZP_DYVAL	= $D9
ZP_DXVAL	= $DA
ZP_SPRITEN	= $E0
ZP_SPRITEX	= $E1
ZP_SPRITEY	= $E2
ZP_SPRITEI	= $E3
ZP_GAMESTAT	= $E4
ZP_TLADR	= $E5
ZP_TIMERS	= $E7
ZP_TIMER0	= $E8
ZP_TIMER1	= $E9
ZP_TIMER2	= $EA
ZP_TIMER3	= $EB
ZP_TIMER4	= $EC
ZP_TIMER5	= $ED
ZP_CURTIMELINE	= $EE
DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_MODE_40X24T2	= $02
DL_MODE_40X24T5	= $04
DL_MODE_40X12T5	= $05
DL_MODE_20X24T5	= $06
DL_MODE_20X12T5	= $07
DL_MODE_40X24G4	= $08
DL_MODE_80X48G2	= $09
DL_MODE_80X48G4	= $0A
DL_MODE_160X96G2	= $0B
DL_MODE_160X192G2	= $0C
DL_MODE_160X96G4	= $0D
DL_MODE_160X192G4	= $0E
DL_MODE_320X192G2	= $0F
DL_JMP	= $01
DL_JVB	= $41
adr.DLIST	= CODEORIGIN+$01C0
.var DLIST	= adr.DLIST .word
_CONTROLS	=	$EA2C
_ICONS	=	$EA2E
_ICARD	=	$EA30
_IPATH	=	$EA32
ACONTROLS	=	$EA34
AICONS	=	$EA36
K_L	= $00
K_J	= $01
K_SEMICO	= $02
K_F1	= $03
K_F2	= $04
K_K	= $05
K_PLUS	= $06
K_LEFT	= $06
K_STAR	= $07
K_RIGHT	= $07
K_O	= $08
K_P	= $0A
K_U	= $0B
K_RETURN	= $0C
K_I	= $0D
K_UP	= $0E
K_DOWN	= $0F
K_V	= $10
K_HELP	= $11
K_C	= $12
K_F3	= $13
K_F4	= $14
K_B	= $15
K_X	= $16
K_Z	= $17
K_4	= $18
K_3	= $1A
K_6	= $1B
K_ESC	= $1C
K_5	= $1D
K_2	= $1E
K_1	= $1F
K_COMMA	= $20
K_SPACE	= $21
K_DOT	= $22
K_N	= $23
K_M	= $25
K_BACKSL	= $26
K_INVERS	= $27
K_R	= $28
K_E	= $2A
K_Y	= $2B
K_TAB	= $2C
K_T	= $2D
K_W	= $2E
K_Q	= $2F
K_9	= $30
K_0	= $32
K_7	= $33
K_DELETE	= $34
K_8	= $35
K_CLEAR	= $36
K_INSERT	= $37
K_F	= $38
K_H	= $39
K_D	= $3A
K_CAPS	= $3C
K_G	= $3D
K_S	= $3E
K_A	= $3F
KMOD_SHIFT	= $40
KMOD_CTRL	= $80
KRPDEL	= $02D9
KEYREP	= $02DA
KEYB	= $02FC
BRKKEY	= $11
adr._ASC2INT	= $1F00
.var _ASC2INT	= adr._ASC2INT .word
GPRIOR	= $026F
SDMACTL	= $022F
PMCTL	= $D01D
PMBASE	= $D407
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.PCOL	= $02C0
.var PCOL	= adr.PCOL .word
DLIV	= $0200
NMIEN	= $D40E
SDLST	= $0230
GTIACS	= $026F
PFCOL0	= $02C4
PFCOL1	= $02C5
PFCOL2	= $02C6
PFCOL3	= $02C7
PFCOL4	= $02C8
ACTIVEPAGE	= $D4
SCR	= $58
adr.YSCR	= $0600
.var YSCR	= adr.YSCR .word
adr.AFONT	= $3000
.var AFONT	= adr.AFONT .word
adr.AFONTC	= $3100
.var AFONTC	= adr.AFONTC .word
PUTIMAGE.@VARDATASIZE	=	$0002
PUTIMAGE.@EXIT	=	$DC4F
PUTIMAGE.@VARDATA	=	$EB59
PUTIMAGE.HEIGHT	=	$EB5A
PUTIMAGE.WIDTH	=	$EB59
PUTIMAGE.Y	=	$0084
PUTIMAGE.X	=	$008C
PUTIMAGE.ADR	=	$0088
PUTIMAGE.EXPUTIMG	=	$DC4D
PUTIMAGE._LNWIDTH	=	$DC33
PUTIMAGE.LBYTE	=	$DC28
PUTIMAGE.LLINE	=	$DC24
PUTIMAGE.CALCSCR	=	$DC13
PUTIMAGE.SKPAGE	=	$DC0F
PUTIMAGE	=	$DC04
PUTSPRITE.@VARDATASIZE	=	$0002
PUTSPRITE.@EXIT	=	$DE0B
PUTSPRITE.@VARDATA	=	$EB5B
PUTSPRITE.HEIGHT	=	$EB5C
PUTSPRITE.WIDTH	=	$EB5B
PUTSPRITE.Y	=	$0084
PUTSPRITE.X	=	$008C
PUTSPRITE.ADR	=	$0088
PUTSPRITE.EXPUTIMG	=	$DE09
PUTSPRITE._LNWIDTH2	=	$DDEE
PUTSPRITE.NXT	=	$DDEA
PUTSPRITE.LB1	=	$DDD3
PUTSPRITE.L1	=	$DDCF
PUTSPRITE.LB2	=	$DDAC
PUTSPRITE.L2	=	$DD9F
PUTSPRITE.LB3	=	$DD73
PUTSPRITE.L3	=	$DD61
PUTSPRITE.LB4	=	$DD2C
PUTSPRITE.L4	=	$DD15
PUTSPRITE.LB5	=	$DCD7
PUTSPRITE.L5	=	$DCBF
PUTSPRITE.SH	=	$DCB1
PUTSPRITE.LLINE	=	$DCB0
PUTSPRITE._LNWIDTH1	=	$DC97
PUTSPRITE.LBYTE	=	$DC8A
PUTSPRITE.LLN	=	$DC86
PUTSPRITE.LSIMPLE	=	$DC83
PUTSPRITE.CALCSCR	=	$DC6C
PUTSPRITE.POSITIVEX	=	$DC69
PUTSPRITE.NEGATIVEX	=	$DC61
PUTSPRITE.SKPAGE	=	$DC5B
PUTSPRITE	=	$DC50
PUTSPRITEXOR.@VARDATASIZE	=	$0002
PUTSPRITEXOR.@EXIT	=	$DFAA
PUTSPRITEXOR.@VARDATA	=	$EB5D
PUTSPRITEXOR.HEIGHT	=	$EB5E
PUTSPRITEXOR.WIDTH	=	$EB5D
PUTSPRITEXOR.Y	=	$0084
PUTSPRITEXOR.X	=	$008C
PUTSPRITEXOR.ADR	=	$0088
PUTSPRITEXOR.EXPUTIMG	=	$DFA8
PUTSPRITEXOR.NXT	=	$DF85
PUTSPRITEXOR.LB1	=	$DF6B
PUTSPRITEXOR.L1	=	$DF67
PUTSPRITEXOR.LB2	=	$DF44
PUTSPRITEXOR.L2	=	$DF37
PUTSPRITEXOR.LB3	=	$DF0B
PUTSPRITEXOR.L3	=	$DEF9
PUTSPRITEXOR.LB4	=	$DEC4
PUTSPRITEXOR.L4	=	$DEAD
PUTSPRITEXOR.LB5	=	$DE6F
PUTSPRITEXOR.L5	=	$DE57
PUTSPRITEXOR.SH	=	$DE49
PUTSPRITEXOR.LLINE	=	$DE48
PUTSPRITEXOR.LBYTE	=	$DE1E
PUTSPRITEXOR.LLN	=	$DE1A
PUTSPRITEXOR.LSIMPLE	=	$DE17
PUTSPRITEXOR	=	$DE0C
PUTTEXT.SPTR	=	$00FA
PUTTEXT.@EXIT	=	$E018
PUTTEXT.S	=	$0084
PUTTEXT.Y	=	$008C
PUTTEXT.X	=	$0088
PUTTEXT.EXPUTTEXT	=	$E016
PUTTEXT.ADR	=	$E005
PUTTEXT.LBYTE	=	$E004
PUTTEXT.LLN	=	$E004
PUTTEXT.LSIMPLE	=	$E000
PUTTEXT.SKIPSH	=	$DFF2
PUTTEXT.TLEN	=	$DFDE
PUTTEXT.LPUTCHAR	=	$DFDB
PUTTEXT.SKPAGE	=	$DFCE
PUTTEXT	=	$DFAB
PUTTEXTC.SPTR	=	$00FA
PUTTEXTC.@EXIT	=	$E082
PUTTEXTC.S	=	$0084
PUTTEXTC.Y	=	$008C
PUTTEXTC.X	=	$0088
PUTTEXTC.EXPUTIMG	=	$E080
PUTTEXTC.ADR	=	$E06F
PUTTEXTC.LBYTE	=	$E06E
PUTTEXTC.LLN	=	$E06E
PUTTEXTC.LSIMPLE	=	$E06A
PUTTEXTC.TLEN	=	$E04B
PUTTEXTC.LPUTCHAR	=	$E048
PUTTEXTC.CALCSCR	=	$E03E
PUTTEXTC.SKPAGE	=	$E03C
PUTTEXTC	=	$E019
INVERT.@VARDATASIZE	=	$0001
INVERT.@EXIT	=	$E0C5
INVERT.@VARDATA	=	$EB5F
INVERT.H	=	$EB5F
INVERT.W	=	$0084
INVERT.Y	=	$008C
INVERT.X	=	$0088
INVERT.EXPUTIMG	=	$E0C3
INVERT._LNWIDTH1	=	$E0BC
INVERT.MASK	=	$E0B7
INVERT.LBYTE	=	$E0B4
INVERT.LLN	=	$E0B4
INVERT.LSIMPLE	=	$E0AD
INVERT.LPUTCHAR	=	$E09B
INVERT.CALCSCR	=	$E090
INVERT.SKPAGE	=	$E08E
INVERT	=	$E083
BLANK.@VARDATASIZE	=	$0001
BLANK.@EXIT	=	$E108
BLANK.@VARDATA	=	$EB60
BLANK.H	=	$EB60
BLANK.W	=	$0084
BLANK.Y	=	$008C
BLANK.X	=	$0088
BLANK.EXPUTIMG	=	$E106
BLANK._LNWIDTH1	=	$E0FF
BLANK.MASK	=	$E0FA
BLANK.LBYTE	=	$E0F7
BLANK.LLN	=	$E0F7
BLANK.LSIMPLE	=	$E0F0
BLANK.LPUTCHAR	=	$E0DE
BLANK.CALCSCR	=	$E0D3
BLANK.SKPAGE	=	$E0D1
BLANK	=	$E0C6
SETSCREENWIDTH.@EXIT	=	$E114
SETSCREENWIDTH.NSW	=	$0088
SETSCREENWIDTH	=	$E109
CLEARPAGE.@EXIT	=	$E14C
CLEARPAGE.PAGE	=	$0088
CLEARPAGE._PP3	=	$E147
CLEARPAGE._PP2	=	$E144
CLEARPAGE._PP1	=	$E141
CLEARPAGE._PP0	=	$E13E
CLEARPAGE.LCLR	=	$E13D
CLEARPAGE.CLEAR	=	$E11F
CLEARPAGE.SETPAGE1	=	$E11D
CLEARPAGE.SETPAGE0	=	$E119
CLEARPAGE	=	$E115
WAIT.@EXIT	=	$E156
WAIT.F	=	$0088
WAIT.LOOP	=	$E152
WAIT	=	$E14D
MAX_ZONES	= $1F
USER_ZONES_BEGIN	= $09
adr._MZONEACTIVE	= $0500
.var _MZONEACTIVE	= adr._MZONEACTIVE .word
adr._MZONEX1	= $0520
.var _MZONEX1	= adr._MZONEX1 .word
adr._MZONEY1	= $0540
.var _MZONEY1	= adr._MZONEY1 .word
adr._MZONEX2	= $0560
.var _MZONEX2	= adr._MZONEX2 .word
adr._MZONEY2	= $0580
.var _MZONEY2	= adr._MZONEY2 .word
adr._MZONEPROC	= $05A0
.var _MZONEPROC	= adr._MZONEPROC .word
SZONE	= $50
OZONE	= $51
NULLPROC.@EXIT	=	$E157
NULLPROC	=	$E157
SETZONE.@VARDATASIZE	=	$0008
SETZONE.@EXIT	=	$E1AA
SETZONE.@VARDATA	=	$EB65
SETZONE.PRC	=	$EB6B
SETZONE.H	=	$EB6A
SETZONE.W	=	$EB69
SETZONE.Y	=	$EB68
SETZONE.X	=	$EB67
SETZONE.ACT	=	$EB66
SETZONE.N	=	$EB65
SETZONE	=	$E158
CLEARZONE.@VARDATASIZE	=	$0001
CLEARZONE.@EXIT	=	$E1D3
CLEARZONE.@VARDATA	=	$EB6D
CLEARZONE.N	=	$EB6D
CLEARZONE	=	$E1AB
CLEARWORKZONES.@EXIT	=	$E1E5
CLEARWORKZONES.L_013B	=	$E1E5
CLEARWORKZONES.L_012D	=	$E1D8
CLEARWORKZONES	=	$E1D4
INITINTERFACE.@EXIT	=	$E1FF
INITINTERFACE.L_016B	=	$E1FF
INITINTERFACE.L_015D	=	$E1F2
INITINTERFACE	=	$E1E6
GETFREEZONE.RESULT	=	$EB6E
GETFREEZONE.@EXIT	=	$E222
GETFREEZONE.L_0193	=	$E222
GETFREEZONE.L_01A8	=	$E21E
GETFREEZONE.L_0185	=	$E209
GETFREEZONE	=	$E200
ADDZONEN.@VARDATASIZE	=	$0007
ADDZONEN.@VARDATA	=	$EB6F
ADDZONEN.RESULT	=	$EB76
ADDZONEN.PRC	=	$EB74
ADDZONEN.H	=	$EB73
ADDZONEN.W	=	$EB72
ADDZONEN.Y	=	$EB71
ADDZONEN.X	=	$EB70
ADDZONEN.N	=	$EB6F
ADDZONEN.@EXIT	=	$E272
ADDZONEN.L_01E5	=	$E26C
ADDZONEN.L_01CC	=	$E233
ADDZONEN	=	$E223
ADDZONE.@VARDATASIZE	=	$0006
ADDZONE.@VARDATA	=	$EB77
ADDZONE.RESULT	=	$EB7D
ADDZONE.PRC	=	$EB7B
ADDZONE.H	=	$EB7A
ADDZONE.W	=	$EB79
ADDZONE.Y	=	$EB78
ADDZONE.X	=	$EB77
ADDZONE.@EXIT	=	$E2A5
ADDZONE	=	$E273
ADDZONEH.@VARDATASIZE	=	$0002
ADDZONEH.@VARDATA	=	$EB7E
ADDZONEH.RESULT	=	$EB80
ADDZONEH.PRC	=	$EB7E
ADDZONEH.@EXIT	=	$E2D7
ADDZONEH	=	$E2A6
ADDZONEHN.@VARDATASIZE	=	$0003
ADDZONEHN.@VARDATA	=	$EB81
ADDZONEHN.RESULT	=	$EB84
ADDZONEHN.PRC	=	$EB82
ADDZONEHN.N	=	$EB81
ADDZONEHN.@EXIT	=	$E30F
ADDZONEHN	=	$E2D8
ADDZONEV.@VARDATASIZE	=	$0002
ADDZONEV.@VARDATA	=	$EB85
ADDZONEV.RESULT	=	$EB87
ADDZONEV.PRC	=	$EB85
ADDZONEV.@EXIT	=	$E341
ADDZONEV	=	$E310
ADDZONEVN.@VARDATASIZE	=	$0003
ADDZONEVN.@VARDATA	=	$EB88
ADDZONEVN.RESULT	=	$EB8B
ADDZONEVN.PRC	=	$EB89
ADDZONEVN.N	=	$EB88
ADDZONEVN.@EXIT	=	$E379
ADDZONEVN	=	$E342
CHECKZONES.NZONE	=	$0057
CHECKZONES.RESULT	=	$EB8C
CHECKZONES.@EXIT	=	$E553
CHECKZONES.L_0495	=	$E553
CHECKZONES.L_04A8	=	$E553
CHECKZONES.L_037B	=	$E538
CHECKZONES.L_0436	=	$E535
CHECKZONES.L_0483	=	$E535
CHECKZONES.L_0448	=	$E52A
CHECKZONES.L_0476	=	$E527
CHECKZONES.L_045B	=	$E51E
CHECKZONES.L_038E	=	$E50B
CHECKZONES.L_03D3	=	$E508
CHECKZONES.L_03E7	=	$E508
CHECKZONES.L_0419	=	$E500
CHECKZONES.L_03FA	=	$E4F8
CHECKZONES.L_03A2	=	$E49C
CHECKZONES.L_03C3	=	$E499
CHECKZONES.B_02F1	=	$E468
CHECKZONES.L_02FF	=	$E468
CHECKZONES.L_030E	=	$E461
CHECKZONES.L_0359	=	$E461
CHECKZONES.L_02F1	=	$E3C7
CHECKZONES.L_0286	=	$E3B8
CHECKZONES.PRESSED.RESULT	=	$EB8D
CHECKZONES.PRESSED.@EXIT	=	$E3B7
CHECKZONES.PRESSED	=	$E3A6
CHECKZONES.REFRESHZONE.@EXIT	=	$E3A5
CHECKZONES.REFRESHZONE.L_02B8	=	$E3A5
CHECKZONES.REFRESHZONE.L_029B	=	$E391
CHECKZONES.REFRESHZONE	=	$E37D
CHECKZONES	=	$E37A
YCONTROLS	= $37
INVERTZONE.@VARDATASIZE	=	$0003
INVERTZONE.@EXIT	=	$E586
INVERTZONE.@VARDATA	=	$EB8E
INVERTZONE._H	=	$EB90
INVERTZONE._W	=	$EB8F
INVERTZONE.I	=	$EB8E
INVERTZONE	=	$E554
CLEARWORKAREA.@EXIT	=	$E5A1
CLEARWORKAREA	=	$E587
CLEARSTATUS.@EXIT	=	$E5BB
CLEARSTATUS	=	$E5A2
SETSTATUS.@VARDATASIZE	=	$0002
SETSTATUS.@EXIT	=	$E5D9
SETSTATUS.@VARDATA	=	$EB91
SETSTATUS.S	=	$EB91
SETSTATUS	=	$E5BC
SETICON.@VARDATASIZE	=	$0004
SETICON.@EXIT	=	$E680
SETICON.@VARDATA	=	$EB93
SETICON.P	=	$EB95
SETICON._X	=	$EB94
SETICON.N	=	$EB93
SETICON.L_052E	=	$E680
SETICON.L_0546	=	$E679
SETICON.L_057D	=	$E64D
SETICON.L_055B	=	$E649
SETICON.L_0520	=	$E5E6
SETICON	=	$E5DA
SETCONTROLS.@VARDATASIZE	=	$0001
SETCONTROLS.@EXIT	=	$E6D5
SETCONTROLS.@VARDATA	=	$EB97
SETCONTROLS.S	=	$EB97
SETCONTROLS.124@	=	$E6D1
SETCONTROLS.123@	=	$E6C3
SETCONTROLS.122@	=	$E6B5
SETCONTROLS.121@	=	$E6A7
SETCONTROLS.120@	=	$E699
SETCONTROLS.119@	=	$E68B
SETCONTROLS	=	$E681
SETCONTROL.@VARDATASIZE	=	$0004
SETCONTROL.@EXIT	=	$E73B
SETCONTROL.@VARDATA	=	$EB98
SETCONTROL.P	=	$EB9A
SETCONTROL._X	=	$EB99
SETCONTROL.N	=	$EB98
SETCONTROL.L_061C	=	$E73B
SETCONTROL.L_0653	=	$E714
SETCONTROL.L_063D	=	$E707
SETCONTROL.L_060E	=	$E6E2
SETCONTROL	=	$E6D6
ADDBUTTON.@VARDATASIZE	=	$0006
ADDBUTTON.@VARDATA	=	$EB9C
ADDBUTTON.RESULT	=	$EBA2
ADDBUTTON.PRC	=	$EBA0
ADDBUTTON.CAP	=	$EB9E
ADDBUTTON.Y	=	$EB9D
ADDBUTTON.X	=	$EB9C
ADDBUTTON.@EXIT	=	$E794
ADDBUTTON	=	$E73C
ADDINPUT.@VARDATASIZE	=	$0007
ADDINPUT.@VARDATA	=	$EBA3
ADDINPUT.RESULT	=	$EBAA
ADDINPUT.PRC	=	$EBA8
ADDINPUT.VALUE	=	$EBA6
ADDINPUT.W	=	$EBA5
ADDINPUT.Y	=	$EBA4
ADDINPUT.X	=	$EBA3
ADDINPUT.@EXIT	=	$E7E6
ADDINPUT	=	$E795
DOINPUT.@VARDATASIZE	=	$000C
DOINPUT.@VARDATA	=	$EBAB
DOINPUT.@CASETMP_0004	=	$EBB7
DOINPUT.ISCRS	=	$EBB6
DOINPUT.CTM	=	$EBB5
DOINPUT.W	=	$EBB4
DOINPUT.Y	=	$EBB3
DOINPUT.X	=	$EBB2
DOINPUT.LN	=	$EBB1
DOINPUT.CH	=	$EBB0
DOINPUT.CX	=	$EBAF
DOINPUT.OZONE	=	$EBAE
DOINPUT.RESULT	=	$EBAD
DOINPUT.VALUE	=	$EBAB
DOINPUT.@EXIT	=	$EA25
DOINPUT.B_0735	=	$EA14
DOINPUT.L_07B8	=	$EA11
DOINPUT.A_0004	=	$EA07
DOINPUT.L_08D4	=	$EA04
DOINPUT.L_08B0	=	$E9CA
DOINPUT.L_0898	=	$E9B0
DOINPUT.L_083A	=	$E99A
DOINPUT.L_0875	=	$E994
DOINPUT.L_084E	=	$E97B
DOINPUT.127@	=	$E969
DOINPUT.L_0818	=	$E950
DOINPUT.L_082C	=	$E94D
DOINPUT.L_07F8	=	$E92F
DOINPUT.L_080A	=	$E92C
DOINPUT.L_07EB	=	$E91E
DOINPUT.L_07E0	=	$E90E
DOINPUT.126@	=	$E903
DOINPUT.L_07C5	=	$E8F9
DOINPUT.L_0787	=	$E8CF
DOINPUT.L_0794	=	$E8C7
DOINPUT.L_0755	=	$E8A5
DOINPUT.125@	=	$E8A1
DOINPUT.L_0735	=	$E86C
DOINPUT.L_06BE	=	$E829
DOINPUT.REFRESHVALUE.@EXIT	=	$E828
DOINPUT.REFRESHVALUE	=	$E7EA
DOINPUT	=	$E7E7
I	= $3E
TM	= $14
CURMODULE	= DATAORIGIN+$0019
adr._HEX	= CODEORIGIN+$021A
.var _HEX	= adr._HEX .word
adr.DEV	= $0400
.var DEV	= adr.DEV .word
adr.FN	= $0405
.var FN	= adr.FN .word
adr._FN	= $0417
.var _FN	= adr._FN .word
adr.FILEMASK	= $042C
.var FILEMASK	= adr.FILEMASK .word
DIRPAGEBEGIN	= DATAORIGIN+$001A
adr._DIRFILEX	= CODEORIGIN+$022A
.var _DIRFILEX	= adr._DIRFILEX .word
adr._DIRFILEY	= CODEORIGIN+$0239
.var _DIRFILEY	= adr._DIRFILEY .word
adr.DIRNAME	= [DATAORIGIN+$001C] .array [15] .word
.var DIRNAME	= adr.DIRNAME .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
DISABLEIOCBCOPY
BASICOFF
ROMOFF
NOROMFONT
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi

	.ifdef MAIN.CURSOR.@UnitInit
	jsr MAIN.CURSOR.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	ift .SIZEOF(MAIN.CURSOR) > 0
	.print 'CURSOR: ',MAIN.CURSOR,'..',MAIN.CURSOR+.SIZEOF(MAIN.CURSOR)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $FF $00 $00 <[DATAORIGIN+$003A] >[DATAORIGIN+$003A] <[DATAORIGIN+$0047] >[DATAORIGIN+$0047]  <[DATAORIGIN+$0054] >[DATAORIGIN+$0054] <[DATAORIGIN+$0061] >[DATAORIGIN+$0061] <[DATAORIGIN+$006E] >[DATAORIGIN+$006E] <[DATAORIGIN+$007B] >[DATAORIGIN+$007B]  <[DATAORIGIN+$0088] >[DATAORIGIN+$0088] <[DATAORIGIN+$0095] >[DATAORIGIN+$0095] <[DATAORIGIN+$00A2] >[DATAORIGIN+$00A2] <[DATAORIGIN+$00AF] >[DATAORIGIN+$00AF]
.by  <[DATAORIGIN+$00BC] >[DATAORIGIN+$00BC] <[DATAORIGIN+$00C9] >[DATAORIGIN+$00C9] <[DATAORIGIN+$00D6] >[DATAORIGIN+$00D6] <[DATAORIGIN+$00E3] >[DATAORIGIN+$00E3]  <[DATAORIGIN+$00F0] >[DATAORIGIN+$00F0]

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 264

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
.by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
.by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
.by  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65
.by  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72
.by  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
.by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
.by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
.by  $63 $6F $72 $65 $13 $53 $50 $41  $43 $45 $20 $49 $4D $50 $41 $43  $54 $20 $45 $44 $49 $54 $4F $52
.by  $13 $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $08 $47 $53 $44
.by  $20 $32 $30 $32 $34 $26 $47 $49  $54 $3A $2F $2F $47 $53 $4F $46  $54 $57 $41 $52 $45 $44 $45 $56
.by  $45 $4C $4F $50 $4D $45 $4E $54  $2F $53 $50 $41 $43 $45 $49 $4D  $50 $41 $43 $54 $07 $32 $39 $2D
.by  $32 $2D $32 $34 $10 $30 $31 $32  $33 $34 $35 $36 $37 $38 $39 $41  $42 $43 $44 $45 $46 $0A $53 $45
.by  $45 $4B $49 $4E $47 $2E $2E $2E  $14 $52 $45 $41 $44 $49 $4E $47  $20 $44 $49 $52 $45 $43 $54 $4F
.by  $52 $59 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
.by  $2E $2E $0D $49 $2F $4F $20 $45  $52 $52 $4F $52 $20 $24 $30 $30  $04 $50 $52 $45 $56 $04 $4E $45
.by  $58 $54 $04 $4C $4F $41 $44 $04  $53 $41 $56 $45 $06 $45 $58 $50  $4F $52 $54 $08 $30 $30 $3A $30
.by  $30 $2E $30 $30 $04 $2A $2E $2A  $9B $02 $44 $3A $06 $4E $4F $4E  $41 $4D $45 $10 $18 $3C $3E $78
.by  $60 $80 $BA $7C $F6 $EE $6C $BA  $44 $10 $10 $00 $C6 $00 $10 $10  $70 $70 $70 $70 $30 $80 $20 $4B
.by  $00 $28 $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
.by  $0B $90 $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $30 $0D $0D $0D $0D $0D $B0
.by  $0D $0D $0D $0D $0D $0D $8D $41  $C0 $81 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44
.by  $45 $46 $01 $01 $01 $01 $01 $0E  $0E $0E $0E $0E $1B $1B $1B $1B  $1B $0D $14 $1B $22 $29 $0D $14
.by  $1B $22 $29 $0D $14 $1B $22 $29
.endm

	end
