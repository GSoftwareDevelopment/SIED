mads 2.1.6
Source: SIED.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.1 [2024/02/28] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.if .def(@vbxe_detect)
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
Source: basicoff.asm
     1 				// BASIC OFF
     2 				// author: Michael Jaskula
     3 				// changes: 2023-03-28
     4
     5 				//	lda #$01		; OSS cart disabled
     6 				//	sta $d508
     7
     8 FFFF> 8000-8040> AD 01 + 	lda PORTB
     9 8003 09 02			ora #$02
    10 8005 8D 01 D3			sta PORTB
    11 					
    12 8008 A9 70			lda #$70		; disable BREAK
    13 800A 85 10			sta $10
    14 800C 8D 0E D2			sta $D20E
    15
    16 800F A9 C0			lda #$C0
    17 8011 85 6A			sta $6A
    18 8013 8D E4 02			sta $2E4
    19
    20 8016 A9 01			lda #$01
    21 8018 8D F8 03			sta $03F8
    22
    23 801B A2 00			ldx #0			; reset E:
    24 801D A9 0C			lda #$0c
    25 801F 20 38 80			jsr xcio
    26
    27 8022 A9 3E 9D 44 03 A9 + 	mwa #ename icbufa,x
    28
    29 802C A9 0C 9D 4A 03		mva #$0c icax1,x
    30 8031 A9 00 9D 4B 03		mva #$00 icax2,x
    31
    32 8036 A9 03			lda #$03
    33
    34 8038 9D 42 03		xcio	sta iccmd,x
    35
    36 803B 4C 56 E4			jmp	ciov
    37
    38 803E 45 3A 9B		ename	.byte 'E:',$9b
    95 02E2-02E3> 00 80			ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 8041				org CODEORIGIN
   105
   106 8000			.local	MAIN.@RESOURCE
   107 				.endl
   108
   109 8000			.local	RESOURCE
   110 8000				icl 'atari\resource.asm'
Source: resource.asm
     1
  1229 					opt l+
   111 = 0000				?EXTDETECT = 0
   112 = 0000				?VBXDETECT = 0
   113
   114 8075				DOSFILE 'core/bin/core.lib' CORE_LIB 0 0 0 0 0 0 0 0
Macro: RESOURCE.DOSFILE [Source: resource.asm]
     1 8075				.get 'core/bin/core.lib',0,6
     3 = 12C8			?len = .filesize('core/bin/core.lib')
     6 8075				org RESORIGIN
     8 8075 4C 33 81		_stop	jmp stop
    10 8078 20 41 80		mcpy	jsr sys.off
    12 807B A9 3C 85 90 A9 81 + 	mwa #data ztmp
    14 8083 A0 00			ldy #0			; $FFFF
    15 8085 B1 90			lda (ztmp),y
    16 8087 C9 FF			cmp #$ff
    17 8089 D0 EA			bne _stop
    18 808B C8				iny
    19 808C B1 90			lda (ztmp),y
    20 808E C9 FF			cmp #$ff
    21 8090 D0 E3			bne _stop
    23 8092 18 A5 90 69 02 85 + 	adw ztmp #2
    25 809D A0 00		loop	ldy #0
    26 809F B1 90			lda (ztmp),y
    27 80A1 8D 36 81			sta sadr
    28 80A4 C8				iny
    29 80A5 B1 90			lda (ztmp),y
    30 80A7 8D 37 81			sta sadr+1
    32 80AA C8				iny
    33 80AB B1 90			lda (ztmp),y
    34 80AD 8D 38 81			sta eadr
    35 80B0 C8				iny
    36 80B1 B1 90			lda (ztmp),y
    37 80B3 8D 39 81			sta eadr+1
    39 80B6 18 A5 90 69 04 85 + 	adw ztmp #4
    41 80C1 38 AD 38 81 ED 36 + 	sbw eadr sadr len
    43 80D4 EE 3A 81 D0 03 EE + 	inw len
    45 80DC A5 90 85 88 A5 91 +  MWA ZTMP EDX
    45 80E4 AD 36 81 85 8C AD +  MWA SADR ECX
    45 80EE AD 3A 81 85 84 AD +  MWA LEN EAX
    45 80F8 20 00 80		 JSR RESOURCE.MEMCPY
    47 80FB 18 A5 90 6D 3A 81 + 	adw ztmp len
    49 810A A0 00			ldy #0
    50 810C B1 90			lda (ztmp),y
    51 810E C9 FF			cmp #$ff
    52 8110 D0 12			bne skp
    53 8112 C8				iny
    54 8113 B1 90			lda (ztmp),y
    55 8115 C9 FF			cmp #$ff
    56 8117 D0 0B			bne skp
    58 8119 18 A5 90 69 02 85 + 	adw ztmp #2
    60 8124 A5 91 C9 94 D0 04 + skp	cpw ztmp #data_end
    61 812E F0 03 4C 9D 80		jne loop
    62 8133			stop
    63 8133 4C 65 80			jmp sys.on
    65 8136 00 00		sadr	.word
    66 8138 00 00		eadr	.word
    67 813A 00 00		len	.word
    69 813C FF FF 00 D8 4B EA + data	ins 'core/bin/core.lib'
    70 9404			data_end
    72 					.print '$R DOSFILE ',.wget[2],'..$xxxx'," 'core/bin/core.lib'"
    72 				$R DOSFILE $D800..$xxxx 'core/bin/core.lib'
    74 02E2-02E3> 78 80			ini mcpy
Source: SIED.a65
   115 9404				RCDATA 'assets//fonts.bin' FONTS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0531			len = .filesize('assets//fonts.bin')-0
    24 9404				org main.FONTS_ADDR
    26 3000-3530> B5 32 80 31 + 	ins 'assets//fonts.bin',0
    28 					.print '$R RCDATA  ',main.FONTS_ADDR,'..',*-1," 'assets//fonts.bin'"
    28 				$R RCDATA  $3000..$3530 'assets//fonts.bin'
Source: SIED.a65
   116 3531				RCDATA 'asc2int.bin' ASC2INT_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0080			len = .filesize('asc2int.bin')-0
    24 3531				org main.ASC2INT_ADDR
    26 1F00-1FFF> 00 00 00 00 + 	ins 'asc2int.bin',0
    28 					.print '$R RCDATA  ',main.ASC2INT_ADDR,'..',*-1," 'asc2int.bin'"
    28 				$R RCDATA  $1F00..$1F7F 'asc2int.bin'
Source: SIED.a65
   117 1F80				RCDATA 'scan2asc.bin' SCAN2ASC_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0080			len = .filesize('scan2asc.bin')-0
    24 1F80				org main.SCAN2ASC_ADDR
    26 1F80 6C 6A 3B 8A 8B 6B + 	ins 'scan2asc.bin',0
    28 					.print '$R RCDATA  ',main.SCAN2ASC_ADDR,'..',*-1," 'scan2asc.bin'"
    28 				$R RCDATA  $1F80..$1FFF 'scan2asc.bin'
Source: SIED.a65
   118 				.endl
   119
   120 				; ------------------------------------------------------------
   121
   122 2000				org CODEORIGIN
   123
   124 8000				STATICDATA
Macro: STATICDATA [Source: SIED.a65]
     1 8000-9121> 00 04 63 6F + .by  $00 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
     2 8018 72 65 04 63 6F 72 + .by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
     3 8030 6F 72 65 04 63 6F + .by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
     4 8048 63 6F 72 65 04 63 + .by  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65
     5 8060 04 63 6F 72 65 04 + .by  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72
     6 8078 65 04 63 6F 72 65 + .by  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
     7 8090 72 65 04 63 6F 72 + .by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
     8 80A8 6F 72 65 04 63 6F + .by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
     9 80C0 63 6F 72 65 13 53 + .by  $63 $6F $72 $65 $13 $53 $50 $41  $43 $45 $20 $49 $4D $50 $41 $43  $54 $20 $45 $44 $49 $54 $4F $52
    10 80D8 13 2D 2D 2D 2D 2D + .by  $13 $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $08 $47 $53 $44
    11 80F0 20 32 30 32 34 26 + .by  $20 $32 $30 $32 $34 $26 $47 $49  $54 $3A $2F $2F $47 $53 $4F $46  $54 $57 $41 $52 $45 $44 $45 $56
    12 8108 45 4C 4F 50 4D 45 + .by  $45 $4C $4F $50 $4D $45 $4E $54  $2F $53 $50 $41 $43 $45 $49 $4D  $50 $41 $43 $54 $07 $32 $39 $2D
    13 8120 32 2D 32 34 10 30 + .by  $32 $2D $32 $34 $10 $30 $31 $32  $33 $34 $35 $36 $37 $38 $39 $41  $42 $43 $44 $45 $46 $0A $53 $45
    14 8138 45 4B 49 4E 47 2E + .by  $45 $4B $49 $4E $47 $2E $2E $2E  $14 $52 $45 $41 $44 $49 $4E $47  $20 $44 $49 $52 $45 $43 $54 $4F
    15 8150 52 59 2E 2E 2E 14 + .by  $52 $59 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
    16 8168 2E 2E 0D 49 2F 4F + .by  $2E $2E $0D $49 $2F $4F $20 $45  $52 $52 $4F $52 $20 $24 $30 $30  $04 $50 $52 $45 $56 $04 $4E $45
    17 8180 58 54 04 4C 4F 41 + .by  $58 $54 $04 $4C $4F $41 $44 $04  $53 $41 $56 $45 $06 $45 $58 $50  $4F $52 $54 $08 $30 $30 $3A $30
    18 8198 30 2E 30 30 04 2A + .by  $30 $2E $30 $30 $04 $2A $2E $2A  $9B $02 $44 $3A $06 $4E $4F $4E  $41 $4D $45 $10 $18 $3C $3E $78
    19 81B0 60 80 BA 7C F6 EE + .by  $60 $80 $BA $7C $F6 $EE $6C $BA  $44 $10 $10 $00 $C6 $00 $10 $10  $70 $70 $70 $70 $30 $80 $20 $4B
    20 81C8 00 28 0B 0B 0B 0B + .by  $00 $28 $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
    21 81E0 0B 0B 0B 0B 0B 0B + .by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
    22 81F8 0B 90 0D 0D 0D 0D + .by  $0B $90 $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $30 $0D $0D $0D $0D $0D $B0
    23 8210 0D 0D 0D 0D 0D 0D + .by  $0D $0D $0D $0D $0D $0D $8D $41  $C0 $81 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44
    24 8228 45 46 01 01 01 01 + .by  $45 $46 $01 $01 $01 $01 $01 $0E  $0E $0E $0E $0E $1B $1B $1B $1B  $1B $0D $14 $1B $22 $29 $0D $14
    25 8240 1B 22 29 0D 14 1B + .by  $1B $22 $29 $0D $14 $1B $22 $29
Source: SIED.a65
   125
   126 				; ------------------------------------------------------------
   127
   128 8248			RTLIB
   129 8248				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    84 					opt l+
   130
   131 				.print 'ZPAGE: ',zpage,'..',zpend-1
   131 				ZPAGE: $0080..$00D3
   132
   133 				.print 'RTBUF: ',@buf,'..',@buf+255
   133 				RTBUF: $0400..$04FF
   134
   135 				.print 'RTLIB: ',RTLIB,'..',*-1
   135 				RTLIB: $8248..$8337
   136
   137 				; ------------------------------------------------------------
   138
   139 8338			START
   140 8338 BA				tsx
   141 8339 8E DE 90			stx MAIN.@halt+1
   142
   143 					.ifdef MAIN.@DEFINES.ROMOFF
   144 833C				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 833C			.local	rominit
     5
     6 833C 78			        sei
     7 833D A9 00		        lda #%00000000
     8 833F 8D 0E D4		        sta NMIEN       ;$D40E
     9 8342 A9 FE		        lda #%11111110
    10 8344 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 8347 A2 64		        ldx #<nmiint
    33 8349 A0 83		        ldy #>nmiint
    34 834B 8E FA FF		        stx NMIVEC      ;$FFFA
    35 834E 8C FB FF		        sty NMIVEC+1
    36
    37 8351 A2 6E		        ldx #<irqint
    38 8353 A0 83		        ldy #>irqint
    39 8355 8E FE FF		        stx IRQVEC      ;$FFFE
    40 8358 8C FF FF		        sty IRQVEC+1
    41
    42 835B A9 40		        lda #%01000000
    43 835D 8D 0E D4		        sta NMIEN       ;$D40E
    44 8360 58			        cli
    45
    46 8361 4C 8F 83			jmp skp
    47
    48
    49
    50 8364 2C 0F D4		nmiint  bit NMIST        ;$D40F
    51 8367 10 03		        spl
    52 8369 6C 00 02		        jmp (VDSLST)     ;$0200
    53
    54 836C 38			        sec
    55 836D 24			        .byte $24        ;BIT $18
    56
    57 836E 18			irqint  clc
    58
    59 				        ;wlaczenie OS ROM
    60
    61 836F EE 01 D3		        inc PORTB       ;$D301
    62
    63 8372 48			        pha
    64 8373 8A			        txa
    65 8374 48			        pha
    66 8375 BA			        tsx
    67
    68 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    69
    70 8376 A9 83		        lda #>iret      ;adres procedury iret
    71 8378 48			        pha
    72 8379 A9 88		        lda #<iret
    73 837B 48			        pha
    74 837C BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    75 837F 48			        pha
    76
    77 				        ;skok przez odpowiedni wektor przerwania
    78
    79 8380 90 03		        scc
    80 8382 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    81 8385 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    82
    83 8388 68			iret	pla
    84 8389 AA				tax
    85 838A 68				pla
    86
    87 				        ;wylaczenie OS ROM
    88
    89 838B CE 01 D3		        dec PORTB       ;$D301
    90 838E 40			        rti
    91
    92 838F			skp
    93
    94 				.endl
    95
   145 					.fi
   146
   147 = 00CE			VLEN	= VARDATASIZE-VARINITSIZE
   148 = 9167			VADR	= DATAORIGIN+VARINITSIZE
   149
   150 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   151 					ert 'Invalid memory address range ',VADR
   152 					eif
   153
   154 					ift (VLEN > 0) && (VLEN <= 256)
   155 838F A2 32			ldx #256-VLEN
   156 8391 A9 00			lda #$00
   157 8393 9D 35 91 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   158 					eli VLEN>256
   159 					m@init
   160 					eif
   161
   162 				.ifdef psptr
   163 					mwa #PROGRAMSTACK psptr
   164 				.fi
   165
   166 8399 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   167 839B BD 40 03 9D E6 90 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   168
   169 83A4 E8				inx						; X = 0
   170 83A5 86 80			stx bp						; BP = 0
   171
   172 83A7 8E 08 D2			stx audctl					; reset POKEY
   173 83AA 8E 18 D2			stx audctl+$10
   174 83AD A9 03			lda #3
   175 83AF 8D 0F D2			sta skctl
   176 83B2 8D 1F D2			sta skctl+$10
   177
   178 83B5 CA				dex						; X = 255
   179
   180 83B6				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: SIED.a65]
   181
   182 83B6			.local	MAIN						; PROCEDURE
   183
   184 83B6 4C B9 90			jmp l_01AF
   185
   186 				; ------------------------------------------------------------
   187
   188 83B9			.local	SYSTEM						; UNIT
   189
   190 83B9			.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   191 83B9			.local	@01ED
   192
   193 					.MACRO m@INLINE
   194 				
   195 				; -------------------  ASM Block 00000027  -------------------
   196 				
   197 					jsr @fill
   198 				
   199 					.ENDM
   200
   201 				; ------------------------------------------------------------
   202
   203 = 0088			A	= :EDX
   204 = 008C			COUNT	= :ECX
   205 = 0084			VALUE	= :EAX
   206 83B9			@exit
   207 				.endl
   208 				.endl							; overload
   209
   210 83B9			.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   211 83B9			.local	@01EE
   212
   213 					.MACRO m@INLINE
   214 				
   215 				; -------------------  ASM Block 00000034  -------------------
   216 				
   217 					jsr @move
   218 				
   219 					.ENDM
   220
   221 				; ------------------------------------------------------------
   222
   223 = 0088			SOURCE	= :EDX
   224 = 008C			DEST	= :ECX
   225 = 0084			COUNT	= :EAX
   226 83B9			@exit
   227 				.endl
   228 				.endl							; overload
   229
   230 				; ------------------------------------------------------------
   231
   232 = 0101			__PORTB_BANKS	= $0101
   233 = 0648			M_PI_2	= $0648
   234 = 0192			D_PI_2	= $0192
   235 = 0004			D_PI_180	= $04
   236 = 0000			MGTIA	= $00
   237 = 0080			MVBXE	= $80
   238 = 0000			VBXE_XDLADR	= $00
   239 = 00E0			VBXE_BCBTMP	= $E0
   240 = 0100			VBXE_BCBADR	= $0100
   241 = 1000			VBXE_MAPADR	= $1000
   242 = 1000			VBXE_CHBASE	= $1000
   243 = 5000			VBXE_OVRADR	= $5000
   244 = B000			VBXE_WINDOW	= $B000
   245 = 0000			IDLI	= $00
   246 = 0001			IVBL	= $01
   247 = 0001			IVBLD	= $01
   248 = 0002			IVBLI	= $02
   249 = 0003			ITIM1	= $03
   250 = 0004			ITIM2	= $04
   251 = 0005			ITIM4	= $05
   252 = 00FE			CH_DELCHR	= $FE
   253 = 009B			CH_ENTER	= $9B
   254 = 001B			CH_ESC	= $1B
   255 = 001C			CH_CURS_UP	= $1C
   256 = 001D			CH_CURS_DOWN	= $1D
   257 = 001E			CH_CURS_LEFT	= $1E
   258 = 001F			CH_CURS_RIGHT	= $1F
   259 = 007F			CH_TAB	= $7F
   260 = 009B			CH_EOL	= $9B
   261 = 007D			CH_CLR	= $7D
   262 = 00FD			CH_BELL	= $FD
   263 = 007E			CH_DEL	= $7E
   264 = 009C			CH_DELLINE	= $9C
   265 = 009D			CH_INSLINE	= $9D
   266 = 0000			PAL_PMCOLOR0	= $00
   267 = 0001			PAL_PMCOLOR1	= $01
   268 = 0002			PAL_PMCOLOR2	= $02
   269 = 0003			PAL_PMCOLOR3	= $03
   270 = 0004			PAL_COLOR0	= $04
   271 = 0005			PAL_COLOR1	= $05
   272 = 0006			PAL_COLOR2	= $06
   273 = 0007			PAL_COLOR3	= $07
   274 = 0008			PAL_COLBAK	= $08
   275 = 0000			COLOR_BLACK	= $00
   276 = 000E			COLOR_WHITE	= $0E
   277 = 0032			COLOR_RED	= $32
   278 = 0096			COLOR_CYAN	= $96
   279 = 0068			COLOR_VIOLET	= $68
   280 = 00C4			COLOR_GREEN	= $C4
   281 = 0074			COLOR_BLUE	= $74
   282 = 00EE			COLOR_YELLOW	= $EE
   283 = 0028			COLOR_ORANGE	= $28
   284 = 00E4			COLOR_BROWN	= $E4
   285 = 003C			COLOR_LIGHTRED	= $3C
   286 = 0004			COLOR_GRAY1	= $04
   287 = 0006			COLOR_GRAY2	= $06
   288 = 000A			COLOR_GRAY3	= $0A
   289 = 00CC			COLOR_LIGHTGREEN	= $CC
   290 = 007C			COLOR_LIGHTBLUE	= $7C
   291 = 0004			FMOPENREAD	= $04
   292 = 0008			FMOPENWRITE	= $08
   293 = 0009			FMOPENAPPEND	= $09
   294 = 000C			FMOPENREADWRITE	= $0C
   295 = 912D			SCREENWIDTH	= DATAORIGIN+$0000
   296 = 912F			SCREENHEIGHT	= DATAORIGIN+$0002
   297 = 9131			DATESEPARATOR	= DATAORIGIN+$0004
   298 = 9132			FILEMODE	= DATAORIGIN+$0005
   299 = 9133			GRAPHMODE	= DATAORIGIN+$0006
   300 = 9134			IORESULT	= DATAORIGIN+$0007
   301 = 9135			EOLN	= DATAORIGIN+$0008
   302 = D20A			RND	= $D20A
   303 = 02C0			adr.PALETTE	= $02C0
   304 83B9			.var PALETTE	= adr.PALETTE .word
   305 = D012			adr.HPALETTE	= $D012
   306 83B9			.var HPALETTE	= adr.HPALETTE .word
   307 = 9136			RNDSEED	= DATAORIGIN+$0009
   308
   309 = 83B9 C0 02		PALETTE
   309 = 83BB 12 D0		HPALETTE
   309 				.endl							; UNIT SYSTEM
   310
   311 				; ------------------------------------------------------------
   312
   313 83BD			.local	CIO						; UNIT
   314
   315 83BD			.local	OPN						; PROCEDURE | ASSEMBLER
   316
   317 				; -------------------  ASM Block 00000059  -------------------
   318
   319 83BD 8A 48			txa:pha
   320
   321 83BF AD 38 91			lda chn
   322 83C2 0A 0A 0A 0A			:4 asl @
   323 83C6 AA				tax
   324
   325 83C7 A9 03			lda #$03		;komenda: OPEN
   326 83C9 9D 42 03			sta iccmd,x
   327
   328 83CC EE 3B 91 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   329
   330 83D4 AD 3B 91			lda device		;adres nazwy pliku
   331 83D7 9D 44 03			sta icbufa,x
   332 83DA AD 3C 91			lda device+1
   333 83DD 9D 45 03			sta icbufa+1,x
   334
   335 83E0 AD 39 91			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   336 83E3 9D 4A 03			sta icax1,x
   337
   338 83E6 AD 3A 91			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   339 83E9 9D 4B 03			sta icax2,x
   340
   341 83EC				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 83EC EE 01 D3				inc portb
     6 83EF 20 56 E4				jsr CIOV
     8 83F2 08					php		; save flags on stack
    10 83F3 CE 01 D3				dec portb
    12 83F6 28					plp		; restore flags from stack
   342
   343 83F7 8C 34 91			sty MAIN.SYSTEM.IOResult
   344
   345 83FA 68 AA			pla:tax
   346
   347 				; ------------------------------------------------------------
   348
   349 = 9138			CHN	= DATAORIGIN+$000B
   350 = 9139			AX1	= DATAORIGIN+$000C
   351 = 913A			AX2	= DATAORIGIN+$000D
   352 = 913B			DEVICE	= DATAORIGIN+$000E
   353
   354 = 9138			@VarData	= CHN
   355 = 0005			@VarDataSize	= 5
   356
   357 83FC			@exit
   358 					.ifdef @new
   359 					lda <@VarData
   360 					sta :ztmp
   361 					lda >@VarData
   362 					ldy #@VarDataSize-1
   363 					jmp @FreeMem
   364 					els
   365 83FC 60				rts						; ret
   366 					eif
   367 				.endl
   368
   369 83FD			.local	CLS						; PROCEDURE | ASSEMBLER
   370 83FD 8D 3D 91			sta CHN
   371
   372 				; -------------------  ASM Block 00000060  -------------------
   373
   374 8400 8A 48			txa:pha
   375
   376 8402 AD 3D 91			lda chn
   377 8405 0A 0A 0A 0A			:4 asl @
   378 8409 AA				tax
   379
   380 840A A9 0C			lda #$0c		;komenda: CLOSE
   381 840C 9D 42 03			sta iccmd,x
   382
   383 840F				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 840F EE 01 D3				inc portb
     6 8412 20 56 E4				jsr CIOV
     8 8415 08					php		; save flags on stack
    10 8416 CE 01 D3				dec portb
    12 8419 28					plp		; restore flags from stack
   384
   385 841A 8C 34 91			sty MAIN.SYSTEM.IOResult
   386
   387 841D 68 AA			pla:tax
   388
   389 				; ------------------------------------------------------------
   390
   391 = 913D			CHN	= DATAORIGIN+$0010
   392
   393 = 913D			@VarData	= CHN
   394 = 0001			@VarDataSize	= 1
   395
   396 841F			@exit
   397 					.ifdef @new
   398 					lda <@VarData
   399 					sta :ztmp
   400 					lda >@VarData
   401 					ldy #@VarDataSize-1
   402 					jmp @FreeMem
   403 					els
   404 841F 60				rts						; ret
   405 					eif
   406 				.endl
   407
   408 				; ------------------------------------------------------------
   409
   410 				.endl							; UNIT CIO
   411
   412 				; ------------------------------------------------------------
   413
   414 8420			.local	CURSOR						; UNIT
   415
   416 8420			.local	SETCURSOR					; PROCEDURE | ASSEMBLER | REGISTER
   417
   418 				; -------------------  ASM Block 00000069  -------------------
   419
   420 8420 A5 88		  lda spr
   421 8422 8D 5B 85		  sta main.cursor.myVBL.CURSORSPR
   422 8425 A5 89		  lda spr+1
   423 8427 8D 5C 85		  sta main.cursor.myVBL.CURSORSPR+1
   424 842A A9 01		  lda #1
   425 842C 85 5C		  sta mRefresh
   426 842E A5 14		  lda $14
   427 8430 C5 14		  cmp $14
   428 8432 F0 FC		  beq *-2
   429
   430 				; ------------------------------------------------------------
   431
   432 = 0088			SPR	= :EDX
   433 8434			@exit
   434 					.ifdef @new
   435 					lda <@VarData
   436 					sta :ztmp
   437 					lda >@VarData
   438 					ldy #@VarDataSize-1
   439 					jmp @FreeMem
   440 					els
   441 8434 60				rts						; ret
   442 					eif
   443 				.endl
   444
   445 8435			.local	SETPIVOT					; PROCEDURE | ASSEMBLER | REGISTER
   446
   447 				; -------------------  ASM Block 00000070  -------------------
   448
   449 8435 A5 88		  lda x
   450 8437 8D 71 85		  sta main.cursor.myVBL.mpivotX
   451 843A A5 8C		  lda y
   452 843C 8D 58 85		  sta main.cursor.myVBL.mpivotY
   453
   454 				; ------------------------------------------------------------
   455
   456 = 0088			X	= :EDX
   457 = 008C			Y	= :ECX
   458 843F			@exit
   459 					.ifdef @new
   460 					lda <@VarData
   461 					sta :ztmp
   462 					lda >@VarData
   463 					ldy #@VarDataSize-1
   464 					jmp @FreeMem
   465 					els
   466 843F 60				rts						; ret
   467 					eif
   468 				.endl
   469
   470 8440			.local	MYVBL						; PROCEDURE | ASSEMBLER | INTERRUPT | KEEP
   471
   472 				; -------------------  ASM Block 00000071  -------------------
   473
   474 8440 A9 00		  lda #0
   475 8442 85 4D		  sta 77
   476
   477 				    // lda #<MAIN.cursor.myDLI
   478 				    // sta DLIV
   479 				    // lda #>MAIN.cursor.myDLI
   480 				    // sta DLIV+1
   481
   482 8444			  icl 'asm/cursor.a65'
Source: cursor.a65
     1 = D000			HPOSP0 = $D000
     2 = D001			HPOSP1 = $D001
     3 = D300			stick  = $D300 ; $278
     4 = D010			strig  = $D010
     5
     6 				//  if tm and 1=0 then
     7 				  ; lda tm
     8 				  ; and #1
     9 				  ; sne:jmp xitvbv
    10
    11 8444 A5 5C		  lda mRefresh
    12 8446 F0 07		  beq checkStick
    13 8448 A9 00		  lda #0
    14 844A 85 5C		  sta mRefresh
    15 844C 4C F6 84		  jmp clrcrs
    16
    17 844F			checkStick:
    18 844F AD 10 D0		  lda strig
    19 8452 49 01		  eor #$1
    20 8454 85 4A		  sta mbutton
    21
    22 				//  if (stick<>%1111) then
    23 8456 AD 00 D3		  lda stick
    24 8459 29 0F		  and #%1111
    25 845B 49 0F		  eor #%1111
    26 845D F0 4B		  beq checkKeys
    27 845F AA			  tax
    28
    29 8460 29 0C		  and #%1100
    30 8462 D0 06		  bne stickHtest
    31 8464 A9 00		  lda #0
    32 8466 85 5B		  sta mdx
    33 8468 F0 19		  beq stickTest2  // always jump
    34
    35 846A			stickHTest:
    36 846A 29 04		  and #%0100    // left
    37 846C F0 08		  beq @+
    38 846E A9 F0		  lda #(-16)
    39 8470 C5 5B		  cmp mdx
    40 8472 10 02 C6 5B		  spl:dec mdx
    41
    42 				@:
    43 8476 8A			  txa
    44 8477 29 08		  and #%1000    // right
    45 8479 F0 08		  beq stickTest2
    46 847B A5 5B		  lda mdx
    47 847D C9 10		  cmp #16
    48 847F 10 02 E6 5B		  spl:inc mdx
    49
    50 8483			stickTest2:
    51 8483 8A			  txa
    52 8484 29 03		  and #%0011
    53 8486 D0 06		  bne stickVtest
    54 8488 A9 00		  lda #0
    55 848A 85 5A		  sta mdy
    56 848C F0 68		  beq clrcrs  // always jump
    57
    58 848E			stickVtest:
    59 848E 29 01		  and #%0001    // up
    60 8490 F0 08		  beq @+
    61 8492 A9 F0		  lda #(-16)
    62 8494 C5 5A		  cmp mdy
    63 8496 10 02 C6 5A		  spl:dec mdy
    64
    65 				@:
    66 849A 8A			  txa
    67 849B 29 02		  and #%0010    // down
    68 849D F0 57		  beq clrcrs
    69 849F A5 5A		  lda mdy
    70 84A1 C9 10		  cmp #16
    71 84A3 10 02 E6 5A		  spl:inc mdy
    72 84A7 4C F6 84		  jmp clrcrs
    73
    74 84AA			checkKeys:
    75 84AA A5 5D		  lda mAllowKeys
    76 84AC F0 14		  beq xit
    77
    78 84AE AD 0F D2		  lda SKSTAT
    79 84B1 29 08		  and #%00001000
    80 84B3 D0 04		  bne skButton
    81 84B5 A9 01		  lda #MBUT_LEFT
    82 84B7 85 4A		  sta mbutton
    83
    84 84B9			skButton:
    85 84B9 AD FC 02		  lda KEYB
    86 84BC 29 1F		  and #%0011111
    87 84BE C9 FF		  cmp #$FF
    88 84C0 D0 09		  bne testKeys
    89
    90 84C2			xit:
    91 84C2 A9 00		  lda #0
    92 84C4 85 5B		  sta mdx
    93 84C6 85 5A		  sta mdy
    94 84C8 4C 8A 85		  jmp exvbl
    95
    96 84CB			testKeys:
    97 84CB C9 0E		  cmp #K_UP
    98 84CD D0 06		  bne @+
    99 84CF A2 FC		  ldx #(-4)
   100 84D1 86 5A		  stx mdy
   101 84D3 30 1C		  bmi clrKey
   102
   103 				@:
   104 84D5 C9 0F		  cmp #K_DOWN
   105 84D7 D0 06		  bne @+
   106 84D9 A2 04		  ldx #(+4)
   107 84DB 86 5A		  stx mdy
   108 84DD 10 12		  bpl clrKey
   109
   110 				@:
   111 84DF C9 06		  cmp #K_LEFT
   112 84E1 D0 06		  bne @+
   113 84E3 A2 FC		  ldx #(-4)
   114 84E5 86 5B		  stx mdx
   115 84E7 30 08		  bmi clrKey
   116
   117 				@:
   118 84E9 C9 07		  cmp #K_RIGHT
   119 84EB D0 D5		  bne xit
   120 84ED A2 04		  ldx #(+4)
   121 84EF 86 5B		  stx mdx
   122
   123 84F1			clrKey:
   124 84F1 A9 FF		  lda #$ff
   125 84F3 8D FC 02		  sta KEYB
   126
   127 84F6			clrcrs:
   128 				// clear old cursor
   129 84F6 A2 06		  ldx #6
   130 84F8 A5 53		  lda _my
   131 84FA 38 E9 00		  sub ompivotY:#00
   132 84FD A8			  tay
   133 84FE A9 00		  lda #0
   134 8500			lclrcrs:
   135 8500 99 00 22		  sta PMG_ADDR+$200,y
   136 8503 99 81 22		  sta PMG_ADDR+$281,y
   137 8506 C8			  iny
   138 8507 CA			  dex
   139 8508 10 F6		  bpl lclrcrs
   140
   141 850A			calccrs:      // calculate new cursor position
   142 850A A5 5B		  lda mdx
   143 850C 10 06		  bpl @+
   144 850E 4A			  lsr @
   145 850F 4A			  lsr @
   146 8510 09 C0		  ora #%11000000
   147 8512 30 02		  bmi adddx
   148 				@:
   149 8514 4A			  lsr @
   150 8515 4A			  lsr @
   151
   152 8516			adddx:
   153 8516 18 65 52		  add _mx
   154 8519 85 52		  sta _mx
   155
   156 851B C9 2C		  cmp #44     // left edge of screen
   157 851D B0 06		  bcs @+
   158 851F A9 2C		  lda #44
   159 8521 85 52		  sta _mx      // stay on left edge
   160 8523 10 09		  bpl checkMY // always jump
   161 				@:
   162 8525 38 E9 D2		  sub #210    // right edge of screen
   163 8528 90 04		  bcc checkMY
   164 852A A9 D2		  lda #210    // stay on right edge
   165 852C 85 52		  sta _mx
   166
   167 852E			checkMY:
   168 852E A5 5A		  lda mdy
   169 8530 10 06		  bpl @+
   170 8532 4A			  lsr @
   171 8533 4A			  lsr @
   172 8534 09 C0		  ora #%11000000
   173 8536 30 02		  bmi adddy
   174 				@:
   175 8538 4A			  lsr @
   176 8539 4A			  lsr @
   177
   178 853A			adddy:
   179 853A 18 65 53		  add _my
   180 853D 85 53		  sta _my
   181
   182 853F C9 06		  cmp #6     // top edge of screen
   183 8541 B0 06		  bcs @+
   184 8543 A9 06		  lda #6
   185 8545 85 53		  sta _my      // stay on top edge
   186 8547 10 09		  bpl drawcrs // always jump
   187 				@:
   188 8549 38 E9 78		  sub #120    // bottom edge of screen
   189 854C 90 04		  bcc drawcrs
   190 854E A9 78		  lda #120    // stay on bottom edge
   191 8550 85 53		  sta _my
   192
   193 8552			drawcrs:     // draw new cursor
   194 8552 A2 06		  ldx #6
   195 8554 A5 53		  lda _my
   196 8556 38 E9 00		  sub mpivotY:#00
   197 8559 A8			  tay
   198 855A			ldrawcrs:
   199 855A BD AB 81		  lda CURSORSPR:adr._ARROW,x
   200 855D 99 00 22		  sta PMG_ADDR+$200,y
   201 8560 99 81 22		  sta PMG_ADDR+$281,y
   202 8563 C8			  iny
   203 8564 CA			  dex
   204 8565 10 F3		  bpl ldrawcrs
   205
   206 8567 AD 58 85		  lda mpivotY
   207 856A 8D FC 84		  sta ompivotY
   208
   209 856D A5 52		  lda _mx
   210 856F 38 E9 00		  sub mpivotX:#0
   211 8572 AA			  tax
   212 8573 8E 00 D0		  stx HPOSP0
   213 8576 E8			  inx
   214 8577 8E 01 D0		  stx HPOSP1
   215
   216 857A A5 52		  lda _mx
   217 857C 38 E9 30		  sub #48
   218 857F 4A			  lsr @
   219 8580 4A			  lsr @
   220 8581 85 55		  sta mx
   221
   222 8583 A5 53		  lda _my
   223 8585 38 E9 18		  sub #24
   224 8588 85 54		  sta my
   225
   483 858A			exVBL:
   484 858A 4C 62 E4		  jmp xitvbv
   485
   486 858D 40				rti						; ret
   487 				.endl
   488
   489 858E			.local	INITCURSOR					; PROCEDURE
   490
   491 				; optimize OK (CURSOR), line = 68
   492
   493 858E A9 20			lda #$20
   494 8590 8D 07 D4			sta PMBASE
   495
   496 				; optimize OK (CURSOR), line = 69
   497
   498 8593 A9 03			lda #$03
   499 8595 8D 1D D0			sta PMCTL
   500
   501 				; optimize OK (CURSOR), line = 70
   502
   503 8598 A9 02			lda #$02
   504 859A 8D 6F 02			sta GPRIOR
   505
   506 				; optimize OK (CURSOR), line = 71
   507
   508 859D A9 2A			lda #$2A
   509 859F 8D 2F 02			sta SDMACTL
   510
   511 				; optimize OK (CURSOR), line = 73
   512
   513 85A2 A9 0F			lda #$0F
   514 85A4 8D C0 02			sta adr.PCOL
   515 85A7 A9 00			lda #$00
   516 85A9 8D C1 02			sta adr.PCOL+$01
   517
   518 				; optimize OK (CURSOR), line = 74
   519
   520 85AC A9 40			lda <MYVBL
   521 85AE A0 05			ldy #5
   522 85B0 8D 0A D4			sta wsync
   523 85B3 88				dey
   524 85B4 D0 FD			rne
   525 85B6 8D 24 02			sta VVBLKD
   526 85B9 A9 84			lda >MYVBL
   527 85BB 8D 25 02			sta VVBLKD+1
   528
   529 				; optimize OK (CURSOR), line = 75
   530
   531 85BE A9 01			lda #$01
   532 85C0 85 5C			sta MREFRESH
   533
   534 				; optimize OK (CURSOR), line = 76
   535
   536 85C2 85 5D			sta MALLOWKEYS
   537
   538 				; optimize OK (CURSOR), line = 77
   539
   540 85C4 A9 80			lda #$80
   541 85C6 85 52			sta _MX
   542 85C8 A9 40			lda #$40
   543 85CA 85 53			sta _MY
   544
   545 				; optimize OK (CURSOR), line = 78
   546
   547 85CC A9 AB			lda #$AB
   548 85CE 85 88			sta SETCURSOR.SPR
   549 85D0 A9 81			lda #$81
   550 85D2 85 89			sta SETCURSOR.SPR+1
   551 85D4 20 20 84			jsr SETCURSOR
   552
   553 				; optimize OK (CURSOR), line = 79
   554
   555 85D7 A9 00			lda #$00
   556 85D9 85 88			sta SETPIVOT.X
   557 85DB 85 8C			sta SETPIVOT.Y
   558 85DD 20 35 84			jsr SETPIVOT
   559 85E0			@exit
   560 					.ifdef @new
   561 					lda <@VarData
   562 					sta :ztmp
   563 					lda >@VarData
   564 					ldy #@VarDataSize-1
   565 					jmp @FreeMem
   566 					els
   567 85E0 60				rts						; ret
   568 					eif
   569 				.endl
   570
   571 				; ------------------------------------------------------------
   572
   573 = 81AB			adr._ARROW	= CODEORIGIN+$01AB
   574 85E1			.var _ARROW	= adr._ARROW .word
   575 = 81B2			adr._WAIT	= CODEORIGIN+$01B2
   576 85E1			.var _WAIT	= adr._WAIT .word
   577 = 81B9			adr._CROSS	= CODEORIGIN+$01B9
   578 85E1			.var _CROSS	= adr._CROSS .word
   579 = 0000			MBUT_NONE	= $00
   580 = 0001			MBUT_LEFT	= $01
   581 = 005C			MREFRESH	= $5C
   582 = 005D			MALLOWKEYS	= $5D
   583 = 0052			_MX	= $52
   584 = 0053			_MY	= $53
   585 = 0055			MX	= $55
   586 = 0054			MY	= $54
   587 = 005B			MDX	= $5B
   588 = 005A			MDY	= $5A
   589 = 0278			STICK	= $0278
   590 = 004A			MBUTTON	= $4A
   591 = 004B			OMBUTTON	= $4B
   592 = 0600			SCREEN_LINES_ADDR	= $0600
   593 = 2000			PMG_ADDR	= $2000
   594 = 2400			SCREEN_ADDR	= $2400
   595 = 2800			EDITOR_ADDR	= $2800
   596 = 3000			FONTS_ADDR	= $3000
   597 = 000F			MAX_SPRITE	= $0F
   598 = 0007			MAX_GROUP	= $07
   599 = D800			CORE_LIB	= $D800
   600 = 1F00			ASC2INT_ADDR	= $1F00
   601 = 1F80			SCAN2ASC_ADDR	= $1F80
   602 = 026F			GPRIOR	= $026F
   603 = 022F			SDMACTL	= $022F
   604 = D01D			PMCTL	= $D01D
   605 = D407			PMBASE	= $D407
   606 = D000			adr.HPOSP	= $D000
   607 85E1			.var HPOSP	= adr.HPOSP .word
   608 = D008			adr.SIZEP	= $D008
   609 85E1			.var SIZEP	= adr.SIZEP .word
   610 = 02C0			adr.PCOL	= $02C0
   611 85E1			.var PCOL	= adr.PCOL .word
   612
   613 = 85E1 AB 81		_ARROW
   613 = 85E3 B2 81		_WAIT
   613 = 85E5 B9 81		_CROSS
   613 = 85E7 00 D0		HPOSP
   613 = 85E9 08 D0		SIZEP
   613 = 85EB C0 02		PCOL
   613 				.endl							; UNIT CURSOR
   614
   615 85ED			.local	MYDLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   616
   617 				; -------------------  ASM Block 00000072  -------------------
   618
   619 = D016			COLPF0  = $D016  ; (708)
   620 = D017			COLPF1  = $D017  ; (709)
   621 = D018			COLPF2  = $D018  ; (710)
   622 = D019			COLPF3  = $D019  ; (711)
   623 = D01A			COLPF4  = $D01A  ; (712)
   624 = D40A			WSYNC   = $D40A
   625
   626 				  .macro m@setVDLI newVDLI
   627 				    lda #<:newVDLI
   628 				    sta DLIV
   629 				    lda #>:newVDLI
   630 				    sta DLIV+1
   631 				  .endm
   632
   633 85ED			dli1: // workarea
   634 85ED 48			  pha
   635 85EE A9 E0		  lda #$E0
   636 85F0 8D 0A D4		  sta wsync
   637 85F3 8D 0A D4		  sta wsync
   638 85F6 8D 1A D0		  sta COLPF4
   639
   640 85F9			  m@setVDLI DLI3
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 85F9 A9 1A		    lda #<DLI3
     2 85FB 8D 00 02		    sta DLIV
     3 85FE A9 86		    lda #>DLI3
     4 8600 8D 01 02		    sta DLIV+1
   641
   642 8603 68			  pla
   643 8604 40			  rti
   644
   645 8605			dli2: // timeline
   646 8605 48			  pha
   647 8606 A9 00		  lda #$00
   648 8608 8D 0A D4		  sta wsync
   649 				  // sta wsync
   650 860B 8D 1A D0		  sta COLPF4
   651
   652 860E			  m@setVDLI DLI3
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 860E A9 1A		    lda #<DLI3
     2 8610 8D 00 02		    sta DLIV
     3 8613 A9 86		    lda #>DLI3
     4 8615 8D 01 02		    sta DLIV+1
   653
   654 8618 68			  pla
   655 8619 40			  rti
   656
   657 861A			dli3: // controls
   658 861A 48 8A 48		  pha:txa:pha
   659 861D A9 E6		  lda #$E6
   660 861F A2 E0		  ldx #$E0
   661 8621 8D 0A D4		  sta wsync
   662 				  // sta wsync
   663 8624 8D 1A D0		  sta COLPF4
   664 8627 8E 17 D0		  stx COLPF1
   665 862A			  m@setVDLI DLI4
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 862A A9 38		    lda #<DLI4
     2 862C 8D 00 02		    sta DLIV
     3 862F A9 86		    lda #>DLI4
     4 8631 8D 01 02		    sta DLIV+1
   666
   667 8634 68 AA 68		  pla:tax:pla
   668 8637 40			  rti
   669
   670 8638			dli4: // status
   671 8638 48 8A 48		  pha:txa:pha
   672 863B A9 04		  lda #$04
   673 863D A2 0F		  ldx #$0f
   674 863F 8D 0A D4		  sta wsync
   675 8642 8D 1A D0		  sta COLPF4
   676 8645 8E 17 D0		  stx COLPF1
   677 8648			  m@setVDLI DLI5
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8648 A9 56		    lda #<DLI5
     2 864A 8D 00 02		    sta DLIV
     3 864D A9 86		    lda #>DLI5
     4 864F 8D 01 02		    sta DLIV+1
   678
   679 8652 68 AA 68		  pla:tax:pla
   680 8655 40			  rti
   681
   682 8656			dli5:
   683 8656 48			  pha
   684 8657 AD C8 02		  lda 712
   685 865A 8D 0A D4		  sta wsync
   686 865D 8D 1A D0		  sta COLPF4
   687
   688 8660			  m@setVDLI DLI1
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8660 A9 ED		    lda #<DLI1
     2 8662 8D 00 02		    sta DLIV
     3 8665 A9 85		    lda #>DLI1
     4 8667 8D 01 02		    sta DLIV+1
   689
   690 866A 68			  pla
   691 866B 40			  rti
   692
   693
   694 866C 40				rti						; ret
   695 				.endl
   696
   697 866D			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
   698
   699 				; -------------------  ASM Block 00000073  -------------------
   700
   701 866D			 icl 'asm/get_line.a65' 
Source: get_line.a65
     1 866D 8A 48		  txa:pha
     2
     3 866F A5 88		  lda chn
     4 8671 0A 0A 0A 0A		  :4 asl @
     5 8675 AA			  tax
     6
     7 8676 A9 05		  lda #5
     8 8678 9D 42 03		  sta iccmd,x
     9
    10 867B A5 8D		  lda buf+1
    11 867D 9D 45 03		  sta icbufa+1,x
    12 8680 A5 8C		  lda buf
    13 8682 18 69 01		  add #1
    14 8685 9D 44 03		  sta icbufa,x
    15 8688 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 868D A9 80		  lda #$80
    18 868F 9D 48 03		  sta icbufl,x
    19 8692 A9 00		  lda #0
    20 8694 9D 49 03		  sta icbufl+1,x
    21
    22 8697			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8697 EE 01 D3				inc portb
     6 869A 20 56 E4				jsr CIOV
     8 869D 08					php		; save flags on stack
    10 869E CE 01 D3				dec portb
    12 86A1 28					plp		; restore flags from stack
    23 86A2 8C 34 91		  sty MAIN.SYSTEM.IOResult
    24
    25 86A5 BD 48 03		  lda icbufl,x
    26 86A8 A0 00		  ldy #0
    27 86AA 91 8C		  sta (buf),y
    28
    29 86AC 68 AA		  pla:tax
   702 				; ------------------------------------------------------------
   703
   704 = 0088			CHN	= :EDX
   705 = 008C			BUF	= :ECX
   706 86AE			@exit
   707 					.ifdef @new
   708 					lda <@VarData
   709 					sta :ztmp
   710 					lda >@VarData
   711 					ldy #@VarDataSize-1
   712 					jmp @FreeMem
   713 					els
   714 86AE 60				rts						; ret
   715 					eif
   716 				.endl
   717
   718 86AF			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
   719
   720 				; -------------------  ASM Block 00000074  -------------------
   721
   722 86AF			 icl 'asm/reduce_filename.a65' 
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 86AF			  .local
     5
     6 86AF 8A 48		  txa:pha
     7
     8 86B1 A5 88		  lda inreg
     9 86B3 8D C5 86		  sta inptr
    10 86B6 A5 89		  lda inreg+1
    11 86B8 8D C6 86		  sta inptr+1
    12
    13 				; 0123456789abcdef01
    14 				;  *:FILENAMEEXT 000
    15
    16 86BB A9 0B		  lda #$0b
    17 86BD 8D D0 86		  sta fpos
    18
    19 86C0 A2 03		  ldx #3
    20 86C2 A0 01		  ldy #1
    21
    22 86C4			fnLoop:
    23 86C4 BD 00 20		  lda inptr:$2000,x
    24 86C7 C9 20		  cmp #' '
    25 86C9 F0 03		  beq skip
    26 86CB 91 8C		  sta (outreg),y
    27 86CD C8			  iny
    28 86CE			skip:
    29 86CE E8			  inx
    30 86CF E0 0B		  cpx fpos:#11
    31 86D1 D0 F1		  bne fnLoop
    32
    33 86D3			dot:
    34 86D3 E0 0E		  cpx #$0e
    35 86D5 F0 0B		  beq storeDot
    36
    37 86D7 98 48		  tya:pha
    38 86D9 C8			  iny
    39 86DA A9 0E		  lda #$0e
    40 86DC 8D D0 86		  sta fpos
    41 86DF 4C C4 86		  jmp fnLoop
    42
    43 86E2			storeDot:
    44 86E2 88			  dey
    45 86E3 98 AA		  tya:tax   // move Y to X - string length
    46 86E5 68 A8		  pla:tay   // pop stored dot position
    47
    48 86E7 8E EB 86		  stx len      // ex: X=$0a
    49 86EA C9 00		  cmp len:#00   //     A=$09
    50 				                //   X-A=$0a-$09=-1($ff)
    51 86EC 30 04		  bmi putDot
    52
    53 86EE CA			  dex
    54 86EF 4C F6 86		  jmp storeLen;
    55
    56 86F2			putDot:
    57 86F2 A9 2E		  lda #'.'
    58 86F4 91 8C		  sta (outreg),y
    59
    60 86F6			storeLen:
    61 86F6 8A			  txa       // move string length to Accu
    62 86F7 A0 00		  ldy #0
    63 86F9 91 8C		  sta (outreg),y
    64
    65 86FB 68 AA		  pla:tax
    66
    67 				  .endl
   723 				; ------------------------------------------------------------
   724
   725 = 0088			INFN	= :EDX
   726 = 008C			OUTFN	= :ECX
   727 86FD			@exit
   728 					.ifdef @new
   729 					lda <@VarData
   730 					sta :ztmp
   731 					lda >@VarData
   732 					ldy #@VarDataSize-1
   733 					jmp @FreeMem
   734 					els
   735 86FD 60				rts						; ret
   736 					eif
   737 				.endl
   738
   739 86FE			.local	SHOWABOUT					; PROCEDURE
   740
   741 				; optimize OK (about.inc), line = 3
   742
   743 86FE A9 FF			lda #$FF
   744 8700 20 F9 8D			jsr SETMODULE
   745
   746 				; optimize OK (about.inc), line = 4
   747
   748 8703 A9 14			lda #$14
   749 8705 20 09 E1			jsr SETSCREENWIDTH
   750
   751 				; optimize OK (about.inc), line = 5
   752
   753 8708 A9 0A			lda #$0A
   754 870A 85 88			sta PUTTEXT.X
   755 870C A9 06			lda #$06
   756 870E 85 8C			sta PUTTEXT.Y
   757 8710 A9 C4			lda #$C4
   758 8712 85 84			sta PUTTEXT.S
   759 8714 A9 80			lda #$80
   760 8716 85 85			sta PUTTEXT.S+1
   761 8718 20 AB DF			jsr PUTTEXT
   762
   763 				; optimize OK (about.inc), line = 6
   764
   765 871B A9 0A			lda #$0A
   766 871D 85 88			sta PUTTEXT.X
   767 871F A9 0C			lda #$0C
   768 8721 85 8C			sta PUTTEXT.Y
   769 8723 A9 D8			lda #$D8
   770 8725 85 84			sta PUTTEXT.S
   771 8727 A9 80			lda #$80
   772 8729 85 85			sta PUTTEXT.S+1
   773 872B 20 AB DF			jsr PUTTEXT
   774
   775 				; optimize OK (about.inc), line = 7
   776
   777 872E A9 0F			lda #$0F
   778 8730 85 88			sta PUTTEXT.X
   779 8732 A9 18			lda #$18
   780 8734 85 8C			sta PUTTEXT.Y
   781 8736 A9 EC			lda #$EC
   782 8738 85 84			sta PUTTEXT.S
   783 873A A9 80			lda #$80
   784 873C 85 85			sta PUTTEXT.S+1
   785 873E 20 AB DF			jsr PUTTEXT
   786
   787 				; optimize OK (about.inc), line = 8
   788
   789 8741 A9 01			lda #$01
   790 8743 85 88			sta PUTTEXT.X
   791 8745 A9 24			lda #$24
   792 8747 85 8C			sta PUTTEXT.Y
   793 8749 A9 F5			lda #$F5
   794 874B 85 84			sta PUTTEXT.S
   795 874D A9 80			lda #$80
   796 874F 85 85			sta PUTTEXT.S+1
   797 8751 20 AB DF			jsr PUTTEXT
   798
   799 				; optimize OK (about.inc), line = 9
   800
   801 8754 A9 1C			lda #$1C
   802 8756 8D 91 EB			sta SETSTATUS.S
   803 8759 A9 81			lda #$81
   804 875B 8D 92 EB			sta SETSTATUS.S+1
   805 875E 20 BC E5			jsr SETSTATUS
   806 8761			@exit
   807 					.ifdef @new
   808 					lda <@VarData
   809 					sta :ztmp
   810 					lda >@VarData
   811 					ldy #@VarDataSize-1
   812 					jmp @FreeMem
   813 					els
   814 8761 60				rts						; ret
   815 					eif
   816 				.endl
   817
   818 8762			.local	ADDFILELABEL					; PROCEDURE
   819
   820 				; optimize OK (module-disk.inc), line = 24
   821
   822 8762 AD 2A 92			lda N
   823 8765 C9 0F			cmp #$0F
   824 8767 90 03			jcc l_029B
   825 8769 4C CB 87			jmp @exit
   826 876C			l_029B
   827
   828 				; optimize OK (module-disk.inc), line = 25
   829
   830 876C AC 2A 92			ldy N
   831 876F B9 2A 82			lda adr._DIRFILEX,y
   832 8772 8D 2D 92			sta X
   833 8775 B9 39 82			lda adr._DIRFILEY,y
   834 8778 8D 2E 92			sta Y
   835
   836 				; optimize OK (module-disk.inc), line = 26
   837
   838 877B AD 2A 92			lda N
   839 877E 0A				asl @
   840 877F A8				tay
   841 8780 B9 49 91			lda adr.DIRNAME,y
   842 8783 85 84			sta PUTTEXT.S
   843 8785 B9 4A 91			lda adr.DIRNAME+1,y
   844 8788 85 85			sta PUTTEXT.S+1
   845 878A AD 2D 92			lda X
   846 878D 85 88			sta PUTTEXT.X
   847 878F AD 2E 92			lda Y
   848 8792 85 8C			sta PUTTEXT.Y
   849 8794 20 AB DF			jsr PUTTEXT
   850
   851 				; optimize OK (module-disk.inc), line = 27
   852
   853 8797 AD 2B 92			lda PRC
   854 879A 8D 74 EB			sta ADDZONEN.PRC
   855 879D AD 2C 92			lda PRC+1
   856 87A0 8D 75 EB			sta ADDZONEN.PRC+1
   857 87A3 AD 2E 92			lda Y
   858 87A6 38 E9 01			sub #$01
   859 87A9 8D 71 EB			sta ADDZONEN.Y
   860 87AC AD 2D 92			lda X
   861 87AF 38 E9 01			sub #$01
   862 87B2 8D 70 EB			sta ADDZONEN.X
   863 87B5 A9 0E			lda #$0E
   864 87B7 18 6D 2A 92			add N
   865 87BB 8D 6F EB			sta ADDZONEN.N
   866 87BE A9 0E			lda #$0E
   867 87C0 8D 72 EB			sta ADDZONEN.W
   868 87C3 A9 07			lda #$07
   869 87C5 8D 73 EB			sta ADDZONEN.H
   870 87C8 20 23 E2			jsr ADDZONEN
   871
   872 				; ------------------------------------------------------------
   873
   874 = 922A			N	= DATAORIGIN+$00FD
   875 = 922B			PRC	= DATAORIGIN+$00FE
   876 = 922D			X	= DATAORIGIN+$0100
   877 = 922E			Y	= DATAORIGIN+$0101
   878
   879 = 922A			@VarData	= N
   880 = 0005			@VarDataSize	= 5
   881
   882 87CB			@exit
   883 					.ifdef @new
   884 					lda <@VarData
   885 					sta :ztmp
   886 					lda >@VarData
   887 					ldy #@VarDataSize-1
   888 					jmp @FreeMem
   889 					els
   890 87CB 60				rts						; ret
   891 					eif
   892 				.endl
   893
   894 87CC			.local	DOCHOICEFILE					; PROCEDURE
   895
   896 				; optimize OK (module-disk.inc), line = 32
   897
   898 87CC A5 50			lda SZONE
   899 87CE 8D 2F 92			sta @CASETMP_0004
   900 87D1 C9 0E			cmp #14
   901 87D3 30 09			bmi @+
   902 87D5 C9 1D			cmp #29
   903 87D7 F0 02			seq
   904 87D9 10 03			bpl @+
   905 87DB 4C E1 87			jmp *+6
   906 				@
   907 87DE 4C 2D 88			jmp l_02E7
   908 				@
   909
   910 				; optimize OK (module-disk.inc), line = 34
   911
   912 87E1 A5 50			lda SZONE
   913 87E3 0A				asl @
   914 87E4 A8				tay
   915 87E5 B9 2D 91			lda adr.DIRNAME-$1C,y
   916 87E8 85 88			sta @move.src
   917 87EA B9 2E 91			lda adr.DIRNAME+1-$1C,y
   918 87ED 85 89			sta @move.src+1
   919 					@moveSTRING FN #17
   919 				 MWA FN @MOVE.DST\ MWA #17 @MOVE.CNT\ JSR @MOVESTRING
   919 87EF AD 16 91 85 8C AD +  MWA FN @MOVE.DST
   919 87F9 A9 11 85 84 A9 00 +  MWA #17 @MOVE.CNT
   919 8801 20 10 83		 JSR @MOVESTRING
   920
   921 				; optimize OK (module-disk.inc), line = 36
   922
   923 8804 A9 07			lda #$07
   924 8806 85 88			sta BLANK.X
   925 8808 A9 01			lda #$01
   926 880A 85 8C			sta BLANK.Y
   927 880C A9 0C			lda #$0C
   928 880E 85 84			sta BLANK.W
   929 8810 A9 05			lda #$05
   930 8812 8D 60 EB			sta BLANK.H
   931 8815 20 C6 E0			jsr BLANK
   932
   933 				; optimize OK (module-disk.inc), line = 37
   934
   935 8818 A9 07			lda #$07
   936 881A 85 88			sta PUTTEXT.X
   937 881C A9 01			lda #$01
   938 881E 85 8C			sta PUTTEXT.Y
   939 8820 AD 16 91			lda FN
   940 8823 85 84			sta PUTTEXT.S
   941 8825 AD 17 91			lda FN+1
   942 8828 85 85			sta PUTTEXT.S+1
   943 882A 20 AB DF			jsr PUTTEXT
   944 882D			l_02E7
   945 882D			a_0004
   946
   947 				; ------------------------------------------------------------
   948
   949 = 922F			@CASETMP_0004	= DATAORIGIN+$0102
   950
   951 = 922F			@VarData	= @CASETMP_0004
   952 = 0001			@VarDataSize	= 1
   953
   954 882D			@exit
   955 					.ifdef @new
   956 					lda <@VarData
   957 					sta :ztmp
   958 					lda >@VarData
   959 					ldy #@VarDataSize-1
   960 					jmp @FreeMem
   961 					els
   962 882D 60				rts						; ret
   963 					eif
   964 				.endl
   965
   966 882E			.local	DOPREVPAGEDIR					; PROCEDURE
   967
   968 				; optimize OK (module-disk.inc), line = 46
   969
   970 882E AD 47 91			lda DIRPAGEBEGIN
   971 8831 38 E9 0E			sub #$0E
   972 8834 8D 47 91			sta DIRPAGEBEGIN
   973 8837 B0 03			scs
   974 8839 CE 48 91			dec DIRPAGEBEGIN+1
   975
   976 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 47
   977
   978 883C 20 52 88			jsr READDIRECTORY
   979 883F			@exit
   980 					.ifdef @new
   981 					lda <@VarData
   982 					sta :ztmp
   983 					lda >@VarData
   984 					ldy #@VarDataSize-1
   985 					jmp @FreeMem
   986 					els
   987 883F 60				rts						; ret
   988 					eif
   989 				.endl
   990
   991 8840			.local	DONEXTPAGEDIR					; PROCEDURE
   992
   993 				; optimize OK (module-disk.inc), line = 52
   994
   995 8840 AD 47 91			lda DIRPAGEBEGIN
   996 8843 18 69 0E			add #$0E
   997 8846 8D 47 91			sta DIRPAGEBEGIN
   998 8849 90 03			scc
   999 884B EE 48 91			inc DIRPAGEBEGIN+1
  1000
  1001 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 53
  1002
  1003 884E 20 52 88			jsr READDIRECTORY
  1004 8851			@exit
  1005 					.ifdef @new
  1006 					lda <@VarData
  1007 					sta :ztmp
  1008 					lda >@VarData
  1009 					ldy #@VarDataSize-1
  1010 					jmp @FreeMem
  1011 					els
  1012 8851 60				rts						; ret
  1013 					eif
  1014 				.endl
  1015
  1016 8852			.local	READDIRECTORY					; PROCEDURE
  1017
  1018 				; optimize OK (module-disk.inc), line = 62
  1019
  1020 8852 AD 01 04			lda adr.DEV+$01
  1021 8855 C9 44			cmp #$44
  1022 8857 F0 03 4C A2 89		jne l_0320
  1023
  1024 				; optimize OK (module-disk.inc), line = 64
  1025
  1026 885C A9 03			lda #$03
  1027 885E 85 88			sta CURSOR.SETPIVOT.X
  1028 8860 85 8C			sta CURSOR.SETPIVOT.Y
  1029 8862 20 35 84			jsr CURSOR.SETPIVOT
  1030 8865 A9 B2			lda #$B2
  1031 8867 85 88			sta CURSOR.SETCURSOR.SPR
  1032 8869 A9 81			lda #$81
  1033 886B 85 89			sta CURSOR.SETCURSOR.SPR+1
  1034 886D 20 20 84			jsr CURSOR.SETCURSOR
  1035
  1036 				; optimize OK (module-disk.inc), line = 65
  1037
  1038 8870 AD 14 91			lda DEV
  1039 8873 85 88			sta @move.src
  1040 8875 AD 15 91			lda DEV+1
  1041 8878 85 89			sta @move.src+1
  1042 					@moveSTRING _FN #21
  1042 				 MWA _FN @MOVE.DST\ MWA #21 @MOVE.CNT\ JSR @MOVESTRING
  1042 887A AD 18 91 85 8C AD +  MWA _FN @MOVE.DST
  1042 8884 A9 15 85 84 A9 00 +  MWA #21 @MOVE.CNT
  1042 888C 20 10 83		 JSR @MOVESTRING
  1043 888F AD 2C 04			lda adr.FILEMASK
  1044 8892 85 84			sta SYSTEM.MOVE.@01EE.COUNT
  1045 8894 AD 17 04			lda adr._FN
  1046 8897 18 69 01			add #$01
  1047 889A 85 9E			sta :STACKORIGIN+10
  1048 889C A9 00			lda #$00
  1049 889E 69 00			adc #$00
  1050 88A0 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  1051 88A2 A9 17			lda <adr._FN
  1052 88A4 18 65 9E			add :STACKORIGIN+10
  1053 88A7 85 8C			sta SYSTEM.MOVE.@01EE.DEST
  1054 88A9 A9 04			lda >adr._FN
  1055 88AB 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  1056 88AD 85 8D			sta SYSTEM.MOVE.@01EE.DEST+1
  1057 88AF A9 2D			lda <adr.FILEMASK+$01
  1058 88B1 85 88			sta SYSTEM.MOVE.@01EE.SOURCE
  1059 88B3 A9 04			lda >adr.FILEMASK+$01
  1060 88B5 85 89			sta SYSTEM.MOVE.@01EE.SOURCE+1
  1061 88B7 A9 00			lda #$00
  1062 88B9 85 85			sta SYSTEM.MOVE.@01EE.COUNT+1
  1063 88BB				.LOCAL +MAIN.SYSTEM.MOVE.@01EE
  1064 88BB				m@INLINE
Macro: MAIN.SYSTEM.MOVE.@01EE.M@INLINE [Source: SIED.a65]
     4 88BB 20 73 82			jsr @move
Source: SIED.a65
  1065 					.ENDL
  1066
  1067 				; optimize OK (module-disk.inc), line = 66
  1068
  1069 88BE AD 47 91			lda DIRPAGEBEGIN
  1070 88C1 8D 32 92			sta DIRSEEK
  1071 88C4 AD 48 91			lda DIRPAGEBEGIN+1
  1072 88C7 8D 33 92			sta DIRSEEK+1
  1073
  1074 				; optimize OK (module-disk.inc), line = 67
  1075
  1076 88CA AD 48 91			lda DIRPAGEBEGIN+1
  1077 88CD 30 0A			jmi l_034C
  1078 88CF 0D 47 91			ora DIRPAGEBEGIN
  1079 88D2 F0 05			jeq l_034C
  1080 88D4 A9 35			lda #$35
  1081 88D6 4C DB 88			jmp l_0358
  1082 88D9			l_034C
  1083 88D9 A9 40			lda #$40
  1084 88DB			l_0358
  1085 88DB 8D 91 EB			sta SETSTATUS.S
  1086 88DE A9 81			lda #$81
  1087 88E0 8D 92 EB			sta SETSTATUS.S+1
  1088 88E3 20 BC E5			jsr SETSTATUS
  1089
  1090 				; optimize OK (module-disk.inc), line = 68
  1091
  1092 88E6 A9 01			lda #$01
  1093 88E8 8D 38 91			sta CIO.OPN.CHN
  1094 88EB A9 06			lda #$06
  1095 88ED 8D 39 91			sta CIO.OPN.AX1
  1096 88F0 A9 00			lda #$00
  1097 88F2 8D 3A 91			sta CIO.OPN.AX2
  1098 88F5 AD 18 91			lda _FN
  1099 88F8 8D 3B 91			sta CIO.OPN.DEVICE
  1100 88FB AD 19 91			lda _FN+1
  1101 88FE 8D 3C 91			sta CIO.OPN.DEVICE+1
  1102 8901 20 BD 83			jsr CIO.OPN
  1103
  1104 				; optimize OK (module-disk.inc), line = 69
  1105
  1106 8904 A9 FF			lda #$FF
  1107 8906 8D 30 92			sta N
  1108
  1109 				; --- WhileProlog
  1110 8909 4C 89 89			jmp l_0366
  1111 890C			l_0367
  1112
  1113 				; optimize OK (module-disk.inc), line = 72
  1114
  1115 890C A9 01			lda #$01
  1116 890E 85 88			sta GETLN.CHN
  1117 8910 AD 18 91			lda _FN
  1118 8913 85 8C			sta GETLN.BUF
  1119 8915 AD 19 91			lda _FN+1
  1120 8918 85 8D			sta GETLN.BUF+1
  1121 891A 20 6D 86			jsr GETLN
  1122
  1123 				; optimize OK (module-disk.inc), line = 73
  1124
  1125 891D AD 18 04			lda adr._FN+$01
  1126 8920 C9 30			cmp #$30
  1127 8922 90 1A			jcc l_037E
  1128
  1129 				; optimize OK (module-disk.inc), line = 75
  1130
  1131 8924 CE 17 04			dec adr._FN
  1132 8927 AD 18 91			lda _FN
  1133 892A 8D 91 EB			sta SETSTATUS.S
  1134 892D AD 19 91			lda _FN+1
  1135 8930 8D 92 EB			sta SETSTATUS.S+1
  1136 8933 20 BC E5			jsr SETSTATUS
  1137
  1138 				; optimize OK (module-disk.inc), line = 76
  1139
  1140 8936 A9 03			lda #$03
  1141 8938 8D 34 91			sta SYSTEM.IORESULT
  1142 893B 4C 9F 89			jmp b_0367					; break
  1143 893E			l_037E
  1144
  1145 				; optimize OK (module-disk.inc), line = 79
  1146
  1147 893E AD 33 92			lda DIRSEEK+1
  1148 8941 30 13			jmi l_03A5
  1149 8943 0D 32 92			ora DIRSEEK
  1150 8946 F0 0E			jeq l_03A5
  1151
  1152 				; optimize FAIL (0, module-disk.inc), line = 81
  1153
  1154 8948 AD 32 92			lda DIRSEEK
  1155 894B D0 03			bne @+
  1156 894D CE 33 92			dec DIRSEEK+1
  1157 				@
  1158 8950 CE 32 92			dec DIRSEEK
  1159 8953 4C 89 89			jmp c_0367					; continue
  1160 8956			l_03A5
  1161
  1162 				; optimize OK (module-disk.inc), line = 84
  1163
  1164 8956 AD 30 92			lda N
  1165 8959 C9 FF			cmp #$FF
  1166 895B D0 0D			jne l_03BE
  1167 895D A9 55			lda #$55
  1168 895F 8D 91 EB			sta SETSTATUS.S
  1169 8962 A9 81			lda #$81
  1170 8964 8D 92 EB			sta SETSTATUS.S+1
  1171 8967 20 BC E5			jsr SETSTATUS
  1172 896A			l_03BE
  1173
  1174 				; optimize FAIL (0, module-disk.inc), line = 87
  1175
  1176 896A EE 30 92			inc N
  1177
  1178 				; optimize OK (module-disk.inc), line = 88
  1179
  1180 896D AD 30 92			lda N
  1181 8970 0A				asl @
  1182 8971 A8				tay
  1183 8972 B9 49 91			lda adr.DIRNAME,y
  1184 8975 85 8C			sta REDUCEFILENAME.OUTFN
  1185 8977 B9 4A 91			lda adr.DIRNAME+1,y
  1186 897A 85 8D			sta REDUCEFILENAME.OUTFN+1
  1187 897C AD 18 91			lda _FN
  1188 897F 85 88			sta REDUCEFILENAME.INFN
  1189 8981 AD 19 91			lda _FN+1
  1190 8984 85 89			sta REDUCEFILENAME.INFN+1
  1191 8986 20 AF 86			jsr REDUCEFILENAME
  1192 8989			c_0367
  1193 8989			l_0366
  1194
  1195 				; optimize OK (module-disk.inc), line = 70
  1196
  1197 8989 AD 34 91			lda SYSTEM.IORESULT
  1198 898C C9 01			cmp #$01
  1199 898E D0 0F			jne l_0367w
  1200 8990 AD 30 92			lda N
  1201 8993 38 E9 0F			sub #$0F
  1202 8996 50 02			svc
  1203 8998 49 80			eor #$80
  1204 899A 10 03			jpl l_0367w
  1205 899C 4C 0C 89			jmp l_0367
  1206 899F			l_0367w
  1207 899F			b_0367
  1208 899F 4C A7 89			jmp l_03F0
  1209 89A2			l_0320
  1210
  1211 				; optimize OK (module-disk.inc), line = 92
  1212
  1213 89A2 A9 A0			lda #$A0
  1214 89A4 8D 34 91			sta SYSTEM.IORESULT
  1215 89A7			l_03F0
  1216
  1217 				; optimize OK (module-disk.inc), line = 93
  1218
  1219 89A7 AD 84 06			lda adr.YSCR+$84
  1220 89AA 85 88			sta SYSTEM.FILLCHAR.@01ED.A
  1221 89AC AD 85 06			lda adr.YSCR+1+$84
  1222 89AF 85 89			sta SYSTEM.FILLCHAR.@01ED.A+1
  1223 89B1 A9 F8			lda #$F8
  1224 89B3 85 8C			sta SYSTEM.FILLCHAR.@01ED.COUNT
  1225 89B5 A9 02			lda #$02
  1226 89B7 85 8D			sta SYSTEM.FILLCHAR.@01ED.COUNT+1
  1227 89B9 A9 00			lda #$00
  1228 89BB 85 84			sta SYSTEM.FILLCHAR.@01ED.VALUE
  1229 89BD				.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
  1230 89BD				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@01ED.M@INLINE [Source: SIED.a65]
     4 89BD 20 C8 82			jsr @fill
Source: SIED.a65
  1231 					.ENDL
  1232
  1233 				; optimize OK (module-disk.inc), line = 94
  1234
  1235 89C0 AD 34 91			lda SYSTEM.IORESULT
  1236 89C3 C9 04			cmp #$04
  1237 89C5 90 41			jcc l_040C
  1238 89C7 A0 F2			ldy #256-14
  1239 89C9 B9 78 80 99 25 03 + 	mva:rne CODEORIGIN+$016A+14-256,y adr._FN+14-256,y+
  1240
  1241 				; optimize OK (module-disk.inc), line = 97
  1242
  1243 89D2 AD 34 91			lda SYSTEM.IORESULT
  1244 89D5 4A				lsr @
  1245 89D6 4A				lsr @
  1246 89D7 4A				lsr @
  1247 89D8 4A				lsr @
  1248 89D9 8D 30 92			sta N
  1249 89DC AC 30 92			ldy N
  1250 89DF B9 1A 82			lda adr._HEX,y
  1251 89E2 8D 23 04			sta adr._FN+$0C
  1252
  1253 				; optimize OK (module-disk.inc), line = 98
  1254
  1255 89E5 AD 34 91			lda SYSTEM.IORESULT
  1256 89E8 29 0F			and #$0F
  1257 89EA 8D 30 92			sta N
  1258 89ED AC 30 92			ldy N
  1259 89F0 B9 1A 82			lda adr._HEX,y
  1260 89F3 8D 24 04			sta adr._FN+$0D
  1261
  1262 				; optimize OK (module-disk.inc), line = 99
  1263
  1264 89F6 AD 18 91			lda _FN
  1265 89F9 8D 91 EB			sta SETSTATUS.S
  1266 89FC AD 19 91			lda _FN+1
  1267 89FF 8D 92 EB			sta SETSTATUS.S+1
  1268 8A02 20 BC E5			jsr SETSTATUS
  1269 8A05 4C CD 8A			jmp l_0441
  1270 8A08			l_040C
  1271
  1272 				; optimize OK (module-disk.inc), line = 103
  1273
  1274 8A08 A9 0E			lda #$0E
  1275 8A0A 8D 31 92			sta J
  1276
  1277 8A0D			l_044A
  1278 				; --- ForToDoCondition
  1279 8A0D AD 31 92			lda J
  1280 8A10 C9 1F			cmp #$1F
  1281 8A12 B0 08			jcs l_0458
  1282 8A14 20 AB E1			jsr CLEARZONE
  1283
  1284 				; --- ForToDoEpilog
  1285 8A17 EE 31 92			inc J
  1286 8A1A D0 F1			jne l_044A
  1287 8A1C			l_0458
  1288
  1289 				; optimize OK (module-disk.inc), line = 104
  1290
  1291 8A1C A9 00			lda #$00
  1292 8A1E 8D 31 92			sta J
  1293
  1294 				; --- WhileProlog
  1295 8A21 4C 3A 8A			jmp l_0467
  1296 8A24			l_0468
  1297
  1298 				; optimize OK (module-disk.inc), line = 106
  1299
  1300 8A24 AD 31 92			lda J
  1301 8A27 8D 2A 92			sta ADDFILELABEL.N
  1302 8A2A A9 CC			lda <DOCHOICEFILE
  1303 8A2C 8D 2B 92			sta ADDFILELABEL.PRC
  1304 8A2F A9 87			lda >DOCHOICEFILE
  1305 8A31 8D 2C 92			sta ADDFILELABEL.PRC+1
  1306 8A34 20 62 87			jsr ADDFILELABEL
  1307
  1308 				; optimize FAIL (0, module-disk.inc), line = 107
  1309
  1310 8A37 EE 31 92			inc J
  1311 8A3A			l_0467
  1312
  1313 				; optimize OK (module-disk.inc), line = 104
  1314
  1315 8A3A AD 30 92			lda N
  1316 8A3D 38 ED 31 92			sub J
  1317 8A41 50 02			svc
  1318 8A43 49 80			eor #$80
  1319 8A45 10 DD			jpl l_0468
  1320
  1321 				; optimize OK (module-disk.inc), line = 109
  1322
  1323 8A47 AD 48 91			lda DIRPAGEBEGIN+1
  1324 8A4A 30 05			bmi @+
  1325 8A4C 0D 47 91			ora DIRPAGEBEGIN
  1326 8A4F D0 03			sne
  1327 				@
  1328 8A51 4C 57 8A			jmp *+6
  1329 8A54 4C 5E 8A		@	jmp l_049Bx
  1330 8A57 AD 34 91			lda SYSTEM.IORESULT
  1331 8A5A C9 03			cmp #$03
  1332 8A5C B0 6F			jcs l_049B
  1333 				@
  1334 8A5E			l_049Bx
  1335
  1336 				; optimize OK (module-disk.inc), line = 111
  1337
  1338 8A5E A9 1B			lda #$1B
  1339 8A60 85 88			sta BLANK.X
  1340 8A62 A9 29			lda #$29
  1341 8A64 85 8C			sta BLANK.Y
  1342 8A66 A9 0C			lda #$0C
  1343 8A68 85 84			sta BLANK.W
  1344 8A6A A9 05			lda #$05
  1345 8A6C 8D 60 EB			sta BLANK.H
  1346 8A6F 20 C6 E0			jsr BLANK
  1347 8A72 A9 1C			lda #$1C
  1348 8A74 20 AB E1			jsr CLEARZONE
  1349
  1350 				; optimize OK (module-disk.inc), line = 112
  1351
  1352 8A77 AD 48 91			lda DIRPAGEBEGIN+1
  1353 8A7A 30 26			jmi l_04B4
  1354 8A7C 0D 47 91			ora DIRPAGEBEGIN
  1355 8A7F F0 21			jeq l_04B4
  1356
  1357 				; optimize OK (module-disk.inc), line = 113
  1358
  1359 8A81 A9 1B			lda #$1B
  1360 8A83 8D 9C EB			sta ADDBUTTON.X
  1361 8A86 A9 29			lda #$29
  1362 8A88 8D 9D EB			sta ADDBUTTON.Y
  1363 8A8B A9 78			lda #$78
  1364 8A8D 8D 9E EB			sta ADDBUTTON.CAP
  1365 8A90 A9 81			lda #$81
  1366 8A92 8D 9F EB			sta ADDBUTTON.CAP+1
  1367 8A95 A9 2E			lda <DOPREVPAGEDIR
  1368 8A97 8D A0 EB			sta ADDBUTTON.PRC
  1369 8A9A A9 88			lda >DOPREVPAGEDIR
  1370 8A9C 8D A1 EB			sta ADDBUTTON.PRC+1
  1371 8A9F 20 3C E7			jsr ADDBUTTON
  1372 8AA2			l_04B4
  1373
  1374 				; optimize OK (module-disk.inc), line = 114
  1375
  1376 8AA2 AD 34 91			lda SYSTEM.IORESULT
  1377 8AA5 C9 03			cmp #$03
  1378 8AA7 B0 24			jcs l_04CD
  1379
  1380 				; optimize OK (module-disk.inc), line = 116
  1381
  1382 8AA9 A9 23			lda #$23
  1383 8AAB 8D 9C EB			sta ADDBUTTON.X
  1384 8AAE A9 29			lda #$29
  1385 8AB0 8D 9D EB			sta ADDBUTTON.Y
  1386 8AB3 A9 7D			lda #$7D
  1387 8AB5 8D 9E EB			sta ADDBUTTON.CAP
  1388 8AB8 A9 81			lda #$81
  1389 8ABA 8D 9F EB			sta ADDBUTTON.CAP+1
  1390 8ABD A9 40			lda <DONEXTPAGEDIR
  1391 8ABF 8D A0 EB			sta ADDBUTTON.PRC
  1392 8AC2 A9 88			lda >DONEXTPAGEDIR
  1393 8AC4 8D A1 EB			sta ADDBUTTON.PRC+1
  1394 8AC7 20 3C E7			jsr ADDBUTTON
  1395
  1396 				; optimize FAIL ('CLEARSTATUS', module-disk.inc), line = 117
  1397
  1398 8ACA 20 A2 E5			jsr CLEARSTATUS
  1399 8ACD			l_0441
  1400 8ACD			l_04CD
  1401 8ACD			l_049B
  1402
  1403 				; optimize OK (module-disk.inc), line = 121
  1404
  1405 8ACD A9 01			lda #$01
  1406 8ACF 20 FD 83			jsr CIO.CLS
  1407
  1408 				; optimize OK (module-disk.inc), line = 122
  1409
  1410 8AD2 A9 00			lda #$00
  1411 8AD4 85 88			sta CURSOR.SETPIVOT.X
  1412 8AD6 85 8C			sta CURSOR.SETPIVOT.Y
  1413 8AD8 20 35 84			jsr CURSOR.SETPIVOT
  1414 8ADB A9 AB			lda #$AB
  1415 8ADD 85 88			sta CURSOR.SETCURSOR.SPR
  1416 8ADF A9 81			lda #$81
  1417 8AE1 85 89			sta CURSOR.SETCURSOR.SPR+1
  1418 8AE3 20 20 84			jsr CURSOR.SETCURSOR
  1419
  1420 				; ------------------------------------------------------------
  1421
  1422 = 9230			N	= DATAORIGIN+$0103
  1423 = 9231			J	= DATAORIGIN+$0104
  1424 = 9232			DIRSEEK	= DATAORIGIN+$0105
  1425
  1426 = 9230			@VarData	= N
  1427 = 0004			@VarDataSize	= 4
  1428
  1429 8AE6			@exit
  1430 					.ifdef @new
  1431 					lda <@VarData
  1432 					sta :ztmp
  1433 					lda >@VarData
  1434 					ldy #@VarDataSize-1
  1435 					jmp @FreeMem
  1436 					els
  1437 8AE6 60				rts						; ret
  1438 					eif
  1439 				.endl
  1440
  1441 8AE7			.local	STARTDIRECTORY					; PROCEDURE
  1442
  1443 				; optimize OK (module-disk.inc), line = 127
  1444
  1445 8AE7 A9 00			lda #$00
  1446 8AE9 8D 47 91			sta DIRPAGEBEGIN
  1447 8AEC 8D 48 91			sta DIRPAGEBEGIN+1
  1448
  1449 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 128
  1450
  1451 8AEF 20 52 88			jsr READDIRECTORY
  1452 8AF2			@exit
  1453 					.ifdef @new
  1454 					lda <@VarData
  1455 					sta :ztmp
  1456 					lda >@VarData
  1457 					ldy #@VarDataSize-1
  1458 					jmp @FreeMem
  1459 					els
  1460 8AF2 60				rts						; ret
  1461 					eif
  1462 				.endl
  1463
  1464 8AF3			.local	DOFILENAME					; PROCEDURE
  1465
  1466 				; optimize OK (module-disk.inc), line = 133
  1467
  1468 8AF3 AD 16 91			lda FN
  1469 8AF6 8D AB EB			sta DOINPUT.VALUE
  1470 8AF9 AD 17 91			lda FN+1
  1471 8AFC 8D AC EB			sta DOINPUT.VALUE+1
  1472 8AFF 20 E7 E7			jsr DOINPUT
  1473 8B02			@exit
  1474 					.ifdef @new
  1475 					lda <@VarData
  1476 					sta :ztmp
  1477 					lda >@VarData
  1478 					ldy #@VarDataSize-1
  1479 					jmp @FreeMem
  1480 					els
  1481 8B02 60				rts						; ret
  1482 					eif
  1483 				.endl
  1484
  1485 8B03			.local	DODEVICE					; PROCEDURE
  1486
  1487 				; optimize OK (module-disk.inc), line = 138
  1488
  1489 8B03 AD 14 91			lda DEV
  1490 8B06 8D AB EB			sta DOINPUT.VALUE
  1491 8B09 AD 15 91			lda DEV+1
  1492 8B0C 8D AC EB			sta DOINPUT.VALUE+1
  1493 8B0F 20 E7 E7			jsr DOINPUT
  1494 8B12 AD AD EB			lda DOINPUT.RESULT
  1495 8B15 30 03			jmi l_0504
  1496 8B17 20 E7 8A			jsr STARTDIRECTORY
  1497 8B1A			l_0504
  1498 8B1A			@exit
  1499 					.ifdef @new
  1500 					lda <@VarData
  1501 					sta :ztmp
  1502 					lda >@VarData
  1503 					ldy #@VarDataSize-1
  1504 					jmp @FreeMem
  1505 					els
  1506 8B1A 60				rts						; ret
  1507 					eif
  1508 				.endl
  1509
  1510 8B1B			.local	SHOWDISKDIRECTORY				; PROCEDURE
  1511
  1512 				; optimize OK (module-disk.inc), line = 143
  1513
  1514 8B1B AD 46 91			lda CURMODULE
  1515 8B1E D0 03 4C F4 8B		jeq @exit
  1516 8B23			l_051E
  1517
  1518 				; optimize OK (module-disk.inc), line = 144
  1519
  1520 8B23 A9 00			lda #$00
  1521 8B25 20 F9 8D			jsr SETMODULE
  1522
  1523 				; optimize OK (module-disk.inc), line = 145
  1524
  1525 8B28 AD 82 06			lda adr.YSCR+$82
  1526 8B2B 85 82			sta :bp2
  1527 8B2D AD 83 06			lda adr.YSCR+1+$82
  1528 8B30 85 83			sta :bp2+1
  1529 8B32 A9 FF			lda #$FF
  1530 8B34 A0 13			ldy #$13
  1531 8B36 91 82 88 10 FB		sta:rpl (:bp2),y-
  1532
  1533 				; optimize OK (module-disk.inc), line = 146
  1534
  1535 8B3B A9 14			lda #$14
  1536 8B3D 20 09 E1			jsr SETSCREENWIDTH
  1537
  1538 				; optimize OK (module-disk.inc), line = 147
  1539
  1540 8B40 A9 01			lda #$01
  1541 8B42 8D A3 EB			sta ADDINPUT.X
  1542 8B45 8D A4 EB			sta ADDINPUT.Y
  1543 8B48 A9 04			lda #$04
  1544 8B4A 8D A5 EB			sta ADDINPUT.W
  1545 8B4D AD 14 91			lda DEV
  1546 8B50 8D A6 EB			sta ADDINPUT.VALUE
  1547 8B53 AD 15 91			lda DEV+1
  1548 8B56 8D A7 EB			sta ADDINPUT.VALUE+1
  1549 8B59 A9 03			lda <DODEVICE
  1550 8B5B 8D A8 EB			sta ADDINPUT.PRC
  1551 8B5E A9 8B			lda >DODEVICE
  1552 8B60 8D A9 EB			sta ADDINPUT.PRC+1
  1553 8B63 20 95 E7			jsr ADDINPUT
  1554
  1555 				; optimize OK (module-disk.inc), line = 148
  1556
  1557 8B66 A9 07			lda #$07
  1558 8B68 8D A3 EB			sta ADDINPUT.X
  1559 8B6B A9 01			lda #$01
  1560 8B6D 8D A4 EB			sta ADDINPUT.Y
  1561 8B70 A9 0C			lda #$0C
  1562 8B72 8D A5 EB			sta ADDINPUT.W
  1563 8B75 AD 16 91			lda FN
  1564 8B78 8D A6 EB			sta ADDINPUT.VALUE
  1565 8B7B AD 17 91			lda FN+1
  1566 8B7E 8D A7 EB			sta ADDINPUT.VALUE+1
  1567 8B81 A9 F3			lda <DOFILENAME
  1568 8B83 8D A8 EB			sta ADDINPUT.PRC
  1569 8B86 A9 8A			lda >DOFILENAME
  1570 8B88 8D A9 EB			sta ADDINPUT.PRC+1
  1571 8B8B 20 95 E7			jsr ADDINPUT
  1572
  1573 				; optimize OK (module-disk.inc), line = 149
  1574
  1575 8B8E A9 15			lda #$15
  1576 8B90 8D 9C EB			sta ADDBUTTON.X
  1577 8B93 A9 01			lda #$01
  1578 8B95 8D 9D EB			sta ADDBUTTON.Y
  1579 8B98 A9 82			lda #$82
  1580 8B9A 8D 9E EB			sta ADDBUTTON.CAP
  1581 8B9D A9 81			lda #$81
  1582 8B9F 8D 9F EB			sta ADDBUTTON.CAP+1
  1583 8BA2 A9 57			lda <NULLPROC
  1584 8BA4 8D A0 EB			sta ADDBUTTON.PRC
  1585 8BA7 A9 E1			lda >NULLPROC
  1586 8BA9 8D A1 EB			sta ADDBUTTON.PRC+1
  1587 8BAC 20 3C E7			jsr ADDBUTTON
  1588
  1589 				; optimize OK (module-disk.inc), line = 150
  1590
  1591 8BAF A9 1B			lda #$1B
  1592 8BB1 8D 9C EB			sta ADDBUTTON.X
  1593 8BB4 A9 01			lda #$01
  1594 8BB6 8D 9D EB			sta ADDBUTTON.Y
  1595 8BB9 A9 87			lda #$87
  1596 8BBB 8D 9E EB			sta ADDBUTTON.CAP
  1597 8BBE A9 81			lda #$81
  1598 8BC0 8D 9F EB			sta ADDBUTTON.CAP+1
  1599 8BC3 A9 57			lda <NULLPROC
  1600 8BC5 8D A0 EB			sta ADDBUTTON.PRC
  1601 8BC8 A9 E1			lda >NULLPROC
  1602 8BCA 8D A1 EB			sta ADDBUTTON.PRC+1
  1603 8BCD 20 3C E7			jsr ADDBUTTON
  1604
  1605 				; optimize OK (module-disk.inc), line = 151
  1606
  1607 8BD0 A9 21			lda #$21
  1608 8BD2 8D 9C EB			sta ADDBUTTON.X
  1609 8BD5 A9 01			lda #$01
  1610 8BD7 8D 9D EB			sta ADDBUTTON.Y
  1611 8BDA A9 8C			lda #$8C
  1612 8BDC 8D 9E EB			sta ADDBUTTON.CAP
  1613 8BDF A9 81			lda #$81
  1614 8BE1 8D 9F EB			sta ADDBUTTON.CAP+1
  1615 8BE4 A9 57			lda <NULLPROC
  1616 8BE6 8D A0 EB			sta ADDBUTTON.PRC
  1617 8BE9 A9 E1			lda >NULLPROC
  1618 8BEB 8D A1 EB			sta ADDBUTTON.PRC+1
  1619 8BEE 20 3C E7			jsr ADDBUTTON
  1620
  1621 				; optimize FAIL ('STARTDIRECTORY', module-disk.inc), line = 152
  1622
  1623 8BF1 20 E7 8A			jsr STARTDIRECTORY
  1624 8BF4			@exit
  1625 					.ifdef @new
  1626 					lda <@VarData
  1627 					sta :ztmp
  1628 					lda >@VarData
  1629 					ldy #@VarDataSize-1
  1630 					jmp @FreeMem
  1631 					els
  1632 8BF4 60				rts						; ret
  1633 					eif
  1634 				.endl
  1635
  1636 8BF5			.local	SHOWPATHEDITOR					; PROCEDURE
  1637
  1638 				; optimize OK (module-path.inc), line = 3
  1639
  1640 8BF5 AD 46 91			lda CURMODULE
  1641 8BF8 C9 01			cmp #$01
  1642 8BFA D0 03 4C 4F 8D		jeq @exit
  1643 8BFF			l_055A
  1644
  1645 				; optimize OK (module-path.inc), line = 4
  1646
  1647 8BFF A9 01			lda #$01
  1648 8C01 20 F9 8D			jsr SETMODULE
  1649
  1650 				; optimize OK (module-path.inc), line = 6
  1651
  1652 8C04 A9 03			lda #$03
  1653 8C06 8D 6F EB			sta ADDZONEN.N
  1654 8C09 A9 01			lda #$01
  1655 8C0B 8D 70 EB			sta ADDZONEN.X
  1656 8C0E A9 37			lda #$37
  1657 8C10 8D 71 EB			sta ADDZONEN.Y
  1658 8C13 A9 03			lda #$03
  1659 8C15 8D 72 EB			sta ADDZONEN.W
  1660 8C18 A9 07			lda #$07
  1661 8C1A 8D 73 EB			sta ADDZONEN.H
  1662 8C1D A9 57			lda <NULLPROC
  1663 8C1F 8D 74 EB			sta ADDZONEN.PRC
  1664 8C22 A9 E1			lda >NULLPROC
  1665 8C24 8D 75 EB			sta ADDZONEN.PRC+1
  1666 8C27 20 23 E2			jsr ADDZONEN
  1667
  1668 				; optimize OK (module-path.inc), line = 7
  1669
  1670 8C2A A9 04			lda #$04
  1671 8C2C 8D 81 EB			sta ADDZONEHN.N
  1672 8C2F A9 57			lda <NULLPROC
  1673 8C31 8D 82 EB			sta ADDZONEHN.PRC
  1674 8C34 A9 E1			lda >NULLPROC
  1675 8C36 8D 83 EB			sta ADDZONEHN.PRC+1
  1676 8C39 20 D8 E2			jsr ADDZONEHN
  1677
  1678 				; optimize OK (module-path.inc), line = 8
  1679
  1680 8C3C A9 05			lda #$05
  1681 8C3E 8D 81 EB			sta ADDZONEHN.N
  1682 8C41 A9 57			lda <NULLPROC
  1683 8C43 8D 82 EB			sta ADDZONEHN.PRC
  1684 8C46 A9 E1			lda >NULLPROC
  1685 8C48 8D 83 EB			sta ADDZONEHN.PRC+1
  1686 8C4B 20 D8 E2			jsr ADDZONEHN
  1687
  1688 				; optimize OK (module-path.inc), line = 9
  1689
  1690 8C4E A9 06			lda #$06
  1691 8C50 8D 81 EB			sta ADDZONEHN.N
  1692 8C53 A9 57			lda <NULLPROC
  1693 8C55 8D 82 EB			sta ADDZONEHN.PRC
  1694 8C58 A9 E1			lda >NULLPROC
  1695 8C5A 8D 83 EB			sta ADDZONEHN.PRC+1
  1696 8C5D 20 D8 E2			jsr ADDZONEHN
  1697
  1698 				; optimize OK (module-path.inc), line = 11
  1699
  1700 8C60 A9 07			lda #$07
  1701 8C62 8D 6F EB			sta ADDZONEN.N
  1702 8C65 A9 0F			lda #$0F
  1703 8C67 8D 70 EB			sta ADDZONEN.X
  1704 8C6A A9 37			lda #$37
  1705 8C6C 8D 71 EB			sta ADDZONEN.Y
  1706 8C6F A9 03			lda #$03
  1707 8C71 8D 72 EB			sta ADDZONEN.W
  1708 8C74 A9 07			lda #$07
  1709 8C76 8D 73 EB			sta ADDZONEN.H
  1710 8C79 A9 57			lda <NULLPROC
  1711 8C7B 8D 74 EB			sta ADDZONEN.PRC
  1712 8C7E A9 E1			lda >NULLPROC
  1713 8C80 8D 75 EB			sta ADDZONEN.PRC+1
  1714 8C83 20 23 E2			jsr ADDZONEN
  1715
  1716 				; optimize OK (module-path.inc), line = 12
  1717
  1718 8C86 A9 08			lda #$08
  1719 8C88 8D 81 EB			sta ADDZONEHN.N
  1720 8C8B A9 57			lda <NULLPROC
  1721 8C8D 8D 82 EB			sta ADDZONEHN.PRC
  1722 8C90 A9 E1			lda >NULLPROC
  1723 8C92 8D 83 EB			sta ADDZONEHN.PRC+1
  1724 8C95 20 D8 E2			jsr ADDZONEHN
  1725
  1726 				; optimize OK (module-path.inc), line = 14
  1727
  1728 8C98 A9 FF			lda #$FF
  1729 8C9A 20 D6 E6			jsr SETCONTROL
  1730
  1731 				; optimize OK (module-path.inc), line = 15
  1732
  1733 8C9D A9 2C			lda #$2C
  1734 8C9F 8D 02 D0			sta adr.HPOSP+$02
  1735 8CA2 A9 E6			lda #$E6
  1736 8CA4 8D C2 02			sta adr.PCOL+$02
  1737 8CA7 A9 03			lda #$03
  1738 8CA9 8D 0A D0			sta adr.SIZEP+$02
  1739
  1740 				; optimize OK (module-path.inc), line = 16
  1741
  1742 8CAC A9 14			lda #$14
  1743 8CAE 20 09 E1			jsr SETSCREENWIDTH
  1744
  1745 				; optimize OK (module-path.inc), line = 17
  1746
  1747 8CB1 AD 32 EA			lda _IPATH
  1748 8CB4 85 88			sta PUTIMAGE.ADR
  1749 8CB6 AD 33 EA			lda _IPATH+1
  1750 8CB9 85 89			sta PUTIMAGE.ADR+1
  1751 8CBB A9 00			lda #$00
  1752 8CBD 85 8C			sta PUTIMAGE.X
  1753 8CBF 85 84			sta PUTIMAGE.Y
  1754 8CC1 A9 03			lda #$03
  1755 8CC3 8D 59 EB			sta PUTIMAGE.WIDTH
  1756 8CC6 A9 30			lda #$30
  1757 8CC8 8D 5A EB			sta PUTIMAGE.HEIGHT
  1758 8CCB 20 04 DC			jsr PUTIMAGE
  1759
  1760 				; optimize OK (module-path.inc), line = 19
  1761
  1762 8CCE A9 00			lda #$00
  1763 8CD0 8D 77 EB			sta ADDZONE.X
  1764 8CD3 8D 78 EB			sta ADDZONE.Y
  1765 8CD6 A9 03			lda #$03
  1766 8CD8 8D 79 EB			sta ADDZONE.W
  1767 8CDB A9 0C			lda #$0C
  1768 8CDD 8D 7A EB			sta ADDZONE.H
  1769 8CE0 A9 57			lda <NULLPROC
  1770 8CE2 8D 7B EB			sta ADDZONE.PRC
  1771 8CE5 A9 E1			lda >NULLPROC
  1772 8CE7 8D 7C EB			sta ADDZONE.PRC+1
  1773 8CEA 20 73 E2			jsr ADDZONE
  1774
  1775 				; optimize OK (module-path.inc), line = 20
  1776
  1777 8CED A9 57			lda <NULLPROC
  1778 8CEF 8D 85 EB			sta ADDZONEV.PRC
  1779 8CF2 A9 E1			lda >NULLPROC
  1780 8CF4 8D 86 EB			sta ADDZONEV.PRC+1
  1781 8CF7 20 10 E3			jsr ADDZONEV
  1782
  1783 				; optimize OK (module-path.inc), line = 21
  1784
  1785 8CFA A9 57			lda <NULLPROC
  1786 8CFC 8D 85 EB			sta ADDZONEV.PRC
  1787 8CFF A9 E1			lda >NULLPROC
  1788 8D01 8D 86 EB			sta ADDZONEV.PRC+1
  1789 8D04 20 10 E3			jsr ADDZONEV
  1790
  1791 				; optimize OK (module-path.inc), line = 22
  1792
  1793 8D07 A9 57			lda <NULLPROC
  1794 8D09 8D 85 EB			sta ADDZONEV.PRC
  1795 8D0C A9 E1			lda >NULLPROC
  1796 8D0E 8D 86 EB			sta ADDZONEV.PRC+1
  1797 8D11 20 10 E3			jsr ADDZONEV
  1798
  1799 				; optimize OK (module-path.inc), line = 23
  1800
  1801 8D14 A9 03			lda #$03
  1802 8D16 8D 77 EB			sta ADDZONE.X
  1803 8D19 A9 00			lda #$00
  1804 8D1B 8D 78 EB			sta ADDZONE.Y
  1805 8D1E A9 03			lda #$03
  1806 8D20 8D 79 EB			sta ADDZONE.W
  1807 8D23 A9 0C			lda #$0C
  1808 8D25 8D 7A EB			sta ADDZONE.H
  1809 8D28 A9 57			lda <NULLPROC
  1810 8D2A 8D 7B EB			sta ADDZONE.PRC
  1811 8D2D A9 E1			lda >NULLPROC
  1812 8D2F 8D 7C EB			sta ADDZONE.PRC+1
  1813 8D32 20 73 E2			jsr ADDZONE
  1814
  1815 				; optimize OK (module-path.inc), line = 24
  1816
  1817 8D35 A9 57			lda <NULLPROC
  1818 8D37 8D 85 EB			sta ADDZONEV.PRC
  1819 8D3A A9 E1			lda >NULLPROC
  1820 8D3C 8D 86 EB			sta ADDZONEV.PRC+1
  1821 8D3F 20 10 E3			jsr ADDZONEV
  1822
  1823 				; optimize OK (module-path.inc), line = 25
  1824
  1825 8D42 A9 57			lda <NULLPROC
  1826 8D44 8D 85 EB			sta ADDZONEV.PRC
  1827 8D47 A9 E1			lda >NULLPROC
  1828 8D49 8D 86 EB			sta ADDZONEV.PRC+1
  1829 8D4C 20 10 E3			jsr ADDZONEV
  1830 8D4F			@exit
  1831 					.ifdef @new
  1832 					lda <@VarData
  1833 					sta :ztmp
  1834 					lda >@VarData
  1835 					ldy #@VarDataSize-1
  1836 					jmp @FreeMem
  1837 					els
  1838 8D4F 60				rts						; ret
  1839 					eif
  1840 				.endl
  1841
  1842 8D50			.local	SHOWSCENARIOEDITOR				; PROCEDURE
  1843
  1844 				; optimize OK (module-scenario.inc), line = 3
  1845
  1846 8D50 AD 46 91			lda CURMODULE
  1847 8D53 C9 02			cmp #$02
  1848 8D55 D0 03 4C F8 8D		jeq @exit
  1849 8D5A			l_05B2
  1850
  1851 				; optimize OK (module-scenario.inc), line = 4
  1852
  1853 8D5A A9 02			lda #$02
  1854 8D5C 20 F9 8D			jsr SETMODULE
  1855
  1856 				; optimize OK (module-scenario.inc), line = 5
  1857
  1858 8D5F A9 03			lda #$03
  1859 8D61 8D 6F EB			sta ADDZONEN.N
  1860 8D64 A9 01			lda #$01
  1861 8D66 8D 70 EB			sta ADDZONEN.X
  1862 8D69 A9 37			lda #$37
  1863 8D6B 8D 71 EB			sta ADDZONEN.Y
  1864 8D6E A9 03			lda #$03
  1865 8D70 8D 72 EB			sta ADDZONEN.W
  1866 8D73 A9 07			lda #$07
  1867 8D75 8D 73 EB			sta ADDZONEN.H
  1868 8D78 A9 57			lda <NULLPROC
  1869 8D7A 8D 74 EB			sta ADDZONEN.PRC
  1870 8D7D A9 E1			lda >NULLPROC
  1871 8D7F 8D 75 EB			sta ADDZONEN.PRC+1
  1872 8D82 20 23 E2			jsr ADDZONEN
  1873
  1874 				; optimize OK (module-scenario.inc), line = 6
  1875
  1876 8D85 A9 04			lda #$04
  1877 8D87 8D 81 EB			sta ADDZONEHN.N
  1878 8D8A A9 57			lda <NULLPROC
  1879 8D8C 8D 82 EB			sta ADDZONEHN.PRC
  1880 8D8F A9 E1			lda >NULLPROC
  1881 8D91 8D 83 EB			sta ADDZONEHN.PRC+1
  1882 8D94 20 D8 E2			jsr ADDZONEHN
  1883
  1884 				; optimize OK (module-scenario.inc), line = 7
  1885
  1886 8D97 A9 05			lda #$05
  1887 8D99 8D 81 EB			sta ADDZONEHN.N
  1888 8D9C A9 57			lda <NULLPROC
  1889 8D9E 8D 82 EB			sta ADDZONEHN.PRC
  1890 8DA1 A9 E1			lda >NULLPROC
  1891 8DA3 8D 83 EB			sta ADDZONEHN.PRC+1
  1892 8DA6 20 D8 E2			jsr ADDZONEHN
  1893
  1894 				; optimize OK (module-scenario.inc), line = 8
  1895
  1896 8DA9 A9 06			lda #$06
  1897 8DAB 8D 81 EB			sta ADDZONEHN.N
  1898 8DAE A9 57			lda <NULLPROC
  1899 8DB0 8D 82 EB			sta ADDZONEHN.PRC
  1900 8DB3 A9 E1			lda >NULLPROC
  1901 8DB5 8D 83 EB			sta ADDZONEHN.PRC+1
  1902 8DB8 20 D8 E2			jsr ADDZONEHN
  1903
  1904 				; optimize OK (module-scenario.inc), line = 10
  1905
  1906 8DBB A9 07			lda #$07
  1907 8DBD 8D 6F EB			sta ADDZONEN.N
  1908 8DC0 A9 0F			lda #$0F
  1909 8DC2 8D 70 EB			sta ADDZONEN.X
  1910 8DC5 A9 37			lda #$37
  1911 8DC7 8D 71 EB			sta ADDZONEN.Y
  1912 8DCA A9 03			lda #$03
  1913 8DCC 8D 72 EB			sta ADDZONEN.W
  1914 8DCF A9 07			lda #$07
  1915 8DD1 8D 73 EB			sta ADDZONEN.H
  1916 8DD4 A9 57			lda <NULLPROC
  1917 8DD6 8D 74 EB			sta ADDZONEN.PRC
  1918 8DD9 A9 E1			lda >NULLPROC
  1919 8DDB 8D 75 EB			sta ADDZONEN.PRC+1
  1920 8DDE 20 23 E2			jsr ADDZONEN
  1921
  1922 				; optimize OK (module-scenario.inc), line = 11
  1923
  1924 8DE1 A9 08			lda #$08
  1925 8DE3 8D 81 EB			sta ADDZONEHN.N
  1926 8DE6 A9 57			lda <NULLPROC
  1927 8DE8 8D 82 EB			sta ADDZONEHN.PRC
  1928 8DEB A9 E1			lda >NULLPROC
  1929 8DED 8D 83 EB			sta ADDZONEHN.PRC+1
  1930 8DF0 20 D8 E2			jsr ADDZONEHN
  1931
  1932 				; optimize OK (module-scenario.inc), line = 12
  1933
  1934 8DF3 A9 FF			lda #$FF
  1935 8DF5 20 D6 E6			jsr SETCONTROL
  1936 8DF8			@exit
  1937 					.ifdef @new
  1938 					lda <@VarData
  1939 					sta :ztmp
  1940 					lda >@VarData
  1941 					ldy #@VarDataSize-1
  1942 					jmp @FreeMem
  1943 					els
  1944 8DF8 60				rts						; ret
  1945 					eif
  1946 				.endl
  1947
  1948 8DF9			.local	SETMODULE					; PROCEDURE
  1949 8DF9 8D 34 92			sta CM
  1950
  1951 				; optimize OK (module.inc), line = 3
  1952
  1953 8DFC 8D 46 91			sta CURMODULE
  1954
  1955 				; optimize OK (module.inc), line = 4
  1956
  1957 8DFF A9 03			lda #$03
  1958 8E01 85 3E			sta I
  1959
  1960 8E03			l_05E0
  1961 				; --- ForToDoCondition
  1962 8E03 A5 3E			lda I
  1963 8E05 C9 0A			cmp #$0A
  1964 8E07 B0 07			jcs l_05EE
  1965 8E09 20 AB E1			jsr CLEARZONE
  1966
  1967 				; --- ForToDoEpilog
  1968 8E0C E6 3E			inc I
  1969 8E0E D0 F3			jne l_05E0
  1970 8E10			l_05EE
  1971
  1972 				; optimize OK (module.inc), line = 5
  1973
  1974 8E10 A9 01			lda #$01
  1975 8E12 8D 00 05			sta adr._MZONEACTIVE
  1976
  1977 				; optimize OK (module.inc), line = 6
  1978
  1979 8E15 8D 01 05			sta adr._MZONEACTIVE+$01
  1980
  1981 				; optimize OK (module.inc), line = 7
  1982
  1983 8E18 8D 02 05			sta adr._MZONEACTIVE+$02
  1984
  1985 				; optimize OK (module.inc), line = 8
  1986
  1987 8E1B AD D0 06			lda adr.YSCR+$D0
  1988 8E1E 85 88			sta SYSTEM.FILLCHAR.@01ED.A
  1989 8E20 AD D1 06			lda adr.YSCR+1+$D0
  1990 8E23 85 89			sta SYSTEM.FILLCHAR.@01ED.A+1
  1991 8E25 A9 58			lda #$58
  1992 8E27 85 8C			sta SYSTEM.FILLCHAR.@01ED.COUNT
  1993 8E29 A9 02			lda #$02
  1994 8E2B 85 8D			sta SYSTEM.FILLCHAR.@01ED.COUNT+1
  1995 8E2D A9 00			lda #$00
  1996 8E2F 85 84			sta SYSTEM.FILLCHAR.@01ED.VALUE
  1997 8E31				.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
  1998 8E31				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@01ED.M@INLINE [Source: SIED.a65]
     4 8E31 20 C8 82			jsr @fill
Source: SIED.a65
  1999 					.ENDL
  2000
  2001 				; optimize OK (module.inc), line = 9
  2002
  2003 8E34 A9 00			lda #$00
  2004 8E36 8D 02 D0			sta adr.HPOSP+$02
  2005
  2006 				; optimize OK (module.inc), line = 10
  2007
  2008 8E39 AD 34 92			lda CM
  2009 8E3C 20 DA E5			jsr SETICON
  2010
  2011 				; optimize FAIL ('CLEARSTATUS', module.inc), line = 11
  2012
  2013 8E3F 20 A2 E5			jsr CLEARSTATUS
  2014
  2015 				; optimize FAIL ('CLEARWORKAREA', module.inc), line = 12
  2016
  2017 8E42 20 87 E5			jsr CLEARWORKAREA
  2018
  2019 				; optimize OK (module.inc), line = 13
  2020
  2021 8E45 A0 01			ldy #1
  2022 8E47 AD 34 92			lda CM
  2023 8E4A D0 01			bne @+
  2024 8E4C 88				dey
  2025 				@
  2026 8E4D 98				tya
  2027 8E4E 8D 00 05			sta adr._MZONEACTIVE
  2028
  2029 				; optimize OK (module.inc), line = 14
  2030
  2031 8E51 A0 01			ldy #1
  2032 8E53 AD 34 92			lda CM
  2033 8E56 C9 01			cmp #$01
  2034 8E58 D0 01			bne @+
  2035 8E5A 88				dey
  2036 				@
  2037 8E5B 98				tya
  2038 8E5C 8D 01 05			sta adr._MZONEACTIVE+$01
  2039
  2040 				; optimize OK (module.inc), line = 15
  2041
  2042 8E5F A0 01			ldy #1
  2043 8E61 AD 34 92			lda CM
  2044 8E64 C9 02			cmp #$02
  2045 8E66 D0 01			bne @+
  2046 8E68 88				dey
  2047 				@
  2048 8E69 98				tya
  2049 8E6A 8D 02 05			sta adr._MZONEACTIVE+$02
  2050
  2051 				; ------------------------------------------------------------
  2052
  2053 = 9234			CM	= DATAORIGIN+$0107
  2054
  2055 = 9234			@VarData	= CM
  2056 = 0001			@VarDataSize	= 1
  2057
  2058 8E6D			@exit
  2059 					.ifdef @new
  2060 					lda <@VarData
  2061 					sta :ztmp
  2062 					lda >@VarData
  2063 					ldy #@VarDataSize-1
  2064 					jmp @FreeMem
  2065 					els
  2066 8E6D 60				rts						; ret
  2067 					eif
  2068 				.endl
  2069
  2070 8E6E			.local	INITMODULES					; PROCEDURE
  2071
  2072 				; optimize OK (module.inc), line = 20
  2073
  2074 8E6E A9 00			lda #$00
  2075 8E70 8D 65 EB			sta SETZONE.N
  2076 8E73 8D 66 EB			sta SETZONE.ACT
  2077 8E76 A9 1C			lda #$1C
  2078 8E78 8D 67 EB			sta SETZONE.X
  2079 8E7B A9 31			lda #$31
  2080 8E7D 8D 68 EB			sta SETZONE.Y
  2081 8E80 A9 03			lda #$03
  2082 8E82 8D 69 EB			sta SETZONE.W
  2083 8E85 A9 0F			lda #$0F
  2084 8E87 8D 6A EB			sta SETZONE.H
  2085 8E8A A9 1B			lda <SHOWDISKDIRECTORY
  2086 8E8C 8D 6B EB			sta SETZONE.PRC
  2087 8E8F A9 8B			lda >SHOWDISKDIRECTORY
  2088 8E91 8D 6C EB			sta SETZONE.PRC+1
  2089 8E94 20 58 E1			jsr SETZONE
  2090
  2091 				; optimize OK (module.inc), line = 21
  2092
  2093 8E97 A9 01			lda #$01
  2094 8E99 8D 65 EB			sta SETZONE.N
  2095 8E9C A9 00			lda #$00
  2096 8E9E 8D 66 EB			sta SETZONE.ACT
  2097 8EA1 A9 20			lda #$20
  2098 8EA3 8D 67 EB			sta SETZONE.X
  2099 8EA6 A9 31			lda #$31
  2100 8EA8 8D 68 EB			sta SETZONE.Y
  2101 8EAB A9 03			lda #$03
  2102 8EAD 8D 69 EB			sta SETZONE.W
  2103 8EB0 A9 0F			lda #$0F
  2104 8EB2 8D 6A EB			sta SETZONE.H
  2105 8EB5 A9 F5			lda <SHOWPATHEDITOR
  2106 8EB7 8D 6B EB			sta SETZONE.PRC
  2107 8EBA A9 8B			lda >SHOWPATHEDITOR
  2108 8EBC 8D 6C EB			sta SETZONE.PRC+1
  2109 8EBF 20 58 E1			jsr SETZONE
  2110
  2111 				; optimize OK (module.inc), line = 22
  2112
  2113 8EC2 A9 02			lda #$02
  2114 8EC4 8D 65 EB			sta SETZONE.N
  2115 8EC7 A9 00			lda #$00
  2116 8EC9 8D 66 EB			sta SETZONE.ACT
  2117 8ECC A9 24			lda #$24
  2118 8ECE 8D 67 EB			sta SETZONE.X
  2119 8ED1 A9 31			lda #$31
  2120 8ED3 8D 68 EB			sta SETZONE.Y
  2121 8ED6 A9 03			lda #$03
  2122 8ED8 8D 69 EB			sta SETZONE.W
  2123 8EDB A9 0F			lda #$0F
  2124 8EDD 8D 6A EB			sta SETZONE.H
  2125 8EE0 A9 50			lda <SHOWSCENARIOEDITOR
  2126 8EE2 8D 6B EB			sta SETZONE.PRC
  2127 8EE5 A9 8D			lda >SHOWSCENARIOEDITOR
  2128 8EE7 8D 6C EB			sta SETZONE.PRC+1
  2129 8EEA 20 58 E1			jsr SETZONE
  2130
  2131 				; optimize OK (module.inc), line = 23
  2132
  2133 8EED A9 78			lda #$78
  2134 8EEF 85 3E			sta I
  2135
  2136 8EF1			l_0660
  2137 				; --- ForToDoCondition
  2138 8EF1 A5 3E			lda I
  2139 8EF3 C9 7B			cmp #$7B
  2140 8EF5 B0 1E			jcs l_066E
  2141 8EF7 0A				asl @
  2142 8EF8 A8				tay
  2143 8EF9 B9 00 06			lda adr.YSCR,y
  2144 8EFC 18 69 08			add #$08
  2145 8EFF 85 82			sta :bp2
  2146 8F01 B9 01 06			lda adr.YSCR+1,y
  2147 8F04 69 00			adc #$00
  2148 8F06 85 83			sta :bp2+1
  2149 8F08 A9 55			lda #$55
  2150 8F0A A0 1F			ldy #$1F
  2151 8F0C 91 82 88 10 FB		sta:rpl (:bp2),y-
  2152
  2153 				; --- ForToDoEpilog
  2154 8F11 E6 3E			inc I
  2155 8F13 D0 DC			jne l_0660
  2156 8F15			l_066E
  2157
  2158 				; optimize OK (module.inc), line = 24
  2159
  2160 8F15 A9 00			lda #$00
  2161 8F17 85 88			sta PUTTEXTC.X
  2162 8F19 A9 3F			lda #$3F
  2163 8F1B 85 8C			sta PUTTEXTC.Y
  2164 8F1D A9 93			lda #$93
  2165 8F1F 85 84			sta PUTTEXTC.S
  2166 8F21 A9 81			lda #$81
  2167 8F23 85 85			sta PUTTEXTC.S+1
  2168 8F25 20 19 E0			jsr PUTTEXTC
  2169 8F28 A0 FB			ldy #256-5
  2170 8F2A B9 A1 80 99 31 03 + 	mva:rne CODEORIGIN+$019C+5-256,y adr.FILEMASK+5-256,y+
  2171 8F33 A0 FD			ldy #256-3
  2172 8F35 B9 A4 80 99 03 03 + 	mva:rne CODEORIGIN+$01A1+3-256,y adr.DEV+3-256,y+
  2173 8F3E A0 F9			ldy #256-7
  2174 8F40 B9 AB 80 99 0C 03 + 	mva:rne CODEORIGIN+$01A4+7-256,y adr.FN+7-256,y+
  2175
  2176 				; ------------------------------------------------------------
  2177
  2178 8F49			@exit
  2179 					.ifdef @new
  2180 					lda <@VarData
  2181 					sta :ztmp
  2182 					lda >@VarData
  2183 					ldy #@VarDataSize-1
  2184 					jmp @FreeMem
  2185 					els
  2186 8F49 60				rts						; ret
  2187 					eif
  2188 				.endl
  2189
  2190 8F4A			.local	INITEDITOR					; PROCEDURE
  2191
  2192 				; optimize OK (SIED.pas), line = 44
  2193
  2194 8F4A A9 80			lda #$80
  2195 8F4C 85 79			sta KEYDEFP
  2196 8F4E A9 1F			lda #$1F
  2197 8F50 85 7A			sta KEYDEFP+1
  2198
  2199 				; optimize OK (SIED.pas), line = 45
  2200
  2201 8F52 A9 00			lda #$00
  2202 8F54 85 3E			sta I
  2203
  2204 8F56			l_0694
  2205 				; --- ForToDoCondition
  2206 8F56 A5 3E			lda I
  2207 8F58 C9 38			cmp #$38
  2208 8F5A B0 3D			jcs l_06A2
  2209 8F5C 85 9D			sta :STACKORIGIN+9
  2210 8F5E A9 10			lda #$10
  2211 8F60 85 8C			sta :ecx
  2212 8F62 85 90			sta :ztmp8
  2213 8F64 A5 3E			lda I
  2214 8F66 85 84			sta :eax
  2215 8F68 85 92			sta :ztmp10
  2216 					.ifdef fmulinit
  2217 					fmulu_8
  2218 					els
  2219 8F6A 20 20 83			imulCL
  2220 					eif
  2221 8F6D 38				sec
  2222 8F6E 24 92			bit :ztmp10
  2223 8F70 10 02			bpl @+
  2224 8F72 E5 90			sbc :ztmp8
  2225 				@
  2226 8F74 24 90			bit :ztmp8
  2227 8F76 10 02			bpl @+
  2228 8F78 E5 92			sbc :ztmp10
  2229 				@
  2230 8F7A 85 85			sta :eax+1
  2231 8F7C A5 84			lda :eax
  2232 8F7E 85 9E			sta :STACKORIGIN+10
  2233 8F80 A9 24			lda #$24
  2234 8F82 18 65 85			add :eax+1
  2235 8F85 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  2236 8F87 A5 9D			lda :STACKORIGIN+9
  2237 8F89 0A				asl @
  2238 8F8A A8				tay
  2239 8F8B A5 9E			lda :STACKORIGIN+10
  2240 8F8D 99 00 06			sta adr.YSCR,y
  2241 8F90 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  2242 8F92 99 01 06			sta adr.YSCR+1,y
  2243
  2244 				; --- ForToDoEpilog
  2245 8F95 E6 3E			inc I
  2246 8F97 D0 BD			jne l_0694
  2247 8F99			l_06A2
  2248
  2249 				; optimize OK (SIED.pas), line = 46
  2250
  2251 8F99 A9 00			lda #$00
  2252 8F9B 85 3E			sta I
  2253
  2254 8F9D			l_06C1
  2255 				; --- ForToDoCondition
  2256 8F9D A5 3E			lda I
  2257 8F9F C9 30			cmp #$30
  2258 8FA1 B0 48			jcs l_06CF
  2259 8FA3 A0 00			ldy #$00
  2260 8FA5 A5 3E			lda I
  2261 8FA7 10 01			spl
  2262 8FA9 88				dey
  2263 8FAA 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  2264 8FAC 18 69 38			add #$38
  2265 8FAF 0A				asl @
  2266 8FB0 85 9D			sta :STACKORIGIN+9
  2267 8FB2 A9 14			lda #$14
  2268 8FB4 85 8C			sta :ecx
  2269 8FB6 85 90			sta :ztmp8
  2270 8FB8 A5 3E			lda I
  2271 8FBA 85 84			sta :eax
  2272 8FBC 85 92			sta :ztmp10
  2273 					.ifdef fmulinit
  2274 					fmulu_8
  2275 					els
  2276 8FBE 20 20 83			imulCL
  2277 					eif
  2278 8FC1 38				sec
  2279 8FC2 24 92			bit :ztmp10
  2280 8FC4 10 02			bpl @+
  2281 8FC6 E5 90			sbc :ztmp8
  2282 				@
  2283 8FC8 24 90			bit :ztmp8
  2284 8FCA 10 02			bpl @+
  2285 8FCC E5 92			sbc :ztmp10
  2286 				@
  2287 8FCE 85 85			sta :eax+1
  2288 8FD0 A5 84			lda :eax
  2289 8FD2 85 9E			sta :STACKORIGIN+10
  2290 8FD4 A9 28			lda #$28
  2291 8FD6 18 65 85			add :eax+1
  2292 8FD9 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  2293 8FDB A4 9D			ldy :STACKORIGIN+9
  2294 8FDD A5 9E			lda :STACKORIGIN+10
  2295 8FDF 99 00 06			sta adr.YSCR,y
  2296 8FE2 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  2297 8FE4 99 01 06			sta adr.YSCR+1,y
  2298
  2299 				; --- ForToDoEpilog
  2300 8FE7 E6 3E			inc I
  2301 8FE9 D0 B2			jne l_06C1
  2302 8FEB			l_06CF
  2303
  2304 				; optimize OK (SIED.pas), line = 47
  2305
  2306 8FEB A9 00			lda #$00
  2307 8FED 85 3E			sta I
  2308
  2309 8FEF			l_06F2
  2310 				; --- ForToDoCondition
  2311 8FEF A5 3E			lda I
  2312 8FF1 C9 18			cmp #$18
  2313 8FF3 B0 4E			jcs l_0700
  2314 8FF5 A9 68			lda #$68
  2315 8FF7 85 9D			sta :STACKORIGIN+9
  2316 8FF9 A0 00			ldy #$00
  2317 8FFB A5 3E			lda I
  2318 8FFD 10 01			spl
  2319 8FFF 88				dey
  2320 9000 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  2321 9002 18 65 9D			add :STACKORIGIN+9
  2322 9005 0A				asl @
  2323 9006 85 9D			sta :STACKORIGIN+9
  2324 9008 A9 C0			lda #$C0
  2325 900A 85 9E			sta :STACKORIGIN+10
  2326 900C A9 2B			lda #$2B
  2327 900E 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  2328 9010 A9 28			lda #$28
  2329 9012 85 8C			sta :ecx
  2330 9014 85 90			sta :ztmp8
  2331 9016 A5 3E			lda I
  2332 9018 85 84			sta :eax
  2333 901A 85 92			sta :ztmp10
  2334 					.ifdef fmulinit
  2335 					fmulu_8
  2336 					els
  2337 901C 20 20 83			imulCL
  2338 					eif
  2339 901F 38				sec
  2340 9020 24 92			bit :ztmp10
  2341 9022 10 02			bpl @+
  2342 9024 E5 90			sbc :ztmp8
  2343 				@
  2344 9026 24 90			bit :ztmp8
  2345 9028 10 02			bpl @+
  2346 902A E5 92			sbc :ztmp10
  2347 				@
  2348 902C 85 85			sta :eax+1
  2349 902E A4 9D			ldy :STACKORIGIN+9
  2350 9030 A5 9E			lda :STACKORIGIN+10
  2351 9032 18 65 84			add :eax
  2352 9035 99 00 06			sta adr.YSCR,y
  2353 9038 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  2354 903A 65 85			adc :eax+1
  2355 903C 99 01 06			sta adr.YSCR+1,y
  2356
  2357 				; --- ForToDoEpilog
  2358 903F E6 3E			inc I
  2359 9041 D0 AC			jne l_06F2
  2360 9043			l_0700
  2361
  2362 				; optimize OK (SIED.pas), line = 48
  2363
  2364 9043 A9 00			lda #$00
  2365 9045 85 88			sta SYSTEM.FILLCHAR.@01ED.A
  2366 9047 A9 20			lda #$20
  2367 9049 85 89			sta SYSTEM.FILLCHAR.@01ED.A+1
  2368 904B A9 00			lda #$00
  2369 904D 85 8C			sta SYSTEM.FILLCHAR.@01ED.COUNT
  2370 904F A9 10			lda #$10
  2371 9051 85 8D			sta SYSTEM.FILLCHAR.@01ED.COUNT+1
  2372 9053 A9 00			lda #$00
  2373 9055 85 84			sta SYSTEM.FILLCHAR.@01ED.VALUE
  2374 9057				.LOCAL +MAIN.SYSTEM.FILLCHAR.@01ED
  2375 9057				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@01ED.M@INLINE [Source: SIED.a65]
     4 9057 20 C8 82			jsr @fill
Source: SIED.a65
  2376 					.ENDL
  2377
  2378 				; optimize OK (SIED.pas), line = 49
  2379
  2380 905A A9 FF			lda #$FF
  2381 905C A0 31			ldy #$31
  2382 905E 99 17 23 88 10 FA		sta:rpl $2317,y-
  2383
  2384 				; optimize OK (SIED.pas), line = 50
  2385
  2386 9064 A9 01			lda #$01
  2387 9066 85 D4			sta ACTIVEPAGE
  2388
  2389 				; optimize OK (SIED.pas), line = 51
  2390
  2391 9068 A9 00			lda #$00
  2392 906A 8D 2F 02			sta SDMACTL
  2393
  2394 				; -------------------  ASM Block 00000077  -------------------
  2395
  2396 906D A5 14		    lda $14
  2397 906F C5 14		    cmp $14
  2398 9071 F0 FC		    beq *-2
  2399 				  
  2400 				; -------------------  ASM Block 00000078  -------------------
  2401
  2402 9073 78			 sei; 
  2403 				; optimize OK (SIED.pas), line = 59
  2404
  2405 9074 A9 ED 8D 00 02		mva <MYDLI VDSLST
  2406 9079 A9 85 8D 01 02		mva >MYDLI VDSLST+1
  2407
  2408 				; optimize OK (SIED.pas), line = 60
  2409
  2410 907E A9 C0			lda #$C0
  2411 9080 8D 0E D4			sta NMIEN
  2412
  2413 				; -------------------  ASM Block 00000079  -------------------
  2414
  2415 9083 58			 cli; 
  2416 				; optimize OK (SIED.pas), line = 62
  2417
  2418 9084 A9 C0			lda #$C0
  2419 9086 8D 30 02			sta SDLST
  2420 9089 A9 81			lda #$81
  2421 908B 8D 31 02			sta SDLST+1
  2422
  2423 				; optimize OK (SIED.pas), line = 63
  2424
  2425 908E A9 EA			lda #$EA
  2426 9090 8D C4 02			sta PFCOL0
  2427 9093 A9 00			lda #$00
  2428 9095 8D C5 02			sta PFCOL1
  2429 9098 A9 0F			lda #$0F
  2430 909A 8D C6 02			sta PFCOL2
  2431 909D A9 E0			lda #$E0
  2432 909F 8D C8 02			sta PFCOL4
  2433
  2434 				; optimize OK (SIED.pas), line = 64
  2435
  2436 90A2 A9 0A			lda #$0A
  2437 90A4 8D D9 02			sta KRPDEL
  2438 90A7 A9 01			lda #$01
  2439 90A9 8D DA 02			sta KEYREP
  2440
  2441 				; optimize FAIL ('CURSOR.INITCURSOR', SIED.pas), line = 66
  2442
  2443 90AC 20 8E 85			jsr CURSOR.INITCURSOR
  2444
  2445 				; optimize FAIL ('INITINTERFACE', SIED.pas), line = 67
  2446
  2447 90AF 20 E6 E1			jsr INITINTERFACE
  2448
  2449 				; optimize FAIL ('INITMODULES', SIED.pas), line = 68
  2450
  2451 90B2 20 6E 8E			jsr INITMODULES
  2452
  2453 				; optimize FAIL ('SHOWABOUT', SIED.pas), line = 69
  2454
  2455 90B5 20 FE 86			jsr SHOWABOUT
  2456
  2457 				; ------------------------------------------------------------
  2458
  2459 = 0079			KEYDEFP	= $79
  2460 90B8			@exit
  2461 					.ifdef @new
  2462 					lda <@VarData
  2463 					sta :ztmp
  2464 					lda >@VarData
  2465 					ldy #@VarDataSize-1
  2466 					jmp @FreeMem
  2467 					els
  2468 90B8 60				rts						; ret
  2469 					eif
  2470 				.endl
  2471 90B9			l_01AF
  2472
  2473 				; optimize FAIL ('INITEDITOR', SIED.pas), line = 73
  2474
  2475 90B9 20 4A 8F			jsr INITEDITOR
  2476
  2477 				; --- WhileProlog
  2478 90BC 4C DA 90			jmp l_075A
  2479 90BF			l_075B
  2480
  2481 				; optimize FAIL ('CHECKZONES', SIED.pas), line = 76
  2482
  2483 90BF 20 7A E3			jsr CHECKZONES
  2484 90C2 AD 8C EB			lda CHECKZONES.RESULT
  2485 90C5 F0 13			jeq l_0765
  2486
  2487 				; -------------------  ASM Block 00000080  -------------------
  2488
  2489 90C7 A5 50		        lda szone
  2490 90C9 0A			        asl @
  2491 90CA A8			        tay
  2492 90CB B9 A0 05		        lda adr._mzonePROC,y
  2493 90CE 8D D8 90		        sta jaddr
  2494 90D1 B9 A1 05		        lda adr._mzonePROC+1,y
  2495 90D4 8D D9 90		        sta jaddr+1
  2496 90D7 20 FF FF		        jsr jaddr:$ffff
  2497 				      
  2498 90DA			l_0765
  2499 90DA			l_075A
  2500
  2501 				; optimize OK (SIED.pas), line = 74
  2502
  2503 90DA 4C BF 90			jmp l_075B
  2504
  2505 				; ------------------------------------------------------------
  2506
  2507 = 0600			SCREEN_LINES_ADDR	= $0600
  2508 = 2000			PMG_ADDR	= $2000
  2509 = 2400			SCREEN_ADDR	= $2400
  2510 = 2800			EDITOR_ADDR	= $2800
  2511 = 3000			FONTS_ADDR	= $3000
  2512 = 000F			MAX_SPRITE	= $0F
  2513 = 0007			MAX_GROUP	= $07
  2514 = D800			CORE_LIB	= $D800
  2515 = 1F00			ASC2INT_ADDR	= $1F00
  2516 = 1F80			SCAN2ASC_ADDR	= $1F80
  2517 = 0014			ZP_TM	= $14
  2518 = 0012			ZP_NFRMTM	= $12
  2519 = 001C			ZP_CURGROUP	= $1C
  2520 = 001D			ZP_CURPWRSPRITE	= $1D
  2521 = 001E			ZP_CURTRLSPRITE	= $1E
  2522 = 0020			ZP_AX1	= $20
  2523 = 0021			ZP_AY1	= $21
  2524 = 0022			ZP_AX2	= $22
  2525 = 0023			ZP_AY2	= $23
  2526 = 0024			ZP_BX1	= $24
  2527 = 0025			ZP_BY1	= $25
  2528 = 0026			ZP_BX2	= $26
  2529 = 0027			ZP_BY2	= $27
  2530 = 0028			ZP__X1	= $28
  2531 = 0029			ZP__Y1	= $29
  2532 = 002A			ZP__X2	= $2A
  2533 = 002B			ZP__Y2	= $2B
  2534 = 002C			ZP_NXTTLEVENT	= $2C
  2535 = 002E			ZP_SCR	= $2E
  2536 = 0070			ZP_BCDSCORE	= $70
  2537 = 0074			ZP_BCDLEVEL	= $74
  2538 = 0075			ZP_PLAYERLIVES	= $75
  2539 = 0076			ZP_BCDMISSILES	= $76
  2540 = 0077			ZP_F1PWR	= $77
  2541 = 0078			ZP_F1SPD	= $78
  2542 = 0079			ZP_F2PWR	= $79
  2543 = 007A			ZP_KEYCODE	= $7A
  2544 = 007B			ZP_JOYDIRECTION	= $7B
  2545 = 007C			ZP_JOYFIRE1	= $7C
  2546 = 007E			ZP_JOYFIRE2	= $7E
  2547 = 00D4			ZP_ACTIVEPAGE	= $D4
  2548 = 00D5			ZP_I	= $D5
  2549 = 00D6			ZP_J	= $D6
  2550 = 00D7			ZP_TRAILADR	= $D7
  2551 = 00D9			ZP_DYVAL	= $D9
  2552 = 00DA			ZP_DXVAL	= $DA
  2553 = 00E0			ZP_SPRITEN	= $E0
  2554 = 00E1			ZP_SPRITEX	= $E1
  2555 = 00E2			ZP_SPRITEY	= $E2
  2556 = 00E3			ZP_SPRITEI	= $E3
  2557 = 00E4			ZP_GAMESTAT	= $E4
  2558 = 00E5			ZP_TLADR	= $E5
  2559 = 00E7			ZP_TIMERS	= $E7
  2560 = 00E8			ZP_TIMER0	= $E8
  2561 = 00E9			ZP_TIMER1	= $E9
  2562 = 00EA			ZP_TIMER2	= $EA
  2563 = 00EB			ZP_TIMER3	= $EB
  2564 = 00EC			ZP_TIMER4	= $EC
  2565 = 00ED			ZP_TIMER5	= $ED
  2566 = 00EE			ZP_CURTIMELINE	= $EE
  2567 = 0000			DL_BLANK1	= $00
  2568 = 0010			DL_BLANK2	= $10
  2569 = 0020			DL_BLANK3	= $20
  2570 = 0030			DL_BLANK4	= $30
  2571 = 0040			DL_BLANK5	= $40
  2572 = 0050			DL_BLANK6	= $50
  2573 = 0060			DL_BLANK7	= $60
  2574 = 0070			DL_BLANK8	= $70
  2575 = 0080			DL_DLI	= $80
  2576 = 0040			DL_LMS	= $40
  2577 = 0020			DL_VSCROLL	= $20
  2578 = 0010			DL_HSCROLL	= $10
  2579 = 0002			DL_MODE_40X24T2	= $02
  2580 = 0004			DL_MODE_40X24T5	= $04
  2581 = 0005			DL_MODE_40X12T5	= $05
  2582 = 0006			DL_MODE_20X24T5	= $06
  2583 = 0007			DL_MODE_20X12T5	= $07
  2584 = 0008			DL_MODE_40X24G4	= $08
  2585 = 0009			DL_MODE_80X48G2	= $09
  2586 = 000A			DL_MODE_80X48G4	= $0A
  2587 = 000B			DL_MODE_160X96G2	= $0B
  2588 = 000C			DL_MODE_160X192G2	= $0C
  2589 = 000D			DL_MODE_160X96G4	= $0D
  2590 = 000E			DL_MODE_160X192G4	= $0E
  2591 = 000F			DL_MODE_320X192G2	= $0F
  2592 = 0001			DL_JMP	= $01
  2593 = 0041			DL_JVB	= $41
  2594 = 81C0			adr.DLIST	= CODEORIGIN+$01C0
  2595 90DD			.var DLIST	= adr.DLIST .word
  2596 = EA2C			_CONTROLS	=	$EA2C
  2597 = EA2E			_ICONS	=	$EA2E
  2598 = EA30			_ICARD	=	$EA30
  2599 = EA32			_IPATH	=	$EA32
  2600 = EA34			ACONTROLS	=	$EA34
  2601 = EA36			AICONS	=	$EA36
  2602 = 0000			K_L	= $00
  2603 = 0001			K_J	= $01
  2604 = 0002			K_SEMICO	= $02
  2605 = 0003			K_F1	= $03
  2606 = 0004			K_F2	= $04
  2607 = 0005			K_K	= $05
  2608 = 0006			K_PLUS	= $06
  2609 = 0006			K_LEFT	= $06
  2610 = 0007			K_STAR	= $07
  2611 = 0007			K_RIGHT	= $07
  2612 = 0008			K_O	= $08
  2613 = 000A			K_P	= $0A
  2614 = 000B			K_U	= $0B
  2615 = 000C			K_RETURN	= $0C
  2616 = 000D			K_I	= $0D
  2617 = 000E			K_UP	= $0E
  2618 = 000F			K_DOWN	= $0F
  2619 = 0010			K_V	= $10
  2620 = 0011			K_HELP	= $11
  2621 = 0012			K_C	= $12
  2622 = 0013			K_F3	= $13
  2623 = 0014			K_F4	= $14
  2624 = 0015			K_B	= $15
  2625 = 0016			K_X	= $16
  2626 = 0017			K_Z	= $17
  2627 = 0018			K_4	= $18
  2628 = 001A			K_3	= $1A
  2629 = 001B			K_6	= $1B
  2630 = 001C			K_ESC	= $1C
  2631 = 001D			K_5	= $1D
  2632 = 001E			K_2	= $1E
  2633 = 001F			K_1	= $1F
  2634 = 0020			K_COMMA	= $20
  2635 = 0021			K_SPACE	= $21
  2636 = 0022			K_DOT	= $22
  2637 = 0023			K_N	= $23
  2638 = 0025			K_M	= $25
  2639 = 0026			K_BACKSL	= $26
  2640 = 0027			K_INVERS	= $27
  2641 = 0028			K_R	= $28
  2642 = 002A			K_E	= $2A
  2643 = 002B			K_Y	= $2B
  2644 = 002C			K_TAB	= $2C
  2645 = 002D			K_T	= $2D
  2646 = 002E			K_W	= $2E
  2647 = 002F			K_Q	= $2F
  2648 = 0030			K_9	= $30
  2649 = 0032			K_0	= $32
  2650 = 0033			K_7	= $33
  2651 = 0034			K_DELETE	= $34
  2652 = 0035			K_8	= $35
  2653 = 0036			K_CLEAR	= $36
  2654 = 0037			K_INSERT	= $37
  2655 = 0038			K_F	= $38
  2656 = 0039			K_H	= $39
  2657 = 003A			K_D	= $3A
  2658 = 003C			K_CAPS	= $3C
  2659 = 003D			K_G	= $3D
  2660 = 003E			K_S	= $3E
  2661 = 003F			K_A	= $3F
  2662 = 0040			KMOD_SHIFT	= $40
  2663 = 0080			KMOD_CTRL	= $80
  2664 = 02D9			KRPDEL	= $02D9
  2665 = 02DA			KEYREP	= $02DA
  2666 = 02FC			KEYB	= $02FC
  2667 = 0011			BRKKEY	= $11
  2668 = 1F00			adr._ASC2INT	= $1F00
  2669 90DD			.var _ASC2INT	= adr._ASC2INT .word
  2670 = 026F			GPRIOR	= $026F
  2671 = 022F			SDMACTL	= $022F
  2672 = D01D			PMCTL	= $D01D
  2673 = D407			PMBASE	= $D407
  2674 = D000			adr.HPOSP	= $D000
  2675 90DD			.var HPOSP	= adr.HPOSP .word
  2676 = D008			adr.SIZEP	= $D008
  2677 90DD			.var SIZEP	= adr.SIZEP .word
  2678 = 02C0			adr.PCOL	= $02C0
  2679 90DD			.var PCOL	= adr.PCOL .word
  2680 = 0200			DLIV	= $0200
  2681 = D40E			NMIEN	= $D40E
  2682 = 0230			SDLST	= $0230
  2683 = 026F			GTIACS	= $026F
  2684 = 02C4			PFCOL0	= $02C4
  2685 = 02C5			PFCOL1	= $02C5
  2686 = 02C6			PFCOL2	= $02C6
  2687 = 02C7			PFCOL3	= $02C7
  2688 = 02C8			PFCOL4	= $02C8
  2689 = 00D4			ACTIVEPAGE	= $D4
  2690 = 0058			SCR	= $58
  2691 = 0600			adr.YSCR	= $0600
  2692 90DD			.var YSCR	= adr.YSCR .word
  2693 = 3000			adr.AFONT	= $3000
  2694 90DD			.var AFONT	= adr.AFONT .word
  2695 = 3100			adr.AFONTC	= $3100
  2696 90DD			.var AFONTC	= adr.AFONTC .word
  2697 = 0002			PUTIMAGE.@VARDATASIZE	=	$0002
  2698 = DC4F			PUTIMAGE.@EXIT	=	$DC4F
  2699 = EB59			PUTIMAGE.@VARDATA	=	$EB59
  2700 = EB5A			PUTIMAGE.HEIGHT	=	$EB5A
  2701 = EB59			PUTIMAGE.WIDTH	=	$EB59
  2702 = 0084			PUTIMAGE.Y	=	$0084
  2703 = 008C			PUTIMAGE.X	=	$008C
  2704 = 0088			PUTIMAGE.ADR	=	$0088
  2705 = DC4D			PUTIMAGE.EXPUTIMG	=	$DC4D
  2706 = DC33			PUTIMAGE._LNWIDTH	=	$DC33
  2707 = DC28			PUTIMAGE.LBYTE	=	$DC28
  2708 = DC24			PUTIMAGE.LLINE	=	$DC24
  2709 = DC13			PUTIMAGE.CALCSCR	=	$DC13
  2710 = DC0F			PUTIMAGE.SKPAGE	=	$DC0F
  2711 = DC04			PUTIMAGE	=	$DC04
  2712 = 0002			PUTSPRITE.@VARDATASIZE	=	$0002
  2713 = DE0B			PUTSPRITE.@EXIT	=	$DE0B
  2714 = EB5B			PUTSPRITE.@VARDATA	=	$EB5B
  2715 = EB5C			PUTSPRITE.HEIGHT	=	$EB5C
  2716 = EB5B			PUTSPRITE.WIDTH	=	$EB5B
  2717 = 0084			PUTSPRITE.Y	=	$0084
  2718 = 008C			PUTSPRITE.X	=	$008C
  2719 = 0088			PUTSPRITE.ADR	=	$0088
  2720 = DE09			PUTSPRITE.EXPUTIMG	=	$DE09
  2721 = DDEE			PUTSPRITE._LNWIDTH2	=	$DDEE
  2722 = DDEA			PUTSPRITE.NXT	=	$DDEA
  2723 = DDD3			PUTSPRITE.LB1	=	$DDD3
  2724 = DDCF			PUTSPRITE.L1	=	$DDCF
  2725 = DDAC			PUTSPRITE.LB2	=	$DDAC
  2726 = DD9F			PUTSPRITE.L2	=	$DD9F
  2727 = DD73			PUTSPRITE.LB3	=	$DD73
  2728 = DD61			PUTSPRITE.L3	=	$DD61
  2729 = DD2C			PUTSPRITE.LB4	=	$DD2C
  2730 = DD15			PUTSPRITE.L4	=	$DD15
  2731 = DCD7			PUTSPRITE.LB5	=	$DCD7
  2732 = DCBF			PUTSPRITE.L5	=	$DCBF
  2733 = DCB1			PUTSPRITE.SH	=	$DCB1
  2734 = DCB0			PUTSPRITE.LLINE	=	$DCB0
  2735 = DC97			PUTSPRITE._LNWIDTH1	=	$DC97
  2736 = DC8A			PUTSPRITE.LBYTE	=	$DC8A
  2737 = DC86			PUTSPRITE.LLN	=	$DC86
  2738 = DC83			PUTSPRITE.LSIMPLE	=	$DC83
  2739 = DC6C			PUTSPRITE.CALCSCR	=	$DC6C
  2740 = DC69			PUTSPRITE.POSITIVEX	=	$DC69
  2741 = DC61			PUTSPRITE.NEGATIVEX	=	$DC61
  2742 = DC5B			PUTSPRITE.SKPAGE	=	$DC5B
  2743 = DC50			PUTSPRITE	=	$DC50
  2744 = 0002			PUTSPRITEXOR.@VARDATASIZE	=	$0002
  2745 = DFAA			PUTSPRITEXOR.@EXIT	=	$DFAA
  2746 = EB5D			PUTSPRITEXOR.@VARDATA	=	$EB5D
  2747 = EB5E			PUTSPRITEXOR.HEIGHT	=	$EB5E
  2748 = EB5D			PUTSPRITEXOR.WIDTH	=	$EB5D
  2749 = 0084			PUTSPRITEXOR.Y	=	$0084
  2750 = 008C			PUTSPRITEXOR.X	=	$008C
  2751 = 0088			PUTSPRITEXOR.ADR	=	$0088
  2752 = DFA8			PUTSPRITEXOR.EXPUTIMG	=	$DFA8
  2753 = DF85			PUTSPRITEXOR.NXT	=	$DF85
  2754 = DF6B			PUTSPRITEXOR.LB1	=	$DF6B
  2755 = DF67			PUTSPRITEXOR.L1	=	$DF67
  2756 = DF44			PUTSPRITEXOR.LB2	=	$DF44
  2757 = DF37			PUTSPRITEXOR.L2	=	$DF37
  2758 = DF0B			PUTSPRITEXOR.LB3	=	$DF0B
  2759 = DEF9			PUTSPRITEXOR.L3	=	$DEF9
  2760 = DEC4			PUTSPRITEXOR.LB4	=	$DEC4
  2761 = DEAD			PUTSPRITEXOR.L4	=	$DEAD
  2762 = DE6F			PUTSPRITEXOR.LB5	=	$DE6F
  2763 = DE57			PUTSPRITEXOR.L5	=	$DE57
  2764 = DE49			PUTSPRITEXOR.SH	=	$DE49
  2765 = DE48			PUTSPRITEXOR.LLINE	=	$DE48
  2766 = DE1E			PUTSPRITEXOR.LBYTE	=	$DE1E
  2767 = DE1A			PUTSPRITEXOR.LLN	=	$DE1A
  2768 = DE17			PUTSPRITEXOR.LSIMPLE	=	$DE17
  2769 = DE0C			PUTSPRITEXOR	=	$DE0C
  2770 = 00FA			PUTTEXT.SPTR	=	$00FA
  2771 = E018			PUTTEXT.@EXIT	=	$E018
  2772 = 0084			PUTTEXT.S	=	$0084
  2773 = 008C			PUTTEXT.Y	=	$008C
  2774 = 0088			PUTTEXT.X	=	$0088
  2775 = E016			PUTTEXT.EXPUTTEXT	=	$E016
  2776 = E005			PUTTEXT.ADR	=	$E005
  2777 = E004			PUTTEXT.LBYTE	=	$E004
  2778 = E004			PUTTEXT.LLN	=	$E004
  2779 = E000			PUTTEXT.LSIMPLE	=	$E000
  2780 = DFF2			PUTTEXT.SKIPSH	=	$DFF2
  2781 = DFDE			PUTTEXT.TLEN	=	$DFDE
  2782 = DFDB			PUTTEXT.LPUTCHAR	=	$DFDB
  2783 = DFCE			PUTTEXT.SKPAGE	=	$DFCE
  2784 = DFAB			PUTTEXT	=	$DFAB
  2785 = 00FA			PUTTEXTC.SPTR	=	$00FA
  2786 = E082			PUTTEXTC.@EXIT	=	$E082
  2787 = 0084			PUTTEXTC.S	=	$0084
  2788 = 008C			PUTTEXTC.Y	=	$008C
  2789 = 0088			PUTTEXTC.X	=	$0088
  2790 = E080			PUTTEXTC.EXPUTIMG	=	$E080
  2791 = E06F			PUTTEXTC.ADR	=	$E06F
  2792 = E06E			PUTTEXTC.LBYTE	=	$E06E
  2793 = E06E			PUTTEXTC.LLN	=	$E06E
  2794 = E06A			PUTTEXTC.LSIMPLE	=	$E06A
  2795 = E04B			PUTTEXTC.TLEN	=	$E04B
  2796 = E048			PUTTEXTC.LPUTCHAR	=	$E048
  2797 = E03E			PUTTEXTC.CALCSCR	=	$E03E
  2798 = E03C			PUTTEXTC.SKPAGE	=	$E03C
  2799 = E019			PUTTEXTC	=	$E019
  2800 = 0001			INVERT.@VARDATASIZE	=	$0001
  2801 = E0C5			INVERT.@EXIT	=	$E0C5
  2802 = EB5F			INVERT.@VARDATA	=	$EB5F
  2803 = EB5F			INVERT.H	=	$EB5F
  2804 = 0084			INVERT.W	=	$0084
  2805 = 008C			INVERT.Y	=	$008C
  2806 = 0088			INVERT.X	=	$0088
  2807 = E0C3			INVERT.EXPUTIMG	=	$E0C3
  2808 = E0BC			INVERT._LNWIDTH1	=	$E0BC
  2809 = E0B7			INVERT.MASK	=	$E0B7
  2810 = E0B4			INVERT.LBYTE	=	$E0B4
  2811 = E0B4			INVERT.LLN	=	$E0B4
  2812 = E0AD			INVERT.LSIMPLE	=	$E0AD
  2813 = E09B			INVERT.LPUTCHAR	=	$E09B
  2814 = E090			INVERT.CALCSCR	=	$E090
  2815 = E08E			INVERT.SKPAGE	=	$E08E
  2816 = E083			INVERT	=	$E083
  2817 = 0001			BLANK.@VARDATASIZE	=	$0001
  2818 = E108			BLANK.@EXIT	=	$E108
  2819 = EB60			BLANK.@VARDATA	=	$EB60
  2820 = EB60			BLANK.H	=	$EB60
  2821 = 0084			BLANK.W	=	$0084
  2822 = 008C			BLANK.Y	=	$008C
  2823 = 0088			BLANK.X	=	$0088
  2824 = E106			BLANK.EXPUTIMG	=	$E106
  2825 = E0FF			BLANK._LNWIDTH1	=	$E0FF
  2826 = E0FA			BLANK.MASK	=	$E0FA
  2827 = E0F7			BLANK.LBYTE	=	$E0F7
  2828 = E0F7			BLANK.LLN	=	$E0F7
  2829 = E0F0			BLANK.LSIMPLE	=	$E0F0
  2830 = E0DE			BLANK.LPUTCHAR	=	$E0DE
  2831 = E0D3			BLANK.CALCSCR	=	$E0D3
  2832 = E0D1			BLANK.SKPAGE	=	$E0D1
  2833 = E0C6			BLANK	=	$E0C6
  2834 = E114			SETSCREENWIDTH.@EXIT	=	$E114
  2835 = 0088			SETSCREENWIDTH.NSW	=	$0088
  2836 = E109			SETSCREENWIDTH	=	$E109
  2837 = E14C			CLEARPAGE.@EXIT	=	$E14C
  2838 = 0088			CLEARPAGE.PAGE	=	$0088
  2839 = E147			CLEARPAGE._PP3	=	$E147
  2840 = E144			CLEARPAGE._PP2	=	$E144
  2841 = E141			CLEARPAGE._PP1	=	$E141
  2842 = E13E			CLEARPAGE._PP0	=	$E13E
  2843 = E13D			CLEARPAGE.LCLR	=	$E13D
  2844 = E11F			CLEARPAGE.CLEAR	=	$E11F
  2845 = E11D			CLEARPAGE.SETPAGE1	=	$E11D
  2846 = E119			CLEARPAGE.SETPAGE0	=	$E119
  2847 = E115			CLEARPAGE	=	$E115
  2848 = E156			WAIT.@EXIT	=	$E156
  2849 = 0088			WAIT.F	=	$0088
  2850 = E152			WAIT.LOOP	=	$E152
  2851 = E14D			WAIT	=	$E14D
  2852 = 001F			MAX_ZONES	= $1F
  2853 = 0009			USER_ZONES_BEGIN	= $09
  2854 = 0500			adr._MZONEACTIVE	= $0500
  2855 90DD			.var _MZONEACTIVE	= adr._MZONEACTIVE .word
  2856 = 0520			adr._MZONEX1	= $0520
  2857 90DD			.var _MZONEX1	= adr._MZONEX1 .word
  2858 = 0540			adr._MZONEY1	= $0540
  2859 90DD			.var _MZONEY1	= adr._MZONEY1 .word
  2860 = 0560			adr._MZONEX2	= $0560
  2861 90DD			.var _MZONEX2	= adr._MZONEX2 .word
  2862 = 0580			adr._MZONEY2	= $0580
  2863 90DD			.var _MZONEY2	= adr._MZONEY2 .word
  2864 = 05A0			adr._MZONEPROC	= $05A0
  2865 90DD			.var _MZONEPROC	= adr._MZONEPROC .word
  2866 = 0050			SZONE	= $50
  2867 = 0051			OZONE	= $51
  2868 = E157			NULLPROC.@EXIT	=	$E157
  2869 = E157			NULLPROC	=	$E157
  2870 = 0008			SETZONE.@VARDATASIZE	=	$0008
  2871 = E1AA			SETZONE.@EXIT	=	$E1AA
  2872 = EB65			SETZONE.@VARDATA	=	$EB65
  2873 = EB6B			SETZONE.PRC	=	$EB6B
  2874 = EB6A			SETZONE.H	=	$EB6A
  2875 = EB69			SETZONE.W	=	$EB69
  2876 = EB68			SETZONE.Y	=	$EB68
  2877 = EB67			SETZONE.X	=	$EB67
  2878 = EB66			SETZONE.ACT	=	$EB66
  2879 = EB65			SETZONE.N	=	$EB65
  2880 = E158			SETZONE	=	$E158
  2881 = 0001			CLEARZONE.@VARDATASIZE	=	$0001
  2882 = E1D3			CLEARZONE.@EXIT	=	$E1D3
  2883 = EB6D			CLEARZONE.@VARDATA	=	$EB6D
  2884 = EB6D			CLEARZONE.N	=	$EB6D
  2885 = E1AB			CLEARZONE	=	$E1AB
  2886 = E1E5			CLEARWORKZONES.@EXIT	=	$E1E5
  2887 = E1E5			CLEARWORKZONES.L_013B	=	$E1E5
  2888 = E1D8			CLEARWORKZONES.L_012D	=	$E1D8
  2889 = E1D4			CLEARWORKZONES	=	$E1D4
  2890 = E1FF			INITINTERFACE.@EXIT	=	$E1FF
  2891 = E1FF			INITINTERFACE.L_016B	=	$E1FF
  2892 = E1F2			INITINTERFACE.L_015D	=	$E1F2
  2893 = E1E6			INITINTERFACE	=	$E1E6
  2894 = EB6E			GETFREEZONE.RESULT	=	$EB6E
  2895 = E222			GETFREEZONE.@EXIT	=	$E222
  2896 = E222			GETFREEZONE.L_0193	=	$E222
  2897 = E21E			GETFREEZONE.L_01A8	=	$E21E
  2898 = E209			GETFREEZONE.L_0185	=	$E209
  2899 = E200			GETFREEZONE	=	$E200
  2900 = 0007			ADDZONEN.@VARDATASIZE	=	$0007
  2901 = EB6F			ADDZONEN.@VARDATA	=	$EB6F
  2902 = EB76			ADDZONEN.RESULT	=	$EB76
  2903 = EB74			ADDZONEN.PRC	=	$EB74
  2904 = EB73			ADDZONEN.H	=	$EB73
  2905 = EB72			ADDZONEN.W	=	$EB72
  2906 = EB71			ADDZONEN.Y	=	$EB71
  2907 = EB70			ADDZONEN.X	=	$EB70
  2908 = EB6F			ADDZONEN.N	=	$EB6F
  2909 = E272			ADDZONEN.@EXIT	=	$E272
  2910 = E26C			ADDZONEN.L_01E5	=	$E26C
  2911 = E233			ADDZONEN.L_01CC	=	$E233
  2912 = E223			ADDZONEN	=	$E223
  2913 = 0006			ADDZONE.@VARDATASIZE	=	$0006
  2914 = EB77			ADDZONE.@VARDATA	=	$EB77
  2915 = EB7D			ADDZONE.RESULT	=	$EB7D
  2916 = EB7B			ADDZONE.PRC	=	$EB7B
  2917 = EB7A			ADDZONE.H	=	$EB7A
  2918 = EB79			ADDZONE.W	=	$EB79
  2919 = EB78			ADDZONE.Y	=	$EB78
  2920 = EB77			ADDZONE.X	=	$EB77
  2921 = E2A5			ADDZONE.@EXIT	=	$E2A5
  2922 = E273			ADDZONE	=	$E273
  2923 = 0002			ADDZONEH.@VARDATASIZE	=	$0002
  2924 = EB7E			ADDZONEH.@VARDATA	=	$EB7E
  2925 = EB80			ADDZONEH.RESULT	=	$EB80
  2926 = EB7E			ADDZONEH.PRC	=	$EB7E
  2927 = E2D7			ADDZONEH.@EXIT	=	$E2D7
  2928 = E2A6			ADDZONEH	=	$E2A6
  2929 = 0003			ADDZONEHN.@VARDATASIZE	=	$0003
  2930 = EB81			ADDZONEHN.@VARDATA	=	$EB81
  2931 = EB84			ADDZONEHN.RESULT	=	$EB84
  2932 = EB82			ADDZONEHN.PRC	=	$EB82
  2933 = EB81			ADDZONEHN.N	=	$EB81
  2934 = E30F			ADDZONEHN.@EXIT	=	$E30F
  2935 = E2D8			ADDZONEHN	=	$E2D8
  2936 = 0002			ADDZONEV.@VARDATASIZE	=	$0002
  2937 = EB85			ADDZONEV.@VARDATA	=	$EB85
  2938 = EB87			ADDZONEV.RESULT	=	$EB87
  2939 = EB85			ADDZONEV.PRC	=	$EB85
  2940 = E341			ADDZONEV.@EXIT	=	$E341
  2941 = E310			ADDZONEV	=	$E310
  2942 = 0003			ADDZONEVN.@VARDATASIZE	=	$0003
  2943 = EB88			ADDZONEVN.@VARDATA	=	$EB88
  2944 = EB8B			ADDZONEVN.RESULT	=	$EB8B
  2945 = EB89			ADDZONEVN.PRC	=	$EB89
  2946 = EB88			ADDZONEVN.N	=	$EB88
  2947 = E379			ADDZONEVN.@EXIT	=	$E379
  2948 = E342			ADDZONEVN	=	$E342
  2949 = 0057			CHECKZONES.NZONE	=	$0057
  2950 = EB8C			CHECKZONES.RESULT	=	$EB8C
  2951 = E553			CHECKZONES.@EXIT	=	$E553
  2952 = E553			CHECKZONES.L_0495	=	$E553
  2953 = E553			CHECKZONES.L_04A8	=	$E553
  2954 = E538			CHECKZONES.L_037B	=	$E538
  2955 = E535			CHECKZONES.L_0436	=	$E535
  2956 = E535			CHECKZONES.L_0483	=	$E535
  2957 = E52A			CHECKZONES.L_0448	=	$E52A
  2958 = E527			CHECKZONES.L_0476	=	$E527
  2959 = E51E			CHECKZONES.L_045B	=	$E51E
  2960 = E50B			CHECKZONES.L_038E	=	$E50B
  2961 = E508			CHECKZONES.L_03D3	=	$E508
  2962 = E508			CHECKZONES.L_03E7	=	$E508
  2963 = E500			CHECKZONES.L_0419	=	$E500
  2964 = E4F8			CHECKZONES.L_03FA	=	$E4F8
  2965 = E49C			CHECKZONES.L_03A2	=	$E49C
  2966 = E499			CHECKZONES.L_03C3	=	$E499
  2967 = E468			CHECKZONES.B_02F1	=	$E468
  2968 = E468			CHECKZONES.L_02FF	=	$E468
  2969 = E461			CHECKZONES.L_030E	=	$E461
  2970 = E461			CHECKZONES.L_0359	=	$E461
  2971 = E3C7			CHECKZONES.L_02F1	=	$E3C7
  2972 = E3B8			CHECKZONES.L_0286	=	$E3B8
  2973 = EB8D			CHECKZONES.PRESSED.RESULT	=	$EB8D
  2974 = E3B7			CHECKZONES.PRESSED.@EXIT	=	$E3B7
  2975 = E3A6			CHECKZONES.PRESSED	=	$E3A6
  2976 = E3A5			CHECKZONES.REFRESHZONE.@EXIT	=	$E3A5
  2977 = E3A5			CHECKZONES.REFRESHZONE.L_02B8	=	$E3A5
  2978 = E391			CHECKZONES.REFRESHZONE.L_029B	=	$E391
  2979 = E37D			CHECKZONES.REFRESHZONE	=	$E37D
  2980 = E37A			CHECKZONES	=	$E37A
  2981 = 0037			YCONTROLS	= $37
  2982 = 0003			INVERTZONE.@VARDATASIZE	=	$0003
  2983 = E586			INVERTZONE.@EXIT	=	$E586
  2984 = EB8E			INVERTZONE.@VARDATA	=	$EB8E
  2985 = EB90			INVERTZONE._H	=	$EB90
  2986 = EB8F			INVERTZONE._W	=	$EB8F
  2987 = EB8E			INVERTZONE.I	=	$EB8E
  2988 = E554			INVERTZONE	=	$E554
  2989 = E5A1			CLEARWORKAREA.@EXIT	=	$E5A1
  2990 = E587			CLEARWORKAREA	=	$E587
  2991 = E5BB			CLEARSTATUS.@EXIT	=	$E5BB
  2992 = E5A2			CLEARSTATUS	=	$E5A2
  2993 = 0002			SETSTATUS.@VARDATASIZE	=	$0002
  2994 = E5D9			SETSTATUS.@EXIT	=	$E5D9
  2995 = EB91			SETSTATUS.@VARDATA	=	$EB91
  2996 = EB91			SETSTATUS.S	=	$EB91
  2997 = E5BC			SETSTATUS	=	$E5BC
  2998 = 0004			SETICON.@VARDATASIZE	=	$0004
  2999 = E680			SETICON.@EXIT	=	$E680
  3000 = EB93			SETICON.@VARDATA	=	$EB93
  3001 = EB95			SETICON.P	=	$EB95
  3002 = EB94			SETICON._X	=	$EB94
  3003 = EB93			SETICON.N	=	$EB93
  3004 = E680			SETICON.L_052E	=	$E680
  3005 = E679			SETICON.L_0546	=	$E679
  3006 = E64D			SETICON.L_057D	=	$E64D
  3007 = E649			SETICON.L_055B	=	$E649
  3008 = E5E6			SETICON.L_0520	=	$E5E6
  3009 = E5DA			SETICON	=	$E5DA
  3010 = 0001			SETCONTROLS.@VARDATASIZE	=	$0001
  3011 = E6D5			SETCONTROLS.@EXIT	=	$E6D5
  3012 = EB97			SETCONTROLS.@VARDATA	=	$EB97
  3013 = EB97			SETCONTROLS.S	=	$EB97
  3014 = E6D1			SETCONTROLS.124@	=	$E6D1
  3015 = E6C3			SETCONTROLS.123@	=	$E6C3
  3016 = E6B5			SETCONTROLS.122@	=	$E6B5
  3017 = E6A7			SETCONTROLS.121@	=	$E6A7
  3018 = E699			SETCONTROLS.120@	=	$E699
  3019 = E68B			SETCONTROLS.119@	=	$E68B
  3020 = E681			SETCONTROLS	=	$E681
  3021 = 0004			SETCONTROL.@VARDATASIZE	=	$0004
  3022 = E73B			SETCONTROL.@EXIT	=	$E73B
  3023 = EB98			SETCONTROL.@VARDATA	=	$EB98
  3024 = EB9A			SETCONTROL.P	=	$EB9A
  3025 = EB99			SETCONTROL._X	=	$EB99
  3026 = EB98			SETCONTROL.N	=	$EB98
  3027 = E73B			SETCONTROL.L_061C	=	$E73B
  3028 = E714			SETCONTROL.L_0653	=	$E714
  3029 = E707			SETCONTROL.L_063D	=	$E707
  3030 = E6E2			SETCONTROL.L_060E	=	$E6E2
  3031 = E6D6			SETCONTROL	=	$E6D6
  3032 = 0006			ADDBUTTON.@VARDATASIZE	=	$0006
  3033 = EB9C			ADDBUTTON.@VARDATA	=	$EB9C
  3034 = EBA2			ADDBUTTON.RESULT	=	$EBA2
  3035 = EBA0			ADDBUTTON.PRC	=	$EBA0
  3036 = EB9E			ADDBUTTON.CAP	=	$EB9E
  3037 = EB9D			ADDBUTTON.Y	=	$EB9D
  3038 = EB9C			ADDBUTTON.X	=	$EB9C
  3039 = E794			ADDBUTTON.@EXIT	=	$E794
  3040 = E73C			ADDBUTTON	=	$E73C
  3041 = 0007			ADDINPUT.@VARDATASIZE	=	$0007
  3042 = EBA3			ADDINPUT.@VARDATA	=	$EBA3
  3043 = EBAA			ADDINPUT.RESULT	=	$EBAA
  3044 = EBA8			ADDINPUT.PRC	=	$EBA8
  3045 = EBA6			ADDINPUT.VALUE	=	$EBA6
  3046 = EBA5			ADDINPUT.W	=	$EBA5
  3047 = EBA4			ADDINPUT.Y	=	$EBA4
  3048 = EBA3			ADDINPUT.X	=	$EBA3
  3049 = E7E6			ADDINPUT.@EXIT	=	$E7E6
  3050 = E795			ADDINPUT	=	$E795
  3051 = 000C			DOINPUT.@VARDATASIZE	=	$000C
  3052 = EBAB			DOINPUT.@VARDATA	=	$EBAB
  3053 = EBB7			DOINPUT.@CASETMP_0004	=	$EBB7
  3054 = EBB6			DOINPUT.ISCRS	=	$EBB6
  3055 = EBB5			DOINPUT.CTM	=	$EBB5
  3056 = EBB4			DOINPUT.W	=	$EBB4
  3057 = EBB3			DOINPUT.Y	=	$EBB3
  3058 = EBB2			DOINPUT.X	=	$EBB2
  3059 = EBB1			DOINPUT.LN	=	$EBB1
  3060 = EBB0			DOINPUT.CH	=	$EBB0
  3061 = EBAF			DOINPUT.CX	=	$EBAF
  3062 = EBAE			DOINPUT.OZONE	=	$EBAE
  3063 = EBAD			DOINPUT.RESULT	=	$EBAD
  3064 = EBAB			DOINPUT.VALUE	=	$EBAB
  3065 = EA25			DOINPUT.@EXIT	=	$EA25
  3066 = EA14			DOINPUT.B_0735	=	$EA14
  3067 = EA11			DOINPUT.L_07B8	=	$EA11
  3068 = EA07			DOINPUT.A_0004	=	$EA07
  3069 = EA04			DOINPUT.L_08D4	=	$EA04
  3070 = E9CA			DOINPUT.L_08B0	=	$E9CA
  3071 = E9B0			DOINPUT.L_0898	=	$E9B0
  3072 = E99A			DOINPUT.L_083A	=	$E99A
  3073 = E994			DOINPUT.L_0875	=	$E994
  3074 = E97B			DOINPUT.L_084E	=	$E97B
  3075 = E969			DOINPUT.127@	=	$E969
  3076 = E950			DOINPUT.L_0818	=	$E950
  3077 = E94D			DOINPUT.L_082C	=	$E94D
  3078 = E92F			DOINPUT.L_07F8	=	$E92F
  3079 = E92C			DOINPUT.L_080A	=	$E92C
  3080 = E91E			DOINPUT.L_07EB	=	$E91E
  3081 = E90E			DOINPUT.L_07E0	=	$E90E
  3082 = E903			DOINPUT.126@	=	$E903
  3083 = E8F9			DOINPUT.L_07C5	=	$E8F9
  3084 = E8CF			DOINPUT.L_0787	=	$E8CF
  3085 = E8C7			DOINPUT.L_0794	=	$E8C7
  3086 = E8A5			DOINPUT.L_0755	=	$E8A5
  3087 = E8A1			DOINPUT.125@	=	$E8A1
  3088 = E86C			DOINPUT.L_0735	=	$E86C
  3089 = E829			DOINPUT.L_06BE	=	$E829
  3090 = E828			DOINPUT.REFRESHVALUE.@EXIT	=	$E828
  3091 = E7EA			DOINPUT.REFRESHVALUE	=	$E7EA
  3092 = E7E7			DOINPUT	=	$E7E7
  3093 = 003E			I	= $3E
  3094 = 0014			TM	= $14
  3095 = 9146			CURMODULE	= DATAORIGIN+$0019
  3096 = 821A			adr._HEX	= CODEORIGIN+$021A
  3097 90DD			.var _HEX	= adr._HEX .word
  3098 = 0400			adr.DEV	= $0400
  3099 90DD			.var DEV	= adr.DEV .word
  3100 = 0405			adr.FN	= $0405
  3101 90DD			.var FN	= adr.FN .word
  3102 = 0417			adr._FN	= $0417
  3103 90DD			.var _FN	= adr._FN .word
  3104 = 042C			adr.FILEMASK	= $042C
  3105 90DD			.var FILEMASK	= adr.FILEMASK .word
  3106 = 9147			DIRPAGEBEGIN	= DATAORIGIN+$001A
  3107 = 822A			adr._DIRFILEX	= CODEORIGIN+$022A
  3108 90DD			.var _DIRFILEX	= adr._DIRFILEX .word
  3109 = 8239			adr._DIRFILEY	= CODEORIGIN+$0239
  3110 90DD			.var _DIRFILEY	= adr._DIRFILEY .word
  3111 = 9149			adr.DIRNAME	= [DATAORIGIN+$001C] .array [15] .word
  3112 90DD			.var DIRNAME	= adr.DIRNAME .word
  3113 90DD			@exit
  3114
  3115 90DD A2 00		@halt	ldx #$00
  3116 90DF 9A				txs
  3117
  3118 					.ifdef MAIN.@DEFINES.ROMOFF
  3119 90E0 EE 01 D3			inc portb
  3120 					.fi
  3121
  3122 90E3 A0 01			ldy #$01
  3123
  3124 90E5 60				rts
  3125
  3126 				; ------------------------------------------------------------
  3127
  3128 90E6 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3129
  3130 				; ------------------------------------------------------------
  3131
  3132 90F6			.local	@DEFINES
  3133 90F6			ATARI
  3134 90F6			DISABLEIOCBCOPY
  3135 90F6			BASICOFF
  3136 90F6			ROMOFF
  3137 90F6			NOROMFONT
  3138 				.endl
  3139
  3140 90F6			.local	@RESOURCE
  3141 				.endl
  3142
  3143 = 90F6 C0 81		DLIST
  3143 = 90F8 00 1F		_ASC2INT
  3143 = 90FA 00 D0		HPOSP
  3143 = 90FC 08 D0		SIZEP
  3143 = 90FE C0 02		PCOL
  3143 = 9100 00 06		YSCR
  3143 = 9102 00 30		AFONT
  3143 = 9104 00 31		AFONTC
  3143 = 9106 00 05		_MZONEACTIVE
  3143 = 9108 20 05		_MZONEX1
  3143 = 910A 40 05		_MZONEY1
  3143 = 910C 60 05		_MZONEX2
  3143 = 910E 80 05		_MZONEY2
  3143 = 9110 A0 05		_MZONEPROC
  3143 = 9112 1A 82		_HEX
  3143 = 9114 00 04		DEV
  3143 = 9116 05 04		FN
  3143 = 9118 17 04		_FN
  3143 = 911A 2C 04		FILEMASK
  3143 = 911C 2A 82		_DIRFILEX
  3143 = 911E 39 82		_DIRFILEY
  3143 = 9120 49 91		DIRNAME
  3143 				.endl							; MAIN
  3144
  3145 				; ------------------------------------------------------------
  3146 				; ------------------------------------------------------------
  3147
  3148 				.macro	UNITINITIALIZATION
  3149 				
  3150 					.ifdef MAIN.SYSTEM.@UnitInit
  3151 					jsr MAIN.SYSTEM.@UnitInit
  3152 					.fi
  3153 				
  3154 					.ifdef MAIN.CIO.@UnitInit
  3155 					jsr MAIN.CIO.@UnitInit
  3156 					.fi
  3157 				
  3158 					.ifdef MAIN.CURSOR.@UnitInit
  3159 					jsr MAIN.CURSOR.@UnitInit
  3160 					.fi
  3161 				.endm
  3162
  3163 				; ------------------------------------------------------------
  3164
  3165 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3166 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3166 				SYSTEM: $83B9..$83BC
  3167 					eif
  3168
  3169 					ift .SIZEOF(MAIN.CIO) > 0
  3170 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  3170 				CIO: $83BD..$841F
  3171 					eif
  3172
  3173 					ift .SIZEOF(MAIN.CURSOR) > 0
  3174 					.print 'CURSOR: ',MAIN.CURSOR,'..',MAIN.CURSOR+.SIZEOF(MAIN.CURSOR)-1
  3174 				CURSOR: $8420..$85EC
  3175 					eif
  3176
  3177 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3177 				CODE: $8000..$90F5
  3178
  3179 				; ------------------------------------------------------------
  3180
  3181 = 9122				?adr = *
  3182 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  3183 = 912D				?adr = ?old_adr
  3184 					eif
  3185
  3186 					org ?adr
  3187 = 912D				?old_adr = *
  3188
  3189 912D			DATAORIGIN
  3190 912D-9166> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3191 9145 00 FF 00 00 67 91 + .by  $00 $FF $00 $00 <[DATAORIGIN+$003A] >[DATAORIGIN+$003A] <[DATAORIGIN+$0047] >[DATAORIGIN+$0047]  <[DATAORIGIN+$0054] >[DATAORIGIN+$0054] <[DATAORIGIN+$0061] >[DATAORIGIN+$0061] <[DATAORIGIN+$006E] >[DATAORIGIN+$006E] <[DATAORIGIN+$007B] >[DATAORIGIN+$007B]  <[DATAORIGIN+$0088] >[DATAORIGIN+$0088] <[DATAORIGIN+$0095] >[DATAORIGIN+$0095] <[DATAORIGIN+$00A2] >[DATAORIGIN+$00A2] <[DATAORIGIN+$00AF] >[DATAORIGIN+$00AF]
  3192 915D E9 91 F6 91 03 92 + .by  <[DATAORIGIN+$00BC] >[DATAORIGIN+$00BC] <[DATAORIGIN+$00C9] >[DATAORIGIN+$00C9] <[DATAORIGIN+$00D6] >[DATAORIGIN+$00D6] <[DATAORIGIN+$00E3] >[DATAORIGIN+$00E3]  <[DATAORIGIN+$00F0] >[DATAORIGIN+$00F0]
  3193
  3194 = 003A			VARINITSIZE	= *-DATAORIGIN
  3195 = 0108			VARDATASIZE	= 264
  3196
  3197 = 9235			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3198
  3199 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3199 				DATA: $912D..$9235
  3200
  3201 02E0-02E1> 38 83			run START
  3202
  3203 				; ------------------------------------------------------------
  3204
  3205 				.macro	STATICDATA
  3206 				.by  $00 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
  3207 				.by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
  3208 				.by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
  3209 				.by  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65
  3210 				.by  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72
  3211 				.by  $65 $04 $63 $6F $72 $65 $04 $63  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F
  3212 				.by  $72 $65 $04 $63 $6F $72 $65 $04  $63 $6F $72 $65 $04 $63 $6F $72  $65 $04 $63 $6F $72 $65 $04 $63
  3213 				.by  $6F $72 $65 $04 $63 $6F $72 $65  $04 $63 $6F $72 $65 $04 $63 $6F  $72 $65 $04 $63 $6F $72 $65 $04
  3214 				.by  $63 $6F $72 $65 $13 $53 $50 $41  $43 $45 $20 $49 $4D $50 $41 $43  $54 $20 $45 $44 $49 $54 $4F $52
  3215 				.by  $13 $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $08 $47 $53 $44
  3216 				.by  $20 $32 $30 $32 $34 $26 $47 $49  $54 $3A $2F $2F $47 $53 $4F $46  $54 $57 $41 $52 $45 $44 $45 $56
  3217 				.by  $45 $4C $4F $50 $4D $45 $4E $54  $2F $53 $50 $41 $43 $45 $49 $4D  $50 $41 $43 $54 $07 $32 $39 $2D
  3218 				.by  $32 $2D $32 $34 $10 $30 $31 $32  $33 $34 $35 $36 $37 $38 $39 $41  $42 $43 $44 $45 $46 $0A $53 $45
  3219 				.by  $45 $4B $49 $4E $47 $2E $2E $2E  $14 $52 $45 $41 $44 $49 $4E $47  $20 $44 $49 $52 $45 $43 $54 $4F
  3220 				.by  $52 $59 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
  3221 				.by  $2E $2E $0D $49 $2F $4F $20 $45  $52 $52 $4F $52 $20 $24 $30 $30  $04 $50 $52 $45 $56 $04 $4E $45
  3222 				.by  $58 $54 $04 $4C $4F $41 $44 $04  $53 $41 $56 $45 $06 $45 $58 $50  $4F $52 $54 $08 $30 $30 $3A $30
  3223 				.by  $30 $2E $30 $30 $04 $2A $2E $2A  $9B $02 $44 $3A $06 $4E $4F $4E  $41 $4D $45 $10 $18 $3C $3E $78
  3224 				.by  $60 $80 $BA $7C $F6 $EE $6C $BA  $44 $10 $10 $00 $C6 $00 $10 $10  $70 $70 $70 $70 $30 $80 $20 $4B
  3225 				.by  $00 $28 $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
  3226 				.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
  3227 				.by  $0B $90 $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $30 $0D $0D $0D $0D $0D $B0
  3228 				.by  $0D $0D $0D $0D $0D $0D $8D $41  $C0 $81 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44
  3229 				.by  $45 $46 $01 $01 $01 $01 $01 $0E  $0E $0E $0E $0E $1B $1B $1B $1B  $1B $0D $14 $1B $22 $29 $0D $14
  3230 				.by  $1B $22 $29 $0D $14 $1B $22 $29
  3231 				.endm
  3232
  3233 					end
