mads 2.1.6
Source: SIED.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.1 [2024/02/28] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 8000			CODEORIGIN	= $8000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.if .def(@vbxe_detect)
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
Source: basicoff.asm
     1 				// BASIC OFF
     2 				// author: Michael Jaskula
     3 				// changes: 2023-03-28
     4
     5 				//	lda #$01		; OSS cart disabled
     6 				//	sta $d508
     7
     8 FFFF> 8000-8040> AD 01 + 	lda PORTB
     9 8003 09 02			ora #$02
    10 8005 8D 01 D3			sta PORTB
    11 					
    12 8008 A9 70			lda #$70		; disable BREAK
    13 800A 85 10			sta $10
    14 800C 8D 0E D2			sta $D20E
    15
    16 800F A9 C0			lda #$C0
    17 8011 85 6A			sta $6A
    18 8013 8D E4 02			sta $2E4
    19
    20 8016 A9 01			lda #$01
    21 8018 8D F8 03			sta $03F8
    22
    23 801B A2 00			ldx #0			; reset E:
    24 801D A9 0C			lda #$0c
    25 801F 20 38 80			jsr xcio
    26
    27 8022 A9 3E 9D 44 03 A9 + 	mwa #ename icbufa,x
    28
    29 802C A9 0C 9D 4A 03		mva #$0c icax1,x
    30 8031 A9 00 9D 4B 03		mva #$00 icax2,x
    31
    32 8036 A9 03			lda #$03
    33
    34 8038 9D 42 03		xcio	sta iccmd,x
    35
    36 803B 4C 56 E4			jmp	ciov
    37
    38 803E 45 3A 9B		ename	.byte 'E:',$9b
    95 02E2-02E3> 00 80			ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 8041				org CODEORIGIN
   105
   106 8000			.local	MAIN.@RESOURCE
   107 				.endl
   108
   109 8000			.local	RESOURCE
   110 8000				icl 'atari\resource.asm'
Source: resource.asm
     1
  1229 					opt l+
   111 = 0000				?EXTDETECT = 0
   112 = 0000				?VBXDETECT = 0
   113
   114 8000				RCDATA 'assets//fonts.obx' FONTS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0531			len = .filesize('assets//fonts.obx')-0
    24 8000				org main.FONTS_ADDR
    26 3000-3530> B5 32 80 31 + 	ins 'assets//fonts.obx',0
    28 					.print '$R RCDATA  ',main.FONTS_ADDR,'..',*-1," 'assets//fonts.obx'"
    28 				$R RCDATA  $3000..$3530 'assets//fonts.obx'
Source: SIED.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 3531				org CODEORIGIN
   120
   121 8000				STATICDATA
Macro: STATICDATA [Source: SIED.a65]
     1 8000-A399> 00 13 53 50 + .by  $00 $13 $53 $50 $41 $43 $45 $20  $49 $4D $50 $41 $43 $54 $20 $45  $44 $49 $54 $4F $52 $13 $2D $2D
     2 8018 2D 2D 2D 2D 2D 2D + .by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $08 $47 $53 $44 $20 $32 $30
     3 8030 32 34 26 47 49 54 + .by  $32 $34 $26 $47 $49 $54 $3A $2F  $2F $47 $53 $4F $46 $54 $57 $41  $52 $45 $44 $45 $56 $45 $4C $4F
     4 8048 50 4D 45 4E 54 2F + .by  $50 $4D $45 $4E $54 $2F $53 $50  $41 $43 $45 $49 $4D $50 $41 $43  $54 $07 $32 $38 $2D $32 $2D $32
     5 8060 34 10 30 31 32 33 + .by  $34 $10 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44  $45 $46 $0A $53 $45 $45 $4B $49
     6 8078 4E 47 2E 2E 2E 14 + .by  $4E $47 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
     7 8090 2E 2E 14 52 45 41 + .by  $2E $2E $14 $52 $45 $41 $44 $49  $4E $47 $20 $44 $49 $52 $45 $43  $54 $4F $52 $59 $2E $2E $2E $0D
     8 80A8 49 2F 4F 20 45 52 + .by  $49 $2F $4F $20 $45 $52 $52 $4F  $52 $20 $24 $30 $30 $04 $50 $52  $45 $56 $04 $4E $45 $58 $54 $04
     9 80C0 4C 4F 41 44 04 53 + .by  $4C $4F $41 $44 $04 $53 $41 $56  $45 $06 $45 $58 $50 $4F $52 $54  $08 $30 $30 $3A $30 $30 $2E $30
    10 80D8 30 04 2A 2E 2A 9B + .by  $30 $04 $2A $2E $2A $9B $02 $44  $3A $06 $4E $4F $4E $41 $4D $45  $10 $18 $3C $3E $78 $60 $80 $BA
    11 80F0 7C F6 EE 6C BA 44 + .by  $7C $F6 $EE $6C $BA $44 $10 $10  $00 $C6 $00 $10 $10 $70 $70 $70  $70 $30 $80 $20 $4B $00 $28 $0B
    12 8108 0B 0B 0B 0B 0B 0B + .by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
    13 8120 0B 0B 0B 0B 0B 0B + .by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $90 $0D
    14 8138 0D 0D 0D 0D 0D 0D + .by  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $30 $0D  $0D $0D $0D $0D $B0 $0D $0D $0D
    15 8150 0D 0D 0D 8D 41 FD + .by  $0D $0D $0D $8D $41 $FD $80 $15  $55 $40 $56 $59 $50 $56 $69 $58  $56 $A9 $58 $56 $69 $58 $56 $59
    16 8168 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $9A $54 $15 $AA $54 $15 $9A
    17 8180 54 15 96 54 05 55 + .by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $56 $95 $50 $56 $A5 $58  $56 $A9 $58 $56 $A5 $58 $56 $95
    18 8198 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $A5 $54  $15 $A9 $54 $15 $AA $54 $15 $A9
    19 81B0 54 15 A5 54 05 55 + .by  $54 $15 $A5 $54 $05 $55 $50 $15  $55 $40 $56 $59 $50 $56 $99 $58  $56 $A9 $58 $56 $99 $58 $56 $59
    20 81C8 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $A6 $54 $15 $AA $54 $15 $A6
    21 81E0 54 15 96 54 05 55 + .by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $55 $55 $50 $56 $A9 $58  $56 $A9 $58 $56 $A9 $58 $55 $55
    22 81F8 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $55 $54  $15 $AA $54 $15 $AA $54 $15 $AA
    23 8210 54 15 55 54 05 55 + .by  $54 $15 $55 $54 $05 $55 $50 $15  $55 $40 $56 $A9 $50 $55 $55 $58  $5A $AA $58 $56 $A9 $58 $55 $A5
    24 8228 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $AA $54  $15 $55 $54 $16 $AA $94 $15 $AA
    25 8240 54 15 69 54 05 55 + .by  $54 $15 $69 $54 $05 $55 $50 $15  $55 $40 $55 $A5 $50 $56 $A9 $58  $5A $AA $58 $55 $55 $58 $56 $A9
    26 8258 58 15 55 68 0A AA + .by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $69 $54  $15 $AA $54 $16 $AA $94 $15 $55
    27 8270 54 15 AA 54 05 55 + .by  $54 $15 $AA $54 $05 $55 $50 $55  $55 $54 $6A $A9 $56 $6A $A9 $56  $55 $55 $5A $55 $65 $54 $55 $89
    28 8288 56 55 65 56 55 55 + .by  $56 $55 $65 $56 $55 $55 $56 $55  $65 $56 $55 $65 $56 $55 $55 $56  $2A $AA $AA $00 $00 $14 $00 $01
    29 82A0 46 00 04 5A 00 01 + .by  $46 $00 $04 $5A $00 $01 $18 $00  $04 $68 $00 $32 $20 $00 $48 $00  $00 $E0 $00 $0D $20 $00 $D2 $80
    30 82B8 00 28 00 00 00 00 + .by  $00 $28 $00 $00 $00 $00 $00 $15  $55 $00 $56 $6A $40 $25 $55 $60  $06 $69 $60 $05 $55 $60 $06 $99
    31 82D0 60 05 55 60 06 6A + .by  $60 $05 $55 $60 $06 $6A $60 $05  $55 $60 $05 $9A $94 $01 $55 $5A  $00 $AA $A8 $00 $00 $00 $15 $55
    32 82E8 55 1A AA 55 1A AA + .by  $55 $1A $AA $55 $1A $AA $55 $15  $55 $54 $15 $59 $55 $15 $62 $55  $15 $59 $55 $15 $55 $55 $15 $59
    33 8300 55 15 59 55 15 55 + .by  $55 $15 $59 $55 $15 $55 $55 $00  $00 $00 $00 $00 $05 $00 $00 $51  $00 $01 $14 $00 $00 $44 $00 $01
    34 8318 10 00 0C 00 00 10 + .by  $10 $00 $0C $00 $00 $10 $00 $00  $30 $00 $03 $40 $00 $34 $00 $00  $00 $00 $00 $00 $00 $00 $05 $55
    35 8330 40 15 9A 90 01 55 + .by  $40 $15 $9A $90 $01 $55 $50 $01  $9A $50 $01 $55 $50 $01 $A6 $50  $01 $55 $50 $01 $9A $90 $01 $55
    36 8348 50 01 66 A5 00 55 + .by  $50 $01 $66 $A5 $00 $55 $54 $AA  $AA $AA $95 $55 $55 $9A $AA $55  $9A $AA $55 $95 $55 $56 $95 $59
    37 8360 55 95 62 55 95 59 + .by  $55 $95 $62 $55 $95 $59 $55 $95  $55 $55 $95 $59 $55 $95 $59 $55  $95 $55 $55 $AA $AA $AA $AA $AA
    38 8378 A5 AA AA 51 AA A9 + .by  $A5 $AA $AA $51 $AA $A9 $16 $AA  $AA $46 $AA $A9 $9A $AA $AE $AA  $AA $9A $AA $AA $BA $AA $AB $6A
    39 8390 AA B6 AA AA AA AA + .by  $AA $B6 $AA $AA $AA $AA $AA $AA  $AA $AA $A5 $55 $6A $95 $9A $9A  $A9 $55 $5A $A9 $9A $5A $A9 $55
    40 83A8 5A A9 A6 5A A9 55 + .by  $5A $A9 $A6 $5A $A9 $55 $5A $A9  $9A $9A $A9 $55 $5A $A9 $66 $A5  $AA $55 $56 $2A $AA $AA $AA $AA
    41 83C0 0A AA AA AA A8 0A + .by  $0A $AA $AA $AA $A8 $0A $AA $AA  $AA $A8 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA
    42 83D8 A0 02 AA AA AA A0 + .by  $A0 $02 $AA $AA $AA $A0 $02 $AA  $AA $AA $A0 $02 $AA $AA $AA $A0  $02 $AA $AA $AA $A0 $02 $AA $AA
    43 83F0 AA A0 02 AA AA AA + .by  $AA $A0 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA  $A0 $00 $AA $AA $AA $80 $00 $10
    44 8408 01 1F D0 01 54 52 + .by  $01 $1F $D0 $01 $54 $52 $01 $6F  $D1 $81 $74 $51 $E1 $6F $D0 $F9  $54 $50 $F1 $1F $D0 $61 $14 $90
    45 8420 41 1F 10 01 00 10 + .by  $41 $1F $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $40 $10 $0D  $38 $10 $31 $2C $10 $C1 $32 $13
    46 8438 01 11 14 01 08 93 + .by  $01 $11 $14 $01 $08 $93 $01 $05  $D3 $C1 $03 $D1 $A1 $01 $91 $11  $00 $10 $01 $FF $FF $FF $00 $10
    47 8450 01 00 10 01 54 17 + .by  $01 $00 $10 $01 $54 $17 $C1 $01  $10 $31 $00 $10 $09 $00 $90 $09  $00 $10 $09 $01 $10 $31 $54 $17
    48 8468 C1 00 10 01 00 10 + .by  $C1 $00 $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $00 $10 $01  $07 $D0 $01 $1F $90 $01 $23 $10
    49 8480 01 47 10 01 3F 10 + .by  $01 $47 $10 $01 $3F $10 $01 $1F  $90 $01 $07 $D0 $01 $00 $10 $01  $00 $10 $01 $FF $FF $FF $00 $00
    50 8498 00 00 3E 00 01 80 + .by  $00 $00 $3E $00 $01 $80 $00 $40  $00 $40 $00 $40 $00 $80 $00 $80  $1F $00 $00 $00 $00 $00 $00 $00
    51 84B0 00 00 00 00 03 80 + .by  $00 $00 $00 $00 $03 $80 $0E $00  $1B $80 $0E $00 $03 $80 $00 $00  $00 $00 $00 $00 $00 $00 $40 $40
    52 84C8 40 00 40 A0 A0 00 + .by  $40 $00 $40 $A0 $A0 $00 $00 $00  $A0 $E0 $A0 $E0 $A0 $40 $60 $80  $20 $C0 $A0 $20 $40 $80 $A0 $40
    53 84E0 A0 40 A0 60 40 40 + .by  $A0 $40 $A0 $60 $40 $40 $00 $00  $00 $40 $80 $80 $80 $40 $80 $40  $40 $40 $80 $00 $A0 $40 $A0 $00
    54 84F8 00 40 E0 40 00 00 + .by  $00 $40 $E0 $40 $00 $00 $00 $00  $40 $80 $00 $00 $E0 $00 $00 $00  $00 $00 $00 $40 $20 $20 $40 $80
    55 8510 80 40 A0 A0 A0 40 + .by  $80 $40 $A0 $A0 $A0 $40 $40 $C0  $40 $40 $40 $C0 $20 $40 $80 $E0  $C0 $20 $40 $20 $C0 $80 $A0 $60
    56 8528 20 20 E0 80 C0 20 + .by  $20 $20 $E0 $80 $C0 $20 $C0 $40  $80 $C0 $A0 $40 $E0 $20 $40 $80  $80 $40 $A0 $40 $A0 $40 $40 $A0
    57 8540 60 20 40 00 40 00 + .by  $60 $20 $40 $00 $40 $00 $40 $00  $00 $40 $00 $40 $80 $20 $40 $80  $40 $20 $00 $E0 $00 $E0 $00 $80
    58 8558 40 20 40 80 E0 20 + .by  $40 $20 $40 $80 $E0 $20 $40 $00  $40 $E0 $A0 $A0 $80 $E0 $E0 $A0  $A0 $E0 $A0 $E0 $A0 $C0 $A0 $E0
    59 8570 E0 80 80 80 E0 C0 + .by  $E0 $80 $80 $80 $E0 $C0 $A0 $A0  $A0 $C0 $E0 $80 $C0 $80 $E0 $E0  $80 $C0 $80 $80 $E0 $80 $A0 $A0
    60 8588 E0 A0 A0 E0 A0 A0 + .by  $E0 $A0 $A0 $E0 $A0 $A0 $E0 $40  $40 $40 $E0 $20 $20 $20 $A0 $E0  $A0 $A0 $C0 $A0 $A0 $80 $80 $80
    61 85A0 80 E0 C0 E0 E0 A0 + .by  $80 $E0 $C0 $E0 $E0 $A0 $A0 $C0  $A0 $A0 $A0 $A0 $E0 $A0 $A0 $A0  $E0 $E0 $A0 $E0 $80 $80 $E0 $A0
    62 85B8 A0 A0 C0 E0 A0 C0 + .by  $A0 $A0 $C0 $E0 $A0 $C0 $A0 $A0  $60 $80 $40 $20 $C0 $E0 $40 $40  $40 $40 $A0 $A0 $A0 $A0 $C0 $A0
    63 85D0 A0 A0 C0 80 A0 A0 + .by  $A0 $A0 $C0 $80 $A0 $A0 $E0 $E0  $C0 $A0 $A0 $40 $A0 $A0 $A0 $A0  $60 $20 $C0 $E0 $20 $40 $80 $E0
    64 85E8 60 40 40 40 60 80 + .by  $60 $40 $40 $40 $60 $80 $80 $40  $20 $20 $C0 $40 $40 $40 $C0 $40  $A0 $00 $00 $00 $00 $00 $00 $00
    65 8600 E0 04 04 04 00 04 + .by  $E0 $04 $04 $04 $00 $04 $0A $0A  $00 $00 $00 $0A $0E $0A $0E $0A  $04 $06 $08 $02 $0C $0A $02 $04
    66 8618 08 0A 04 0A 04 0A + .by  $08 $0A $04 $0A $04 $0A $06 $04  $04 $00 $00 $00 $04 $08 $08 $08  $04 $08 $04 $04 $04 $08 $00 $0A
    67 8630 04 0A 00 00 04 0E + .by  $04 $0A $00 $00 $04 $0E $04 $00  $00 $00 $00 $04 $08 $00 $00 $0E  $00 $00 $00 $00 $00 $00 $04 $02
    68 8648 02 04 08 08 04 0A + .by  $02 $04 $08 $08 $04 $0A $0A $0A  $04 $04 $0C $04 $04 $04 $0C $02  $04 $08 $0E $0C $02 $04 $02 $0C
    69 8660 08 0A 06 02 02 0E + .by  $08 $0A $06 $02 $02 $0E $08 $0C  $02 $0C $04 $08 $0C $0A $04 $0E  $02 $04 $08 $08 $04 $0A $04 $0A
    70 8678 04 04 0A 06 02 04 + .by  $04 $04 $0A $06 $02 $04 $00 $04  $00 $04 $00 $00 $04 $00 $04 $08  $02 $04 $08 $04 $02 $00 $0E $00
    71 8690 0E 00 08 04 02 04 + .by  $0E $00 $08 $04 $02 $04 $08 $0E  $02 $04 $00 $04 $0E $0A $0A $08  $0E $0E $0A $0A $0E $0A $0E $0A
    72 86A8 0C 0A 0E 0E 08 08 + .by  $0C $0A $0E $0E $08 $08 $08 $0E  $0C $0A $0A $0A $0C $0E $08 $0C  $08 $0E $0E $08 $0C $08 $08 $0E
    73 86C0 08 0A 0A 0E 0A 0A + .by  $08 $0A $0A $0E $0A $0A $0E $0A  $0A $0E $04 $04 $04 $0E $02 $02  $02 $0A $0E $0A $0A $0C $0A $0A
    74 86D8 08 08 08 08 0E 0C + .by  $08 $08 $08 $08 $0E $0C $0E $0E  $0A $0A $0C $0A $0A $0A $0A $0E  $0A $0A $0A $0E $0E $0A $0E $08
    75 86F0 08 0E 0A 0A 0A 0C + .by  $08 $0E $0A $0A $0A $0C $0E $0A  $0C $0A $0A $06 $08 $04 $02 $0C  $0E $04 $04 $04 $04 $0A $0A $0A
    76 8708 0A 0C 0A 0A 0A 0C + .by  $0A $0C $0A $0A $0A $0C $08 $0A  $0A $0E $0E $0C $0A $0A $04 $0A  $0A $0A $0A $06 $02 $0C $0E $02
    77 8720 04 08 0E 06 04 04 + .by  $04 $08 $0E $06 $04 $04 $04 $06  $08 $08 $04 $02 $02 $0C $04 $04  $04 $0C $04 $0A $00 $00 $00 $00
    78 8738 00 00 00 0E 30 30 + .by  $00 $00 $00 $0E $30 $30 $30 $00  $30 $CC $CC $00 $00 $00 $CC $FC  $CC $FC $CC $3C $F0 $30 $3C $F0
    79 8750 CC 0C 30 C0 CC 30 + .by  $CC $0C $30 $C0 $CC $30 $CC $30  $CC $3C $30 $30 $00 $00 $00 $30  $C0 $C0 $C0 $30 $30 $0C $0C $0C
    80 8768 30 00 00 30 00 00 + .by  $30 $00 $00 $30 $00 $00 $00 $30  $FC $30 $00 $00 $00 $00 $30 $C0  $00 $00 $FC $00 $00 $00 $00 $00
    81 8780 00 30 0C 0C 30 C0 + .by  $00 $30 $0C $0C $30 $C0 $C0 $FC  $CC $CC $CC $FC $30 $F0 $30 $30  $30 $F0 $0C $30 $C0 $FC $FC $0C
    82 8798 30 0C F0 CC CC 3C + .by  $30 $0C $F0 $CC $CC $3C $0C $0C  $FC $C0 $F0 $0C $F0 $30 $C0 $F0  $CC $30 $FC $0C $30 $C0 $C0 $30
    83 87B0 CC 30 CC 30 30 CC + .by  $CC $30 $CC $30 $30 $CC $3C $0C  $30 $00 $30 $00 $30 $00 $00 $30  $00 $30 $C0 $0C $30 $C0 $30 $0C
    84 87C8 00 FC 00 FC 00 C0 + .by  $00 $FC $00 $FC $00 $C0 $30 $0C  $30 $C0 $F0 $0C $30 $00 $30 $30  $CC $CC $C0 $3C $FC $CC $CC $FC
    85 87E0 CC FC CC F0 CC FC + .by  $CC $FC $CC $F0 $CC $FC $FC $C0  $C0 $C0 $FC $F0 $CC $CC $CC $F0  $FC $C0 $F0 $C0 $FC $FC $C0 $F0
    86 87F8 C0 C0 FC C0 CC CC + .by  $C0 $C0 $FC $C0 $CC $CC $FC $CC  $CC $FC $CC $CC $FC $30 $30 $30  $FC $0C $0C $0C $0C $F0 $CC $CC
    87 8810 F0 CC CC C0 C0 C0 + .by  $F0 $CC $CC $C0 $C0 $C0 $C0 $FC  $F0 $FC $FC $CC $CC $F0 $CC $CC  $CC $CC $30 $CC $CC $CC $30 $FC
    88 8828 CC FC C0 C0 30 CC + .by  $CC $FC $C0 $C0 $30 $CC $CC $CC  $3C $FC $CC $F0 $CC $CC $3C $C0  $30 $0C $F0 $FC $30 $30 $30 $30
    89 8840 CC CC CC CC F0 CC + .by  $CC $CC $CC $CC $F0 $CC $CC $CC  $F0 $C0 $CC $CC $FC $FC $F0 $CC  $CC $30 $CC $CC $CC $CC $3C $0C
    90 8858 F0 FC 0C 30 C0 FC + .by  $F0 $FC $0C $30 $C0 $FC $3C $30  $30 $30 $3C $C0 $C0 $30 $0C $0C  $F0 $30 $30 $30 $F0 $30 $CC $00
    91 8870 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $FC $57  $81 $87 $81 $E7 $81 $B7 $81 $17  $82 $47 $82 $6F $81 $9F $81 $FF
    92 8888 81 CF 81 2F 82 5F + .by  $81 $CF $81 $2F $82 $5F $82 $77  $82 $9B $82 $BF $82 $E3 $82 $07  $83 $2B $83 $4F $83 $73 $83 $97
    93 88A0 83 01 01 01 01 01 + .by  $83 $01 $01 $01 $01 $01 $0E $0E  $0E $0E $0E $1B $1B $1B $1B $1B  $0D $14 $1B $22 $29 $0D $14 $1B
    94 88B8 22 29 0D 14 1B 22 + .by  $22 $29 $0D $14 $1B $22 $29 $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $41 $42 $43 $44 $45 $46
Source: SIED.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 88CF			RTLIB
   126 88CF				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    84 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTBUF: ',@buf,'..',@buf+255
   130 				RTBUF: $0400..$04FF
   131
   132 				.print 'RTLIB: ',RTLIB,'..',*-1
   132 				RTLIB: $88CF..$89BE
   133
   134 				; ------------------------------------------------------------
   135
   136 89BF			START
   137 89BF BA				tsx
   138 89C0 8E 46 A3			stx MAIN.@halt+1
   139
   140 					.ifdef MAIN.@DEFINES.ROMOFF
   141 89C3				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 89C3			.local	rominit
     5
     6 89C3 78			        sei
     7 89C4 A9 00		        lda #%00000000
     8 89C6 8D 0E D4		        sta NMIEN       ;$D40E
     9 89C9 A9 FE		        lda #%11111110
    10 89CB 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 89CE A2 EB		        ldx #<nmiint
    33 89D0 A0 89		        ldy #>nmiint
    34 89D2 8E FA FF		        stx NMIVEC      ;$FFFA
    35 89D5 8C FB FF		        sty NMIVEC+1
    36
    37 89D8 A2 F5		        ldx #<irqint
    38 89DA A0 89		        ldy #>irqint
    39 89DC 8E FE FF		        stx IRQVEC      ;$FFFE
    40 89DF 8C FF FF		        sty IRQVEC+1
    41
    42 89E2 A9 40		        lda #%01000000
    43 89E4 8D 0E D4		        sta NMIEN       ;$D40E
    44 89E7 58			        cli
    45
    46 89E8 4C 16 8A			jmp skp
    47
    48
    49
    50 89EB 2C 0F D4		nmiint  bit NMIST        ;$D40F
    51 89EE 10 03		        spl
    52 89F0 6C 00 02		        jmp (VDSLST)     ;$0200
    53
    54 89F3 38			        sec
    55 89F4 24			        .byte $24        ;BIT $18
    56
    57 89F5 18			irqint  clc
    58
    59 				        ;wlaczenie OS ROM
    60
    61 89F6 EE 01 D3		        inc PORTB       ;$D301
    62
    63 89F9 48			        pha
    64 89FA 8A			        txa
    65 89FB 48			        pha
    66 89FC BA			        tsx
    67
    68 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    69
    70 89FD A9 8A		        lda #>iret      ;adres procedury iret
    71 89FF 48			        pha
    72 8A00 A9 0F		        lda #<iret
    73 8A02 48			        pha
    74 8A03 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    75 8A06 48			        pha
    76
    77 				        ;skok przez odpowiedni wektor przerwania
    78
    79 8A07 90 03		        scc
    80 8A09 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    81 8A0C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    82
    83 8A0F 68			iret	pla
    84 8A10 AA				tax
    85 8A11 68				pla
    86
    87 				        ;wylaczenie OS ROM
    88
    89 8A12 CE 01 D3		        dec PORTB       ;$D301
    90 8A15 40			        rti
    91
    92 8A16			skp
    93
    94 				.endl
    95
   142 					.fi
   143
   144 = 00D0			VLEN	= VARDATASIZE-VARINITSIZE
   145 = A4AA			VADR	= DATAORIGIN+VARINITSIZE
   146
   147 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   148 					ert 'Invalid memory address range ',VADR
   149 					eif
   150
   151 					ift (VLEN > 0) && (VLEN <= 256)
   152 8A16 A2 30			ldx #256-VLEN
   153 8A18 A9 00			lda #$00
   154 8A1A 9D 7A A4 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   155 					eli VLEN>256
   156 					m@init
   157 					eif
   158
   159 				.ifdef psptr
   160 					mwa #PROGRAMSTACK psptr
   161 				.fi
   162
   163 8A20 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   164 8A22 BD 40 03 9D 4E A3 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   165
   166 8A2B E8				inx						; X = 0
   167 8A2C 86 80			stx bp						; BP = 0
   168
   169 8A2E 8E 08 D2			stx audctl					; reset POKEY
   170 8A31 8E 18 D2			stx audctl+$10
   171 8A34 A9 03			lda #3
   172 8A36 8D 0F D2			sta skctl
   173 8A39 8D 1F D2			sta skctl+$10
   174
   175 8A3C CA				dex						; X = 255
   176
   177 8A3D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: SIED.a65]
   178
   179 8A3D			.local	MAIN						; PROCEDURE
   180
   181 8A3D 4C 21 A3			jmp l_00EC
   182
   183 				; ------------------------------------------------------------
   184
   185 8A40			.local	SYSTEM						; UNIT
   186
   187 8A40			.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   188 8A40			.local	@012A
   189
   190 					.MACRO m@INLINE
   191 				
   192 				; -------------------  ASM Block 00000027  -------------------
   193 				
   194 					jsr @fill
   195 				
   196 					.ENDM
   197
   198 				; ------------------------------------------------------------
   199
   200 = 0088			A	= :EDX
   201 = 008C			COUNT	= :ECX
   202 = 0084			VALUE	= :EAX
   203 8A40			@exit
   204 				.endl
   205 				.endl							; overload
   206
   207 8A40			.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   208 8A40			.local	@012B
   209
   210 					.MACRO m@INLINE
   211 				
   212 				; -------------------  ASM Block 00000034  -------------------
   213 				
   214 					jsr @move
   215 				
   216 					.ENDM
   217
   218 				; ------------------------------------------------------------
   219
   220 = 0088			SOURCE	= :EDX
   221 = 008C			DEST	= :ECX
   222 = 0084			COUNT	= :EAX
   223 8A40			@exit
   224 				.endl
   225 				.endl							; overload
   226
   227 				; ------------------------------------------------------------
   228
   229 = 0101			__PORTB_BANKS	= $0101
   230 = 0648			M_PI_2	= $0648
   231 = 0192			D_PI_2	= $0192
   232 = 0004			D_PI_180	= $04
   233 = 0000			MGTIA	= $00
   234 = 0080			MVBXE	= $80
   235 = 0000			VBXE_XDLADR	= $00
   236 = 00E0			VBXE_BCBTMP	= $E0
   237 = 0100			VBXE_BCBADR	= $0100
   238 = 1000			VBXE_MAPADR	= $1000
   239 = 1000			VBXE_CHBASE	= $1000
   240 = 5000			VBXE_OVRADR	= $5000
   241 = B000			VBXE_WINDOW	= $B000
   242 = 0000			IDLI	= $00
   243 = 0001			IVBL	= $01
   244 = 0001			IVBLD	= $01
   245 = 0002			IVBLI	= $02
   246 = 0003			ITIM1	= $03
   247 = 0004			ITIM2	= $04
   248 = 0005			ITIM4	= $05
   249 = 00FE			CH_DELCHR	= $FE
   250 = 009B			CH_ENTER	= $9B
   251 = 001B			CH_ESC	= $1B
   252 = 001C			CH_CURS_UP	= $1C
   253 = 001D			CH_CURS_DOWN	= $1D
   254 = 001E			CH_CURS_LEFT	= $1E
   255 = 001F			CH_CURS_RIGHT	= $1F
   256 = 007F			CH_TAB	= $7F
   257 = 009B			CH_EOL	= $9B
   258 = 007D			CH_CLR	= $7D
   259 = 00FD			CH_BELL	= $FD
   260 = 007E			CH_DEL	= $7E
   261 = 009C			CH_DELLINE	= $9C
   262 = 009D			CH_INSLINE	= $9D
   263 = 0000			PAL_PMCOLOR0	= $00
   264 = 0001			PAL_PMCOLOR1	= $01
   265 = 0002			PAL_PMCOLOR2	= $02
   266 = 0003			PAL_PMCOLOR3	= $03
   267 = 0004			PAL_COLOR0	= $04
   268 = 0005			PAL_COLOR1	= $05
   269 = 0006			PAL_COLOR2	= $06
   270 = 0007			PAL_COLOR3	= $07
   271 = 0008			PAL_COLBAK	= $08
   272 = 0000			COLOR_BLACK	= $00
   273 = 000E			COLOR_WHITE	= $0E
   274 = 0032			COLOR_RED	= $32
   275 = 0096			COLOR_CYAN	= $96
   276 = 0068			COLOR_VIOLET	= $68
   277 = 00C4			COLOR_GREEN	= $C4
   278 = 0074			COLOR_BLUE	= $74
   279 = 00EE			COLOR_YELLOW	= $EE
   280 = 0028			COLOR_ORANGE	= $28
   281 = 00E4			COLOR_BROWN	= $E4
   282 = 003C			COLOR_LIGHTRED	= $3C
   283 = 0004			COLOR_GRAY1	= $04
   284 = 0006			COLOR_GRAY2	= $06
   285 = 000A			COLOR_GRAY3	= $0A
   286 = 00CC			COLOR_LIGHTGREEN	= $CC
   287 = 007C			COLOR_LIGHTBLUE	= $7C
   288 = 0004			FMOPENREAD	= $04
   289 = 0008			FMOPENWRITE	= $08
   290 = 0009			FMOPENAPPEND	= $09
   291 = 000C			FMOPENREADWRITE	= $0C
   292 = A423			SCREENWIDTH	= DATAORIGIN+$0000
   293 = A425			SCREENHEIGHT	= DATAORIGIN+$0002
   294 = A427			DATESEPARATOR	= DATAORIGIN+$0004
   295 = A428			FILEMODE	= DATAORIGIN+$0005
   296 = A429			GRAPHMODE	= DATAORIGIN+$0006
   297 = A42A			IORESULT	= DATAORIGIN+$0007
   298 = A42B			EOLN	= DATAORIGIN+$0008
   299 = D20A			RND	= $D20A
   300 = 02C0			adr.PALETTE	= $02C0
   301 8A40			.var PALETTE	= adr.PALETTE .word
   302 = D012			adr.HPALETTE	= $D012
   303 8A40			.var HPALETTE	= adr.HPALETTE .word
   304 = A42C			RNDSEED	= DATAORIGIN+$0009
   305
   306 = 8A40 C0 02		PALETTE
   306 = 8A42 12 D0		HPALETTE
   306 				.endl							; UNIT SYSTEM
   307
   308 				; ------------------------------------------------------------
   309
   310 8A44			.local	CIO						; UNIT
   311
   312 8A44			.local	OPN						; PROCEDURE | ASSEMBLER
   313
   314 				; -------------------  ASM Block 00000059  -------------------
   315
   316 8A44 8A 48			txa:pha
   317
   318 8A46 AD 2E A4			lda chn
   319 8A49 0A 0A 0A 0A			:4 asl @
   320 8A4D AA				tax
   321
   322 8A4E A9 03			lda #$03		;komenda: OPEN
   323 8A50 9D 42 03			sta iccmd,x
   324
   325 8A53 EE 31 A4 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   326
   327 8A5B AD 31 A4			lda device		;adres nazwy pliku
   328 8A5E 9D 44 03			sta icbufa,x
   329 8A61 AD 32 A4			lda device+1
   330 8A64 9D 45 03			sta icbufa+1,x
   331
   332 8A67 AD 2F A4			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   333 8A6A 9D 4A 03			sta icax1,x
   334
   335 8A6D AD 30 A4			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   336 8A70 9D 4B 03			sta icax2,x
   337
   338 8A73				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A73 EE 01 D3				inc portb
     6 8A76 20 56 E4				jsr CIOV
     8 8A79 08					php		; save flags on stack
    10 8A7A CE 01 D3				dec portb
    12 8A7D 28					plp		; restore flags from stack
   339
   340 8A7E 8C 2A A4			sty MAIN.SYSTEM.IOResult
   341
   342 8A81 68 AA			pla:tax
   343
   344 				; ------------------------------------------------------------
   345
   346 = A42E			CHN	= DATAORIGIN+$000B
   347 = A42F			AX1	= DATAORIGIN+$000C
   348 = A430			AX2	= DATAORIGIN+$000D
   349 = A431			DEVICE	= DATAORIGIN+$000E
   350
   351 = A42E			@VarData	= CHN
   352 = 0005			@VarDataSize	= 5
   353
   354 8A83			@exit
   355 					.ifdef @new
   356 					lda <@VarData
   357 					sta :ztmp
   358 					lda >@VarData
   359 					ldy #@VarDataSize-1
   360 					jmp @FreeMem
   361 					els
   362 8A83 60				rts						; ret
   363 					eif
   364 				.endl
   365
   366 8A84			.local	CLS						; PROCEDURE | ASSEMBLER
   367 8A84 8D 33 A4			sta CHN
   368
   369 				; -------------------  ASM Block 00000060  -------------------
   370
   371 8A87 8A 48			txa:pha
   372
   373 8A89 AD 33 A4			lda chn
   374 8A8C 0A 0A 0A 0A			:4 asl @
   375 8A90 AA				tax
   376
   377 8A91 A9 0C			lda #$0c		;komenda: CLOSE
   378 8A93 9D 42 03			sta iccmd,x
   379
   380 8A96				m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8A96 EE 01 D3				inc portb
     6 8A99 20 56 E4				jsr CIOV
     8 8A9C 08					php		; save flags on stack
    10 8A9D CE 01 D3				dec portb
    12 8AA0 28					plp		; restore flags from stack
   381
   382 8AA1 8C 2A A4			sty MAIN.SYSTEM.IOResult
   383
   384 8AA4 68 AA			pla:tax
   385
   386 				; ------------------------------------------------------------
   387
   388 = A433			CHN	= DATAORIGIN+$0010
   389
   390 = A433			@VarData	= CHN
   391 = 0001			@VarDataSize	= 1
   392
   393 8AA6			@exit
   394 					.ifdef @new
   395 					lda <@VarData
   396 					sta :ztmp
   397 					lda >@VarData
   398 					ldy #@VarDataSize-1
   399 					jmp @FreeMem
   400 					els
   401 8AA6 60				rts						; ret
   402 					eif
   403 				.endl
   404
   405 				; ------------------------------------------------------------
   406
   407 				.endl							; UNIT CIO
   408
   409 				; ------------------------------------------------------------
   410
   411 8AA7			.local	CURSOR						; UNIT
   412
   413 8AA7			.local	SETCURSOR					; PROCEDURE | ASSEMBLER | REGISTER
   414
   415 				; -------------------  ASM Block 00000069  -------------------
   416
   417 8AA7 A5 88		  lda spr
   418 8AA9 8D E2 8B		  sta main.cursor.myVBL.CURSORSPR
   419 8AAC A5 89		  lda spr+1
   420 8AAE 8D E3 8B		  sta main.cursor.myVBL.CURSORSPR+1
   421 8AB1 A9 01		  lda #1
   422 8AB3 85 5C		  sta mRefresh
   423 8AB5 A5 14		  lda $14
   424 8AB7 C5 14		  cmp $14
   425 8AB9 F0 FC		  beq *-2
   426
   427 				; ------------------------------------------------------------
   428
   429 = 0088			SPR	= :EDX
   430 8ABB			@exit
   431 					.ifdef @new
   432 					lda <@VarData
   433 					sta :ztmp
   434 					lda >@VarData
   435 					ldy #@VarDataSize-1
   436 					jmp @FreeMem
   437 					els
   438 8ABB 60				rts						; ret
   439 					eif
   440 				.endl
   441
   442 8ABC			.local	SETPIVOT					; PROCEDURE | ASSEMBLER | REGISTER
   443
   444 				; -------------------  ASM Block 00000070  -------------------
   445
   446 8ABC A5 88		  lda x
   447 8ABE 8D F8 8B		  sta main.cursor.myVBL.mpivotX
   448 8AC1 A5 8C		  lda y
   449 8AC3 8D DF 8B		  sta main.cursor.myVBL.mpivotY
   450
   451 				; ------------------------------------------------------------
   452
   453 = 0088			X	= :EDX
   454 = 008C			Y	= :ECX
   455 8AC6			@exit
   456 					.ifdef @new
   457 					lda <@VarData
   458 					sta :ztmp
   459 					lda >@VarData
   460 					ldy #@VarDataSize-1
   461 					jmp @FreeMem
   462 					els
   463 8AC6 60				rts						; ret
   464 					eif
   465 				.endl
   466
   467 8AC7			.local	MYVBL						; PROCEDURE | ASSEMBLER | INTERRUPT | KEEP
   468
   469 				; -------------------  ASM Block 00000071  -------------------
   470
   471 8AC7 A9 00		  lda #0
   472 8AC9 85 4D		  sta 77
   473
   474 				    // lda #<MAIN.cursor.myDLI
   475 				    // sta DLIV
   476 				    // lda #>MAIN.cursor.myDLI
   477 				    // sta DLIV+1
   478
   479 8ACB			  icl 'asm/cursor.a65'
Source: cursor.a65
     1 = D000			HPOSP0 = $D000
     2 = D001			HPOSP1 = $D001
     3 = D300			stick  = $D300 ; $278
     4 = D010			strig  = $D010
     5
     6 				//  if tm and 1=0 then
     7 				  ; lda tm
     8 				  ; and #1
     9 				  ; sne:jmp xitvbv
    10
    11 8ACB A5 5C		  lda mRefresh
    12 8ACD F0 07		  beq checkStick
    13 8ACF A9 00		  lda #0
    14 8AD1 85 5C		  sta mRefresh
    15 8AD3 4C 7D 8B		  jmp clrcrs
    16
    17 8AD6			checkStick:
    18 8AD6 AD 10 D0		  lda strig
    19 8AD9 49 01		  eor #$1
    20 8ADB 85 4A		  sta mbutton
    21
    22 				//  if (stick<>%1111) then
    23 8ADD AD 00 D3		  lda stick
    24 8AE0 29 0F		  and #%1111
    25 8AE2 49 0F		  eor #%1111
    26 8AE4 F0 4B		  beq checkKeys
    27 8AE6 AA			  tax
    28
    29 8AE7 29 0C		  and #%1100
    30 8AE9 D0 06		  bne stickHtest
    31 8AEB A9 00		  lda #0
    32 8AED 85 5B		  sta mdx
    33 8AEF F0 19		  beq stickTest2  // always jump
    34
    35 8AF1			stickHTest:
    36 8AF1 29 04		  and #%0100    // left
    37 8AF3 F0 08		  beq @+
    38 8AF5 A9 F0		  lda #(-16)
    39 8AF7 C5 5B		  cmp mdx
    40 8AF9 10 02 C6 5B		  spl:dec mdx
    41
    42 				@:
    43 8AFD 8A			  txa
    44 8AFE 29 08		  and #%1000    // right
    45 8B00 F0 08		  beq stickTest2
    46 8B02 A5 5B		  lda mdx
    47 8B04 C9 10		  cmp #16
    48 8B06 10 02 E6 5B		  spl:inc mdx
    49
    50 8B0A			stickTest2:
    51 8B0A 8A			  txa
    52 8B0B 29 03		  and #%0011
    53 8B0D D0 06		  bne stickVtest
    54 8B0F A9 00		  lda #0
    55 8B11 85 5A		  sta mdy
    56 8B13 F0 68		  beq clrcrs  // always jump
    57
    58 8B15			stickVtest:
    59 8B15 29 01		  and #%0001    // up
    60 8B17 F0 08		  beq @+
    61 8B19 A9 F0		  lda #(-16)
    62 8B1B C5 5A		  cmp mdy
    63 8B1D 10 02 C6 5A		  spl:dec mdy
    64
    65 				@:
    66 8B21 8A			  txa
    67 8B22 29 02		  and #%0010    // down
    68 8B24 F0 57		  beq clrcrs
    69 8B26 A5 5A		  lda mdy
    70 8B28 C9 10		  cmp #16
    71 8B2A 10 02 E6 5A		  spl:inc mdy
    72 8B2E 4C 7D 8B		  jmp clrcrs
    73
    74 8B31			checkKeys:
    75 8B31 A5 5D		  lda mAllowKeys
    76 8B33 F0 14		  beq xit
    77
    78 8B35 AD 0F D2		  lda SKSTAT
    79 8B38 29 08		  and #%00001000
    80 8B3A D0 04		  bne skButton
    81 8B3C A9 01		  lda #MBUT_LEFT
    82 8B3E 85 4A		  sta mbutton
    83
    84 8B40			skButton:
    85 8B40 AD FC 02		  lda KEYB
    86 8B43 29 1F		  and #%0011111
    87 8B45 C9 FF		  cmp #$FF
    88 8B47 D0 09		  bne testKeys
    89
    90 8B49			xit:
    91 8B49 A9 00		  lda #0
    92 8B4B 85 5B		  sta mdx
    93 8B4D 85 5A		  sta mdy
    94 8B4F 4C 11 8C		  jmp exvbl
    95
    96 8B52			testKeys:
    97 8B52 C9 0E		  cmp #K_UP
    98 8B54 D0 06		  bne @+
    99 8B56 A2 FC		  ldx #(-4)
   100 8B58 86 5A		  stx mdy
   101 8B5A 30 1C		  bmi clrKey
   102
   103 				@:
   104 8B5C C9 0F		  cmp #K_DOWN
   105 8B5E D0 06		  bne @+
   106 8B60 A2 04		  ldx #(+4)
   107 8B62 86 5A		  stx mdy
   108 8B64 10 12		  bpl clrKey
   109
   110 				@:
   111 8B66 C9 06		  cmp #K_LEFT
   112 8B68 D0 06		  bne @+
   113 8B6A A2 FC		  ldx #(-4)
   114 8B6C 86 5B		  stx mdx
   115 8B6E 30 08		  bmi clrKey
   116
   117 				@:
   118 8B70 C9 07		  cmp #K_RIGHT
   119 8B72 D0 D5		  bne xit
   120 8B74 A2 04		  ldx #(+4)
   121 8B76 86 5B		  stx mdx
   122
   123 8B78			clrKey:
   124 8B78 A9 FF		  lda #$ff
   125 8B7A 8D FC 02		  sta KEYB
   126
   127 8B7D			clrcrs:
   128 				// clear old cursor
   129 8B7D A2 06		  ldx #6
   130 8B7F A5 53		  lda _my
   131 8B81 38 E9 00		  sub ompivotY:#00
   132 8B84 A8			  tay
   133 8B85 A9 00		  lda #0
   134 8B87			lclrcrs:
   135 8B87 99 00 22		  sta PMG_ADDR+$200,y
   136 8B8A 99 81 22		  sta PMG_ADDR+$281,y
   137 8B8D C8			  iny
   138 8B8E CA			  dex
   139 8B8F 10 F6		  bpl lclrcrs
   140
   141 8B91			calccrs:      // calculate new cursor position
   142 8B91 A5 5B		  lda mdx
   143 8B93 10 06		  bpl @+
   144 8B95 4A			  lsr @
   145 8B96 4A			  lsr @
   146 8B97 09 C0		  ora #%11000000
   147 8B99 30 02		  bmi adddx
   148 				@:
   149 8B9B 4A			  lsr @
   150 8B9C 4A			  lsr @
   151
   152 8B9D			adddx:
   153 8B9D 18 65 52		  add _mx
   154 8BA0 85 52		  sta _mx
   155
   156 8BA2 C9 2C		  cmp #44     // left edge of screen
   157 8BA4 B0 06		  bcs @+
   158 8BA6 A9 2C		  lda #44
   159 8BA8 85 52		  sta _mx      // stay on left edge
   160 8BAA 10 09		  bpl checkMY // always jump
   161 				@:
   162 8BAC 38 E9 D2		  sub #210    // right edge of screen
   163 8BAF 90 04		  bcc checkMY
   164 8BB1 A9 D2		  lda #210    // stay on right edge
   165 8BB3 85 52		  sta _mx
   166
   167 8BB5			checkMY:
   168 8BB5 A5 5A		  lda mdy
   169 8BB7 10 06		  bpl @+
   170 8BB9 4A			  lsr @
   171 8BBA 4A			  lsr @
   172 8BBB 09 C0		  ora #%11000000
   173 8BBD 30 02		  bmi adddy
   174 				@:
   175 8BBF 4A			  lsr @
   176 8BC0 4A			  lsr @
   177
   178 8BC1			adddy:
   179 8BC1 18 65 53		  add _my
   180 8BC4 85 53		  sta _my
   181
   182 8BC6 C9 06		  cmp #6     // top edge of screen
   183 8BC8 B0 06		  bcs @+
   184 8BCA A9 06		  lda #6
   185 8BCC 85 53		  sta _my      // stay on top edge
   186 8BCE 10 09		  bpl drawcrs // always jump
   187 				@:
   188 8BD0 38 E9 78		  sub #120    // bottom edge of screen
   189 8BD3 90 04		  bcc drawcrs
   190 8BD5 A9 78		  lda #120    // stay on bottom edge
   191 8BD7 85 53		  sta _my
   192
   193 8BD9			drawcrs:     // draw new cursor
   194 8BD9 A2 06		  ldx #6
   195 8BDB A5 53		  lda _my
   196 8BDD 38 E9 00		  sub mpivotY:#00
   197 8BE0 A8			  tay
   198 8BE1			ldrawcrs:
   199 8BE1 BD E8 80		  lda CURSORSPR:adr._ARROW,x
   200 8BE4 99 00 22		  sta PMG_ADDR+$200,y
   201 8BE7 99 81 22		  sta PMG_ADDR+$281,y
   202 8BEA C8			  iny
   203 8BEB CA			  dex
   204 8BEC 10 F3		  bpl ldrawcrs
   205
   206 8BEE AD DF 8B		  lda mpivotY
   207 8BF1 8D 83 8B		  sta ompivotY
   208
   209 8BF4 A5 52		  lda _mx
   210 8BF6 38 E9 00		  sub mpivotX:#0
   211 8BF9 AA			  tax
   212 8BFA 8E 00 D0		  stx HPOSP0
   213 8BFD E8			  inx
   214 8BFE 8E 01 D0		  stx HPOSP1
   215
   216 8C01 A5 52		  lda _mx
   217 8C03 38 E9 30		  sub #48
   218 8C06 4A			  lsr @
   219 8C07 4A			  lsr @
   220 8C08 85 55		  sta mx
   221
   222 8C0A A5 53		  lda _my
   223 8C0C 38 E9 18		  sub #24
   224 8C0F 85 54		  sta my
   225
   480 8C11			exVBL:
   481 8C11 4C 62 E4		  jmp xitvbv
   482
   483 8C14 40				rti						; ret
   484 				.endl
   485
   486 8C15			.local	INITCURSOR					; PROCEDURE
   487
   488 				; optimize OK (CURSOR), line = 82
   489
   490 8C15 A9 20			lda #$20
   491 8C17 8D 07 D4			sta PMBASE
   492
   493 				; optimize OK (CURSOR), line = 83
   494
   495 8C1A A9 03			lda #$03
   496 8C1C 8D 1D D0			sta PMCTL
   497
   498 				; optimize OK (CURSOR), line = 84
   499
   500 8C1F A9 02			lda #$02
   501 8C21 8D 6F 02			sta GPRIOR
   502
   503 				; optimize OK (CURSOR), line = 85
   504
   505 8C24 A9 2A			lda #$2A
   506 8C26 8D 2F 02			sta SDMACTL
   507
   508 				; optimize OK (CURSOR), line = 87
   509
   510 8C29 A9 0F			lda #$0F
   511 8C2B 8D C0 02			sta adr.PCOL
   512 8C2E A9 00			lda #$00
   513 8C30 8D C1 02			sta adr.PCOL+$01
   514
   515 				; optimize OK (CURSOR), line = 88
   516
   517 8C33 A9 C7			lda <MYVBL
   518 8C35 A0 05			ldy #5
   519 8C37 8D 0A D4			sta wsync
   520 8C3A 88				dey
   521 8C3B D0 FD			rne
   522 8C3D 8D 24 02			sta VVBLKD
   523 8C40 A9 8A			lda >MYVBL
   524 8C42 8D 25 02			sta VVBLKD+1
   525
   526 				; optimize OK (CURSOR), line = 89
   527
   528 8C45 A9 01			lda #$01
   529 8C47 85 5C			sta MREFRESH
   530
   531 				; optimize OK (CURSOR), line = 90
   532
   533 8C49 85 5D			sta MALLOWKEYS
   534
   535 				; optimize OK (CURSOR), line = 91
   536
   537 8C4B A9 80			lda #$80
   538 8C4D 85 52			sta _MX
   539 8C4F A9 40			lda #$40
   540 8C51 85 53			sta _MY
   541
   542 				; optimize OK (CURSOR), line = 92
   543
   544 8C53 A9 E8			lda #$E8
   545 8C55 85 88			sta SETCURSOR.SPR
   546 8C57 A9 80			lda #$80
   547 8C59 85 89			sta SETCURSOR.SPR+1
   548 8C5B 20 A7 8A			jsr SETCURSOR
   549
   550 				; optimize OK (CURSOR), line = 93
   551
   552 8C5E A9 00			lda #$00
   553 8C60 85 88			sta SETPIVOT.X
   554 8C62 85 8C			sta SETPIVOT.Y
   555 8C64 20 BC 8A			jsr SETPIVOT
   556 8C67			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					els
   564 8C67 60				rts						; ret
   565 					eif
   566 				.endl
   567
   568 				; ------------------------------------------------------------
   569
   570 = 80E8			adr._ARROW	= CODEORIGIN+$00E8
   571 8C68			.var _ARROW	= adr._ARROW .word
   572 = 80EF			adr._WAIT	= CODEORIGIN+$00EF
   573 8C68			.var _WAIT	= adr._WAIT .word
   574 = 80F6			adr._CROSS	= CODEORIGIN+$00F6
   575 8C68			.var _CROSS	= adr._CROSS .word
   576 = 0000			MBUT_NONE	= $00
   577 = 0001			MBUT_LEFT	= $01
   578 = 005C			MREFRESH	= $5C
   579 = 005D			MALLOWKEYS	= $5D
   580 = 0052			_MX	= $52
   581 = 0053			_MY	= $53
   582 = 0055			MX	= $55
   583 = 0054			MY	= $54
   584 = 005B			MDX	= $5B
   585 = 005A			MDY	= $5A
   586 = 0278			STICK	= $0278
   587 = 004A			MBUTTON	= $4A
   588 = 004B			OMBUTTON	= $4B
   589 = 0600			SCREEN_LINES_ADDR	= $0600
   590 = 2000			PMG_ADDR	= $2000
   591 = 2400			SCREEN_ADDR	= $2400
   592 = 2800			EDITOR_ADDR	= $2800
   593 = 3000			FONTS_ADDR	= $3000
   594 = 000F			MAX_SPRITE	= $0F
   595 = 0007			MAX_GROUP	= $07
   596 = 026F			GPRIOR	= $026F
   597 = 022F			SDMACTL	= $022F
   598 = D01D			PMCTL	= $D01D
   599 = D407			PMBASE	= $D407
   600 = D000			adr.HPOSP	= $D000
   601 8C68			.var HPOSP	= adr.HPOSP .word
   602 = D008			adr.SIZEP	= $D008
   603 8C68			.var SIZEP	= adr.SIZEP .word
   604 = 02C0			adr.PCOL	= $02C0
   605 8C68			.var PCOL	= adr.PCOL .word
   606
   607 = 8C68 E8 80		_ARROW
   607 = 8C6A EF 80		_WAIT
   607 = 8C6C F6 80		_CROSS
   607 = 8C6E 00 D0		HPOSP
   607 = 8C70 08 D0		SIZEP
   607 = 8C72 C0 02		PCOL
   607 				.endl							; UNIT CURSOR
   608
   609 8C74			.local	MYDLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   610
   611 				; -------------------  ASM Block 00000072  -------------------
   612
   613 = D016			COLPF0  = $D016  ; (708)
   614 = D017			COLPF1  = $D017  ; (709)
   615 = D018			COLPF2  = $D018  ; (710)
   616 = D019			COLPF3  = $D019  ; (711)
   617 = D01A			COLPF4  = $D01A  ; (712)
   618 = D40A			WSYNC   = $D40A
   619
   620 				  .macro m@setVDLI newVDLI
   621 				    lda #<:newVDLI
   622 				    sta DLIV
   623 				    lda #>:newVDLI
   624 				    sta DLIV+1
   625 				  .endm
   626
   627 8C74			dli1: // workarea
   628 8C74 48			  pha
   629 8C75 A9 E0		  lda #$E0
   630 8C77 8D 0A D4		  sta wsync
   631 8C7A 8D 0A D4		  sta wsync
   632 8C7D 8D 1A D0		  sta COLPF4
   633
   634 8C80			  m@setVDLI DLI3
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8C80 A9 A1		    lda #<DLI3
     2 8C82 8D 00 02		    sta DLIV
     3 8C85 A9 8C		    lda #>DLI3
     4 8C87 8D 01 02		    sta DLIV+1
   635
   636 8C8A 68			  pla
   637 8C8B 40			  rti
   638
   639 8C8C			dli2: // timeline
   640 8C8C 48			  pha
   641 8C8D A9 00		  lda #$00
   642 8C8F 8D 0A D4		  sta wsync
   643 				  // sta wsync
   644 8C92 8D 1A D0		  sta COLPF4
   645
   646 8C95			  m@setVDLI DLI3
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8C95 A9 A1		    lda #<DLI3
     2 8C97 8D 00 02		    sta DLIV
     3 8C9A A9 8C		    lda #>DLI3
     4 8C9C 8D 01 02		    sta DLIV+1
   647
   648 8C9F 68			  pla
   649 8CA0 40			  rti
   650
   651 8CA1			dli3: // controls
   652 8CA1 48 8A 48		  pha:txa:pha
   653 8CA4 A9 E6		  lda #$E6
   654 8CA6 A2 E0		  ldx #$E0
   655 8CA8 8D 0A D4		  sta wsync
   656 				  // sta wsync
   657 8CAB 8D 1A D0		  sta COLPF4
   658 8CAE 8E 17 D0		  stx COLPF1
   659 8CB1			  m@setVDLI DLI4
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8CB1 A9 BF		    lda #<DLI4
     2 8CB3 8D 00 02		    sta DLIV
     3 8CB6 A9 8C		    lda #>DLI4
     4 8CB8 8D 01 02		    sta DLIV+1
   660
   661 8CBB 68 AA 68		  pla:tax:pla
   662 8CBE 40			  rti
   663
   664 8CBF			dli4: // status
   665 8CBF 48 8A 48		  pha:txa:pha
   666 8CC2 A9 04		  lda #$04
   667 8CC4 A2 0F		  ldx #$0f
   668 8CC6 8D 0A D4		  sta wsync
   669 8CC9 8D 1A D0		  sta COLPF4
   670 8CCC 8E 17 D0		  stx COLPF1
   671 8CCF			  m@setVDLI DLI5
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8CCF A9 DD		    lda #<DLI5
     2 8CD1 8D 00 02		    sta DLIV
     3 8CD4 A9 8C		    lda #>DLI5
     4 8CD6 8D 01 02		    sta DLIV+1
   672
   673 8CD9 68 AA 68		  pla:tax:pla
   674 8CDC 40			  rti
   675
   676 8CDD			dli5:
   677 8CDD 48			  pha
   678 8CDE AD C8 02		  lda 712
   679 8CE1 8D 0A D4		  sta wsync
   680 8CE4 8D 1A D0		  sta COLPF4
   681
   682 8CE7			  m@setVDLI DLI1
Macro: MAIN.MYDLI.M@SETVDLI [Source: SIED.a65]
     1 8CE7 A9 74		    lda #<DLI1
     2 8CE9 8D 00 02		    sta DLIV
     3 8CEC A9 8C		    lda #>DLI1
     4 8CEE 8D 01 02		    sta DLIV+1
   683
   684 8CF1 68			  pla
   685 8CF2 40			  rti
   686
   687
   688 8CF3 40				rti						; ret
   689 				.endl
   690
   691 8CF4			.local	GETLN						; PROCEDURE | ASSEMBLER | REGISTER
   692
   693 				; -------------------  ASM Block 00000073  -------------------
   694
   695 8CF4			 icl 'asm/get_line.a65' 
Source: get_line.a65
     1 8CF4 8A 48		  txa:pha
     2
     3 8CF6 A5 88		  lda chn
     4 8CF8 0A 0A 0A 0A		  :4 asl @
     5 8CFC AA			  tax
     6
     7 8CFD A9 05		  lda #5
     8 8CFF 9D 42 03		  sta iccmd,x
     9
    10 8D02 A5 8D		  lda buf+1
    11 8D04 9D 45 03		  sta icbufa+1,x
    12 8D07 A5 8C		  lda buf
    13 8D09 18 69 01		  add #1
    14 8D0C 9D 44 03		  sta icbufa,x
    15 8D0F 90 03 FE 45 03	  scc:inc icbufa+1,X
    16
    17 8D14 A9 80		  lda #$80
    18 8D16 9D 48 03		  sta icbufl,x
    19 8D19 A9 00		  lda #0
    20 8D1B 9D 49 03		  sta icbufl+1,x
    21
    22 8D1E			  m@call	ciov
Macro: M@CALL [Source: macros.asm]
     4 8D1E EE 01 D3				inc portb
     6 8D21 20 56 E4				jsr CIOV
     8 8D24 08					php		; save flags on stack
    10 8D25 CE 01 D3				dec portb
    12 8D28 28					plp		; restore flags from stack
    23 8D29 8C 2A A4		  sty MAIN.SYSTEM.IOResult
    24
    25 8D2C BD 48 03		  lda icbufl,x
    26 8D2F A0 00		  ldy #0
    27 8D31 91 8C		  sta (buf),y
    28
    29 8D33 68 AA		  pla:tax
   696 				; ------------------------------------------------------------
   697
   698 = 0088			CHN	= :EDX
   699 = 008C			BUF	= :ECX
   700 8D35			@exit
   701 					.ifdef @new
   702 					lda <@VarData
   703 					sta :ztmp
   704 					lda >@VarData
   705 					ldy #@VarDataSize-1
   706 					jmp @FreeMem
   707 					els
   708 8D35 60				rts						; ret
   709 					eif
   710 				.endl
   711
   712 8D36			.local	REDUCEFILENAME					; PROCEDURE | ASSEMBLER | REGISTER
   713
   714 				; -------------------  ASM Block 00000074  -------------------
   715
   716 8D36			 icl 'asm/reduce_filename.a65' 
Source: reduce_filename.a65
     1 = 0088			inreg  = $88
     2 = 008C			outReg = $8c
     3
     4 8D36			  .local
     5
     6 8D36 8A 48		  txa:pha
     7
     8 8D38 A5 88		  lda inreg
     9 8D3A 8D 4C 8D		  sta inptr
    10 8D3D A5 89		  lda inreg+1
    11 8D3F 8D 4D 8D		  sta inptr+1
    12
    13 				; 0123456789abcdef01
    14 				;  *:FILENAMEEXT 000
    15
    16 8D42 A9 0B		  lda #$0b
    17 8D44 8D 57 8D		  sta fpos
    18
    19 8D47 A2 03		  ldx #3
    20 8D49 A0 01		  ldy #1
    21
    22 8D4B			fnLoop:
    23 8D4B BD 00 20		  lda inptr:$2000,x
    24 8D4E C9 20		  cmp #' '
    25 8D50 F0 03		  beq skip
    26 8D52 91 8C		  sta (outreg),y
    27 8D54 C8			  iny
    28 8D55			skip:
    29 8D55 E8			  inx
    30 8D56 E0 0B		  cpx fpos:#11
    31 8D58 D0 F1		  bne fnLoop
    32
    33 8D5A			dot:
    34 8D5A E0 0E		  cpx #$0e
    35 8D5C F0 0B		  beq storeDot
    36
    37 8D5E 98 48		  tya:pha
    38 8D60 C8			  iny
    39 8D61 A9 0E		  lda #$0e
    40 8D63 8D 57 8D		  sta fpos
    41 8D66 4C 4B 8D		  jmp fnLoop
    42
    43 8D69			storeDot:
    44 8D69 88			  dey
    45 8D6A 98 AA		  tya:tax   // move Y to X - string length
    46 8D6C 68 A8		  pla:tay   // pop stored dot position
    47
    48 8D6E 8E 72 8D		  stx len      // ex: X=$0a
    49 8D71 C9 00		  cmp len:#00   //     A=$09
    50 				                //   X-A=$0a-$09=-1($ff)
    51 8D73 30 04		  bmi putDot
    52
    53 8D75 CA			  dex
    54 8D76 4C 7D 8D		  jmp storeLen;
    55
    56 8D79			putDot:
    57 8D79 A9 2E		  lda #'.'
    58 8D7B 91 8C		  sta (outreg),y
    59
    60 8D7D			storeLen:
    61 8D7D 8A			  txa       // move string length to Accu
    62 8D7E A0 00		  ldy #0
    63 8D80 91 8C		  sta (outreg),y
    64
    65 8D82 68 AA		  pla:tax
    66
    67 				  .endl
   717 				; ------------------------------------------------------------
   718
   719 = 0088			INFN	= :EDX
   720 = 008C			OUTFN	= :ECX
   721 8D84			@exit
   722 					.ifdef @new
   723 					lda <@VarData
   724 					sta :ztmp
   725 					lda >@VarData
   726 					ldy #@VarDataSize-1
   727 					jmp @FreeMem
   728 					els
   729 8D84 60				rts						; ret
   730 					eif
   731 				.endl
   732
   733 8D85			.local	KEYSCAN2ASC					; FUNCTION | ASSEMBLER
   734 8D85 8D 34 A4			sta KEYSCAN
   735
   736 				; -------------------  ASM Block 00000075  -------------------
   737
   738 8D88			 icl 'asm/keyscan2asc.a65' 
Source: keyscan2asc.a65
     1 				; internal keyboard code in Accu
     2 = 0079			KEYDEFP = $79
     3
     4 8D88 A8			    tay
     5 8D89 8A 48		    txa:pha
     6 8D8B AE 01 D3		    ldx PORTB           ; turn on OS
     7 8D8E C0 C0		    cpy #$C0
     8 8D90 B0 0E		    bcs ignore
     9
    10 8D92 8A			    txa
    11 8D93 09 01		    ora #%00000001
    12 8D95 8D 01 D3		    sta PORTB
    13
    14 8D98 B1 79		    lda (KEYDEFP),y     ; use system keyboard mapping
    15 8D9A 30 04		    bmi ignore          ; no invers & control keys
    16 8D9C C9 1F		    cmp #31
    17 8D9E 10 02		    bpl ok              ; only alphanumeric keys
    18
    19 8DA0			ignore:
    20 8DA0 A9 00		    lda #0
    21 8DA2			ok:
    22 8DA2 8D 35 A4		    sta Result
    23 8DA5 8E 01 D3		    stx PORTB           ; restore old PORTB
    24 8DA8 68 AA		    pla:tax
    25
    26 8DAA 60			    rts
   739 8DAB			@exit
   740
   741 				; ------------------------------------------------------------
   742
   743 = A434			KEYSCAN	= DATAORIGIN+$0011
   744 = A435			RESULT	= DATAORIGIN+$0012
   745
   746 = A434			@VarData	= KEYSCAN
   747 = 0001			@VarDataSize	= 1
   748
   749 8DAB 60				rts						; ret
   750 				.endl
   751
   752 8DAC			.local	PUTIMAGE					; PROCEDURE | ASSEMBLER | REGISTER
   753
   754 				; -------------------  ASM Block 00000077  -------------------
   755
   756 8DAC			 icl 'asm/put-image.a65' 
Source: put-image.a65
     1 8DAC 8A 48		  txa:pha
     2
     3 				//  if activePage=1 then inc(y,56);
     4 8DAE A5 84		  lda y
     5 8DB0 A4 D4		  ldy activePage
     6 8DB2 F0 03		  beq skPage
     7 8DB4 18 69 38		  add #56
     8 8DB7			skPage:
     9
    10 8DB7 0A			  asl @   // y to table index
    11 8DB8 A8			  tay
    12
    13 				// x shr 3 (with sign keep)
    14 8DB9 A5 8C		  lda x
    15
    16 8DBB			calcSCR:
    17 8DBB 18 79 00 06		  add adr.YSCR,y
    18 8DBF 85 2E		  sta scr
    19 8DC1 B9 01 06		  lda adr.YSCR+1,y
    20 8DC4 18 69 00		  add #0
    21 8DC7 85 2F		  sta scr+1
    22
    23 				//
    24
    25 8DC9 AE 38 A4		  ldx height
    26
    27 8DCC			lline:
    28 8DCC AC 37 A4		  ldy width
    29 8DCF 88			  dey
    30 8DD0			lbyte:
    31 8DD0 B1 88		  lda (adr),y
    32 8DD2 91 2E		  sta (scr),y
    33 8DD4 88			  dey
    34 8DD5 10 F9		  bpl lbyte
    35
    36 8DD7 A5 2E		  lda scr
    37 8DD9 18 69 10		  add _LNWIDTH:#16
    38 8DDC 85 2E		  sta scr
    39 8DDE A5 2F		  lda scr+1
    40 8DE0 69 00		  adc #0
    41 8DE2 85 2F		  sta scr+1
    42
    43 8DE4 A5 88		  lda adr
    44 8DE6 18 6D 37 A4		  add width
    45 8DEA 85 88		  sta adr
    46 8DEC A5 89		  lda adr+1
    47 8DEE 69 00		  adc #0
    48 8DF0 85 89		  sta adr+1
    49
    50 8DF2 CA			  dex
    51 8DF3 D0 D7		  bne lline
    52
    53 8DF5			exPutImg:
    54 8DF5 68 AA		  pla:tax
   757 				; ------------------------------------------------------------
   758
   759 = 0088			ADR	= :EDX
   760 = 008C			X	= :ECX
   761 = 0084			Y	= :EAX
   762 = A437			WIDTH	= DATAORIGIN+$0014
   763 = A438			HEIGHT	= DATAORIGIN+$0015
   764
   765 = A437			@VarData	= WIDTH
   766 = 0002			@VarDataSize	= 2
   767
   768 8DF7			@exit
   769 					.ifdef @new
   770 					lda <@VarData
   771 					sta :ztmp
   772 					lda >@VarData
   773 					ldy #@VarDataSize-1
   774 					jmp @FreeMem
   775 					els
   776 8DF7 60				rts						; ret
   777 					eif
   778 				.endl
   779
   780 8DF8			.local	PUTSPRITE					; PROCEDURE | ASSEMBLER | REGISTER | KEEP
   781
   782 				; -------------------  ASM Block 00000078  -------------------
   783
   784 8DF8			 icl 'asm/put-sprite-or.a65' 
Source: put-sprite-or.a65
     1 8DF8 8A 48		  txa:pha
     2
     3 				//  if activePage=1 then inc(y,56);
     4 8DFA A5 84		  lda y
     5 8DFC A4 D4		  ldy activePage
     6 8DFE F0 03		  beq skPage
     7 8E00 18 69 38		  add #56
     8 8E03			skPage:
     9
    10 				//  scr:=Pointer(YSCR[y]+x shr 3);
    11 8E03 0A			  asl @
    12 8E04 A8			  tay
    13
    14 8E05 A5 8C		  lda x
    15 8E07 10 08		  bpl positiveX
    16 8E09			negativeX:
    17 8E09 09 07		  ora #%111
    18 8E0B 38			  sec
    19 8E0C 6A			  ror @
    20 8E0D 6A			  ror @
    21 8E0E 6A			  ror @
    22 8E0F 30 03		  bmi calcScr ; always jump
    23
    24 8E11			positiveX:
    25 8E11 4A			  lsr @
    26 8E12 4A			  lsr @
    27 8E13 4A			  lsr @
    28
    29 8E14			calcSCR:
    30 8E14 18 79 00 06		  add adr.YSCR,y
    31 8E18 85 2E		  sta scr
    32 8E1A B9 01 06		  lda adr.YSCR+1,y
    33 8E1D 18 69 00		  add #0
    34 8E20 85 2F		  sta scr+1
    35
    36 8E22 A5 8C		  lda x
    37 8E24 29 07		  and #7
    38 8E26 8D 59 8E		  sta sh
    39 8E29 D0 2D		  bne lline
    40
    41 				//
    42 				// --
    43 				//
    44
    45 8E2B			lsimple:
    46 8E2B AE 3A A4		  ldx height
    47
    48 8E2E			lln:
    49 8E2E AC 39 A4		  ldy width
    50 8E31 88			  dey
    51 8E32			lbyte:
    52 8E32 B1 88		  lda (adr),y
    53 8E34 11 2E		  ora (scr),y
    54 8E36 91 2E		  sta (scr),y
    55 8E38 88			  dey
    56 8E39 10 F7		  bpl lbyte
    57
    58 8E3B A5 2E		  lda scr
    59 8E3D 18 69 10		  add _LNWIDTH1:#16
    60 8E40 85 2E		  sta scr
    61 8E42 90 02 E6 2F		  scc:inc scr+1
    62
    63 8E46 A5 88		  lda adr
    64 8E48 18 6D 39 A4		  add width
    65 8E4C 85 88		  sta adr
    66 8E4E 90 02 E6 89		  scc:inc adr+1
    67
    68 8E52 CA			  dex
    69 8E53 D0 D9		  bne lln
    70
    71 8E55 4C B1 8F		  jmp exPutImg
    72
    73 				//
    74 				// --
    75 				//
    76 8E58			lline:
    77 8E58 A2 00		  ldx sh:#00
    78 8E5A AC 39 A4		  ldy width
    79 8E5D A9 00		  lda #0
    80 8E5F 99 DA 00		  sta $da,y
    81 8E62 88			  dey
    82
    83 8E63 C0 04		  cpy #4
    84 8E65 D0 56		  bne l4
    85
    86 				//
    87 				// --
    88 8E67			l5:
    89 8E67 B1 88		  lda (adr),y
    90 8E69 85 DE		  sta $de
    91 8E6B 88			  dey
    92 8E6C B1 88		  lda (adr),y
    93 8E6E 85 DD		  sta $dd
    94 8E70 88			  dey
    95 8E71 B1 88		  lda (adr),y
    96 8E73 85 DC		  sta $dc
    97 8E75 88			  dey
    98 8E76 B1 88		  lda (adr),y
    99 8E78 85 DB		  sta $db
   100 8E7A 88			  dey
   101 8E7B B1 88		  lda (adr),y
   102 8E7D 85 DA		  sta $da
   103
   104 8E7F			lb5:
   105 8E7F 18			  clc
   106 8E80 66 DA		  ror $da
   107 8E82 66 DB		  ror $db
   108 8E84 66 DC		  ror $dc
   109 8E86 66 DD		  ror $dd
   110 8E88 66 DE		  ror $de
   111 8E8A 66 DF		  ror $df
   112 8E8C CA			  dex
   113 8E8D D0 F0		  bne lb5
   114
   115 8E8F A0 05		  ldy #5
   116 8E91 A5 DF		  lda $df
   117 8E93 11 2E		  ora (scr),y
   118 8E95 91 2E		  sta (scr),y
   119 8E97 88			  dey
   120 8E98 A5 DE		  lda $de
   121 8E9A 11 2E		  ora (scr),y
   122 8E9C 91 2E		  sta (scr),y
   123 8E9E 88			  dey
   124 8E9F A5 DD		  lda $dd
   125 8EA1 11 2E		  ora (scr),y
   126 8EA3 91 2E		  sta (scr),y
   127 8EA5 88			  dey
   128 8EA6 A5 DC		  lda $dc
   129 8EA8 11 2E		  ora (scr),y
   130 8EAA 91 2E		  sta (scr),y
   131 8EAC 88			  dey
   132 8EAD A5 DB		  lda $db
   133 8EAF 11 2E		  ora (scr),y
   134 8EB1 91 2E		  sta (scr),y
   135 8EB3 88			  dey
   136 8EB4 A5 DA		  lda $da
   137 8EB6 11 2E		  ora (scr),y
   138 8EB8 91 2E		  sta (scr),y
   139 8EBA 4C 92 8F		  jmp nxt
   140 				// --
   141 				//
   142
   143 8EBD			l4:
   144 8EBD C0 03		  cpy #3
   145 8EBF D0 48		  bne l3
   146
   147 				//
   148 				// --
   149 8EC1 B1 88		  lda (adr),y
   150 8EC3 85 DD		  sta $dd
   151 8EC5 88			  dey
   152 8EC6 B1 88		  lda (adr),y
   153 8EC8 85 DC		  sta $dc
   154 8ECA 88			  dey
   155 8ECB B1 88		  lda (adr),y
   156 8ECD 85 DB		  sta $db
   157 8ECF 88			  dey
   158 8ED0 B1 88		  lda (adr),y
   159 8ED2 85 DA		  sta $da
   160
   161 8ED4			lb4:
   162 8ED4 18			  clc
   163 8ED5 66 DA		  ror $da
   164 8ED7 66 DB		  ror $db
   165 8ED9 66 DC		  ror $dc
   166 8EDB 66 DD		  ror $dd
   167 8EDD 66 DE		  ror $de
   168 8EDF CA			  dex
   169 8EE0 D0 F2		  bne lb4
   170
   171 8EE2 A0 04		  ldy #4
   172 8EE4 A5 DE		  lda $de
   173 8EE6 11 2E		  ora (scr),y
   174 8EE8 91 2E		  sta (scr),y
   175 8EEA 88			  dey
   176 8EEB A5 DD		  lda $dd
   177 8EED 11 2E		  ora (scr),y
   178 8EEF 91 2E		  sta (scr),y
   179 8EF1 88			  dey
   180 8EF2 A5 DC		  lda $dc
   181 8EF4 11 2E		  ora (scr),y
   182 8EF6 91 2E		  sta (scr),y
   183 8EF8 88			  dey
   184 8EF9 A5 DB		  lda $db
   185 8EFB 11 2E		  ora (scr),y
   186 8EFD 91 2E		  sta (scr),y
   187 8EFF 88			  dey
   188 8F00 A5 DA		  lda $da
   189 8F02 11 2E		  ora (scr),y
   190 8F04 91 2E		  sta (scr),y
   191 8F06 4C 92 8F		  jmp nxt
   192 				// --
   193 				//
   194
   195 8F09			l3:
   196 8F09 C0 02		  cpy #2
   197 8F0B D0 3A		  bne l2
   198
   199 				//
   200 				// --
   201 8F0D B1 88		  lda (adr),y
   202 8F0F 85 DC		  sta $dc
   203 8F11 88			  dey
   204 8F12 B1 88		  lda (adr),y
   205 8F14 85 DB		  sta $db
   206 8F16 88			  dey
   207 8F17 B1 88		  lda (adr),y
   208 8F19 85 DA		  sta $da
   209
   210 8F1B			lb3:
   211 8F1B 18			  clc
   212 8F1C 66 DA		  ror $da
   213 8F1E 66 DB		  ror $db
   214 8F20 66 DC		  ror $dc
   215 8F22 66 DD		  ror $dd
   216 8F24 CA			  dex
   217 8F25 D0 F4		  bne lb3
   218
   219 8F27 A0 03		  ldy #3
   220 8F29 A5 DD		  lda $dd
   221 8F2B 11 2E		  ora (scr),y
   222 8F2D 91 2E		  sta (scr),y
   223 8F2F 88			  dey
   224 8F30 A5 DC		  lda $dc
   225 8F32 11 2E		  ora (scr),y
   226 8F34 91 2E		  sta (scr),y
   227 8F36 88			  dey
   228 8F37 A5 DB		  lda $db
   229 8F39 11 2E		  ora (scr),y
   230 8F3B 91 2E		  sta (scr),y
   231 8F3D 88			  dey
   232 8F3E A5 DA		  lda $da
   233 8F40 11 2E		  ora (scr),y
   234 8F42 91 2E		  sta (scr),y
   235 8F44 4C 92 8F		  jmp nxt
   236 				// --
   237 				//
   238
   239 8F47			l2:
   240 8F47 C0 01		  cpy #1
   241 8F49 D0 2C		  bne l1
   242
   243 				//
   244 				// --
   245 8F4B B1 88		  lda (adr),y
   246 8F4D 85 DB		  sta $db
   247 8F4F 88			  dey
   248 8F50 B1 88		  lda (adr),y
   249 8F52 85 DA		  sta $da
   250
   251 8F54			lb2:
   252 8F54 18			  clc
   253 8F55 66 DA		  ror $da
   254 8F57 66 DB		  ror $db
   255 8F59 66 DC		  ror $dc
   256 8F5B CA			  dex
   257 8F5C D0 F6		  bne lb2
   258
   259 8F5E A0 02		  ldy #2
   260 8F60 A5 DC		  lda $dc
   261 8F62 11 2E		  ora (scr),y
   262 8F64 91 2E		  sta (scr),y
   263 8F66 88			  dey
   264 8F67 A5 DB		  lda $db
   265 8F69 11 2E		  ora (scr),y
   266 8F6B 91 2E		  sta (scr),y
   267 8F6D 88			  dey
   268 8F6E A5 DA		  lda $da
   269 8F70 11 2E		  ora (scr),y
   270 8F72 91 2E		  sta (scr),y
   271 8F74 4C 92 8F		  jmp nxt
   272 				// --
   273 				//
   274
   275 8F77			l1:
   276 8F77 B1 88		  lda (adr),y
   277 8F79 85 DA		  sta $da
   278
   279 				//
   280 				// --
   281 8F7B			lb1:
   282 8F7B 18			  clc
   283 8F7C 66 DA		  ror $da
   284 8F7E 66 DB		  ror $db
   285 8F80 CA			  dex
   286 8F81 D0 F8		  bne lb1
   287
   288 8F83 A0 01		  ldy #1
   289 8F85 A5 DB		  lda $db
   290 8F87 11 2E		  ora (scr),y
   291 8F89 91 2E		  sta (scr),y
   292 8F8B 88			  dey
   293 8F8C A5 DA		  lda $da
   294 8F8E 11 2E		  ora (scr),y
   295 8F90 91 2E		  sta (scr),y
   296
   297 				//
   298 				// --
   299 				//
   300
   301 8F92			nxt:
   302 8F92 A5 2E		  lda scr
   303 8F94 18 69 10		  add _LNWIDTH2:#16
   304 8F97 85 2E		  sta scr
   305 8F99 90 02 E6 2F		  scc:inc scr+1
   306
   307 8F9D A5 88		  lda adr
   308 8F9F 18 6D 39 A4		  add width
   309 8FA3 85 88		  sta adr
   310 8FA5 90 02 E6 89		  scc:inc adr+1
   311
   312 8FA9 CE 3A A4		  dec height
   313 8FAC F0 03		  beq exPutImg
   314 8FAE 4C 58 8E		  jmp lline
   315
   316 8FB1			exPutImg:
   317 8FB1 68 AA		  pla:tax
   785 				; ------------------------------------------------------------
   786
   787 = 0088			ADR	= :EDX
   788 = 008C			X	= :ECX
   789 = 0084			Y	= :EAX
   790 = A439			WIDTH	= DATAORIGIN+$0016
   791 = A43A			HEIGHT	= DATAORIGIN+$0017
   792
   793 = A439			@VarData	= WIDTH
   794 = 0002			@VarDataSize	= 2
   795
   796 8FB3			@exit
   797 					.ifdef @new
   798 					lda <@VarData
   799 					sta :ztmp
   800 					lda >@VarData
   801 					ldy #@VarDataSize-1
   802 					jmp @FreeMem
   803 					els
   804 8FB3 60				rts						; ret
   805 					eif
   806 				.endl
   807
   808 8FB4			.local	PUTTEXT						; PROCEDURE | ASSEMBLER | REGISTER
   809
   810 				; -------------------  ASM Block 00000080  -------------------
   811
   812 8FB4			 icl 'asm/put-text.a65' 
Source: put-text.a65
     1 8FB4 8A 48		  txa:pha
     2
     3 = 00FA			sptr = $fa
     4
     5 8FB6 A5 84		  lda S
     6 8FB8 85 FA		  sta sptr
     7 8FBA A5 85		  lda s+1
     8 8FBC 85 FB		  sta sptr+1
     9
    10 				// get text length
    11 8FBE 18			  clc
    12 8FBF A0 00		  ldy #0
    13 8FC1 84 3E		  sty I
    14 8FC3 B1 FA		  lda (sptr),y
    15 8FC5 8D E7 8F		  sta tlen
    16 8FC8 E6 FA		  inc sptr
    17 8FCA 90 02 E6 FB		  scc:inc sptr+1
    18
    19 				// putchar
    20 				//  if activePage=1 then inc(y,56);
    21 8FCE A5 8C		  lda y
    22 8FD0 A4 D4		  ldy activePage
    23 8FD2 F0 03		  beq skPage
    24 8FD4 18 69 38		  add #56
    25 8FD7			skPage:
    26
    27 				//  y*2 -> index for YSCR
    28 8FD7 0A			  asl @
    29 8FD8 A8			  tay
    30
    31 				//  scr:=Pointer(YSCR[y]);
    32 8FD9 B9 00 06		  lda adr.YSCR,y
    33 8FDC 85 2E		  sta scr
    34 8FDE B9 01 06		  lda adr.YSCR+1,y
    35 8FE1 85 2F		  sta scr+1
    36
    37 				//
    38 				// --
    39 				//
    40 8FE3 18			  clc
    41 8FE4			lputchar:
    42 8FE4 A5 3E		  lda I
    43 8FE6 C9 00		  cmp tlen:#00
    44 8FE8 10 35		  bpl exPutText
    45 8FEA A8			  tay
    46 8FEB 65 88		  adc x
    47 8FED 6A			  ror @
    48 8FEE AA			  tax
    49 8FEF E6 3E		  inc I
    50
    51 8FF1 B1 FA		  lda (sptr),y      // get string char
    52 8FF3 A8			  tay
    53 8FF4 B9 80 04		  lda adr._asc2int,y  // convert ATASCII to INTERNAL
    54 8FF7 90 02		  bcc skipSh
    55 8FF9 09 40		  ora #64
    56 8FFB			skipSh:
    57 8FFB 0A			  asl @
    58 8FFC A8			  tay
    59 8FFD B9 00 30		  lda adr.AFONT,y   // get font address
    60 9000 8D 0E 90		  sta adr
    61 9003 B9 01 30		  lda adr.AFONT+1,y
    62 9006 8D 0F 90		  sta adr+1
    63
    64 9009			lsimple:
    65 9009 8A			  txa
    66 900A A8			  tay
    67 900B A2 00		  ldx #0
    68
    69 900D			lln:
    70 900D			lbyte:
    71 900D BD 00 20		  lda adr:$2000,x
    72 9010 11 2E		  ora (scr),y
    73 9012 91 2E		  sta (scr),y
    74
    75 9014 98			  tya
    76 9015 69 14		  adc #20
    77 9017 A8			  tay
    78
    79 9018 E8			  inx
    80 9019 E0 05		  cpx #5
    81 901B D0 F0		  bne lln
    82 901D F0 C5		  beq lputchar  // always jymp
    83
    84 901F			exPutText:
    85 901F 68 AA		  pla:tax
   813 				; ------------------------------------------------------------
   814
   815 = 0088			X	= :EDX
   816 = 008C			Y	= :ECX
   817 = 0084			S	= :EAX
   818 9021			@exit
   819 					.ifdef @new
   820 					lda <@VarData
   821 					sta :ztmp
   822 					lda >@VarData
   823 					ldy #@VarDataSize-1
   824 					jmp @FreeMem
   825 					els
   826 9021 60				rts						; ret
   827 					eif
   828 				.endl
   829
   830 9022			.local	PUTTEXTC					; PROCEDURE | ASSEMBLER | REGISTER
   831
   832 				; -------------------  ASM Block 00000081  -------------------
   833
   834 9022			 icl 'asm/put-textc.a65' 
Source: put-textc.a65
     1 9022 8A 48		  txa:pha
     2
     3 = 00FA			sptr = $fa
     4
     5 9024 A5 84		  lda S
     6 9026 85 FA		  sta sptr
     7 9028 A5 85		  lda s+1
     8 902A 85 FB		  sta sptr+1
     9
    10 				// get text length
    11 902C 18			  clc
    12 902D A0 00		  ldy #0
    13 902F 84 3E		  sty I
    14 9031 B1 FA		  lda (sptr),y
    15 9033 8D 54 90		  sta tlen
    16 9036 E6 FA		  inc sptr
    17 9038 90 02 E6 FB		  scc:inc sptr+1
    18
    19 				// putchar
    20 				//  if activePage=1 then inc(y,56);
    21 903C A5 8C		  lda y
    22 903E A4 D4		  ldy activePage
    23 9040 F0 03		  beq skPage
    24 9042 18 69 38		  add #56
    25 9045			skPage:
    26
    27 				//  y*2 -> index for YSCR
    28 9045 0A			  asl @
    29 9046 A8			  tay
    30
    31 				//  scr:=Pointer(YSCR[y]+x);
    32
    33 9047			calcSCR:
    34 9047 B9 00 06		  lda adr.YSCR,y
    35 904A 85 2E		  sta scr
    36 904C B9 01 06		  lda adr.YSCR+1,y
    37 904F 85 2F		  sta scr+1
    38
    39 				//
    40 				// --
    41 				//
    42
    43 9051			lputchar:
    44 9051 A4 3E		  ldy I
    45 9053 C0 00		  cpy tlen:#00
    46 9055 10 32		  bpl exPutImg
    47 9057 98			  tya
    48 9058 65 88		  adc x
    49 905A AA			  tax
    50 905B E6 3E		  inc I
    51
    52 905D B1 FA		  lda (sptr),y      // get string char
    53 905F 29 7F		  and #127          // only char #0…#127
    54 9061 A8			  tay
    55 9062 B9 80 04		  lda adr._asc2int,y
    56
    57 9065 0A			  asl @
    58 9066 A8			  tay
    59 9067 B9 00 31		  lda adr.AFONTC,y   // get font address
    60 906A 8D 78 90		  sta adr
    61 906D B9 01 31		  lda adr.AFONTC+1,y
    62 9070 8D 79 90		  sta adr+1
    63
    64 9073			lsimple:
    65 9073 8A			  txa
    66 9074 A8			  tay
    67 9075 A2 00		  ldx #0
    68 				  // clc
    69
    70 9077			lln:
    71 9077			lbyte:
    72 9077 BD 00 20		  lda adr:$2000,x
    73 907A 11 2E		  ora (scr),y
    74 907C 91 2E		  sta (scr),y
    75
    76 907E 98			  tya
    77 907F 69 28		  adc #40
    78 9081 A8			  tay
    79
    80 9082 E8			  inx
    81 9083 E0 05		  cpx #5
    82 9085 D0 F0		  bne lln
    83 9087 F0 C8		  beq lputchar  // always jymp
    84
    85 9089			exPutImg:
    86 9089 68 AA		  pla:tax
   835 				; ------------------------------------------------------------
   836
   837 = 0088			X	= :EDX
   838 = 008C			Y	= :ECX
   839 = 0084			S	= :EAX
   840 908B			@exit
   841 					.ifdef @new
   842 					lda <@VarData
   843 					sta :ztmp
   844 					lda >@VarData
   845 					ldy #@VarDataSize-1
   846 					jmp @FreeMem
   847 					els
   848 908B 60				rts						; ret
   849 					eif
   850 				.endl
   851
   852 908C			.local	INVERT						; PROCEDURE | ASSEMBLER | REGISTER
   853
   854 				; -------------------  ASM Block 00000082  -------------------
   855
   856 908C			 icl 'asm/invert.a65' 
Source: invert.a65
     1 908C 8A 48		  txa:pha
     2
     3 				// putchar
     4 				//  if activePage=1 then inc(y,56);
     5 908E A5 8C		  lda y
     6 9090 A4 D4		  ldy activePage
     7 9092 F0 03		  beq skPage
     8 9094 18 69 38		  add #56
     9 9097			skPage:
    10
    11 				//  y*2 -> index for YSCR
    12 9097 0A			  asl @
    13 9098 A8			  tay
    14
    15 				//  scr:=Pointer(YSCR[y]+x);
    16
    17 9099			calcSCR:
    18 9099 B9 00 06		  lda adr.YSCR,y
    19 909C 85 2E		  sta scr
    20 909E B9 01 06		  lda adr.YSCR+1,y
    21 90A1 85 2F		  sta scr+1
    22
    23 				//
    24 				// --
    25 				//
    26 90A3 18			  clc
    27 90A4			lputchar:
    28 90A4 A5 84		  lda w
    29 90A6 30 24		  bmi exPutImg
    30 90A8 A5 88		  lda x
    31 90AA 6A			  ror @
    32 90AB A8			  tay
    33 90AC C6 84		  dec w
    34 90AE E6 88		  inc x
    35
    36 90B0 A9 F0		  lda #%11110000
    37 90B2 90 02		  bcc lsimple
    38 90B4 A9 0F		  lda #%00001111
    39
    40 90B6			lsimple:
    41 90B6 8D C0 90		  sta mask
    42 90B9 AE 3B A4		  ldx h
    43 90BC 18			  clc
    44
    45 90BD			lln:
    46 90BD			lbyte:
    47 90BD B1 2E		  lda (scr),y
    48 90BF 49 00		  eor mask:#0
    49 90C1 91 2E		  sta (scr),y
    50
    51 90C3 98			  tya
    52 90C4 69 14		  adc _LNWIDTH1:#20
    53 90C6 A8			  tay
    54
    55 90C7 CA			  dex
    56 90C8 10 F3		  bpl lln
    57 90CA 30 D8		  bmi lputchar  // always jymp
    58
    59 90CC			exPutImg:
    60 90CC 68 AA		  pla:tax
   857 				; ------------------------------------------------------------
   858
   859 = 0088			X	= :EDX
   860 = 008C			Y	= :ECX
   861 = 0084			W	= :EAX
   862 = A43B			H	= DATAORIGIN+$0018
   863
   864 = A43B			@VarData	= H
   865 = 0001			@VarDataSize	= 1
   866
   867 90CE			@exit
   868 					.ifdef @new
   869 					lda <@VarData
   870 					sta :ztmp
   871 					lda >@VarData
   872 					ldy #@VarDataSize-1
   873 					jmp @FreeMem
   874 					els
   875 90CE 60				rts						; ret
   876 					eif
   877 				.endl
   878
   879 90CF			.local	BLANK						; PROCEDURE | ASSEMBLER | REGISTER
   880
   881 				; -------------------  ASM Block 00000083  -------------------
   882
   883 90CF			 icl 'asm/blank.a65' 
Source: blank.a65
     1 90CF 8A 48		  txa:pha
     2
     3 				// putchar
     4 				//  if activePage=1 then inc(y,56);
     5 90D1 A5 8C		  lda y
     6 90D3 A4 D4		  ldy activePage
     7 90D5 F0 03		  beq skPage
     8 90D7 18 69 38		  add #56
     9 90DA			skPage:
    10
    11 				//  y*2 -> index for YSCR
    12 90DA 0A			  asl @
    13 90DB A8			  tay
    14
    15 				//  scr:=Pointer(YSCR[y]);
    16
    17 90DC			calcSCR:
    18 90DC B9 00 06		  lda adr.YSCR,y
    19 90DF 85 2E		  sta scr
    20 90E1 B9 01 06		  lda adr.YSCR+1,y
    21 90E4 85 2F		  sta scr+1
    22
    23 				//
    24 				// --
    25 				//
    26 90E6 18			  clc
    27 90E7			lputchar:
    28 90E7 A5 84		  lda w
    29 90E9 30 24		  bmi exPutImg
    30 90EB A5 88		  lda x
    31 90ED 6A			  ror @
    32 90EE A8			  tay
    33 90EF C6 84		  dec w
    34 90F1 E6 88		  inc x
    35
    36 90F3 A9 0F		  lda #%00001111
    37 90F5 90 02		  bcc lsimple
    38 90F7 A9 F0		  lda #%11110000
    39
    40 90F9			lsimple:
    41 90F9 8D 03 91		  sta mask
    42 90FC AE 3C A4		  ldx h
    43 90FF 18			  clc
    44
    45 9100			lln:
    46 9100			lbyte:
    47 9100 B1 2E		  lda (scr),y
    48 9102 29 00		  and mask:#0
    49 9104 91 2E		  sta (scr),y
    50
    51 9106 98			  tya
    52 9107 69 14		  adc _LNWIDTH1:#20
    53 9109 A8			  tay
    54
    55 910A CA			  dex
    56 910B 10 F3		  bpl lln
    57 910D 30 D8		  bmi lputchar  // always jymp
    58
    59 910F			exPutImg:
    60 910F 68 AA		  pla:tax
   884 				; ------------------------------------------------------------
   885
   886 = 0088			X	= :EDX
   887 = 008C			Y	= :ECX
   888 = 0084			W	= :EAX
   889 = A43C			H	= DATAORIGIN+$0019
   890
   891 = A43C			@VarData	= H
   892 = 0001			@VarDataSize	= 1
   893
   894 9111			@exit
   895 					.ifdef @new
   896 					lda <@VarData
   897 					sta :ztmp
   898 					lda >@VarData
   899 					ldy #@VarDataSize-1
   900 					jmp @FreeMem
   901 					els
   902 9111 60				rts						; ret
   903 					eif
   904 				.endl
   905
   906 9112			.local	SETSCREENWIDTH					; PROCEDURE | ASSEMBLER | REGISTER | INLINE
   907
   908 					.MACRO m@INLINE
   909 					sta NSW
   910 				
   911 				; -------------------  ASM Block 00000084  -------------------
   912 				
   913 				  sta MAIN.PUTIMAGE._LNWIDTH
   914 				  sta MAIN.PUTSPRITE._LNWIDTH1
   915 				  sta MAIN.PUTSPRITE._LNWIDTH2
   916 				
   917 					.ENDM
   918
   919 				; ------------------------------------------------------------
   920
   921 = 0088			NSW	= :EDX
   922 9112			@exit
   923 				.endl
   924
   925 9112			.local	NULLPROC					; PROCEDURE
   926
   927 9112			@exit
   928 					.ifdef @new
   929 					lda <@VarData
   930 					sta :ztmp
   931 					lda >@VarData
   932 					ldy #@VarDataSize-1
   933 					jmp @FreeMem
   934 					els
   935 9112 60				rts						; ret
   936 					eif
   937 				.endl
   938
   939 9113			.local	SETZONE						; PROCEDURE
   940
   941 				; optimize OK (interface.inc), line = 25
   942
   943 9113 AC 41 A4			ldy N
   944 9116 AD 42 A4			lda ACT
   945 9119 99 00 05			sta adr._MZONEACTIVE,y
   946
   947 				; optimize OK (interface.inc), line = 26
   948
   949 911C AD 43 A4			lda X
   950 911F 99 20 05			sta adr._MZONEX1,y
   951 9122 8D 3D A4			sta __X
   952
   953 				; optimize OK (interface.inc), line = 27
   954
   955 9125 AD 44 A4			lda Y
   956 9128 99 40 05			sta adr._MZONEY1,y
   957 912B 8D 3E A4			sta __Y
   958
   959 				; optimize OK (interface.inc), line = 28
   960
   961 912E AD 43 A4			lda X
   962 9131 18 6D 45 A4			add W
   963 9135 38 E9 01			sub #$01
   964 9138 99 60 05			sta adr._MZONEX2,y
   965 913B AD 45 A4			lda W
   966 913E 8D 3F A4			sta __W
   967
   968 				; optimize OK (interface.inc), line = 29
   969
   970 9141 AD 44 A4			lda Y
   971 9144 18 6D 46 A4			add H
   972 9148 38 E9 01			sub #$01
   973 914B 99 80 05			sta adr._MZONEY2,y
   974 914E AD 46 A4			lda H
   975 9151 8D 40 A4			sta __H
   976
   977 				; optimize OK (interface.inc), line = 30
   978
   979 9154 AD 41 A4			lda N
   980 9157 0A				asl @
   981 9158 A8				tay
   982 9159 AD 47 A4			lda PRC
   983 915C 99 A0 05			sta adr._MZONEPROC,y
   984 915F AD 48 A4			lda PRC+1
   985 9162 99 A1 05			sta adr._MZONEPROC+1,y
   986
   987 				; ------------------------------------------------------------
   988
   989 = A441			N	= DATAORIGIN+$001E
   990 = A442			ACT	= DATAORIGIN+$001F
   991 = A443			X	= DATAORIGIN+$0020
   992 = A444			Y	= DATAORIGIN+$0021
   993 = A445			W	= DATAORIGIN+$0022
   994 = A446			H	= DATAORIGIN+$0023
   995 = A447			PRC	= DATAORIGIN+$0024
   996
   997 = A441			@VarData	= N
   998 = 0008			@VarDataSize	= 8
   999
  1000 9165			@exit
  1001 					.ifdef @new
  1002 					lda <@VarData
  1003 					sta :ztmp
  1004 					lda >@VarData
  1005 					ldy #@VarDataSize-1
  1006 					jmp @FreeMem
  1007 					els
  1008 9165 60				rts						; ret
  1009 					eif
  1010 				.endl
  1011
  1012 9166			.local	CLEARZONE					; PROCEDURE
  1013 9166 8D 49 A4			sta N
  1014
  1015 				; optimize OK (interface.inc), line = 36
  1016
  1017 9169 AC 49 A4			ldy N
  1018 916C A9 00			lda #$00
  1019 916E 99 00 05			sta adr._MZONEACTIVE,y
  1020
  1021 				; optimize OK (interface.inc), line = 37
  1022
  1023 9171 A9 FF			lda #$FF
  1024 9173 99 20 05			sta adr._MZONEX1,y
  1025
  1026 				; optimize OK (interface.inc), line = 38
  1027
  1028 9176 99 60 05			sta adr._MZONEX2,y
  1029
  1030 				; optimize OK (interface.inc), line = 39
  1031
  1032 9179 99 40 05			sta adr._MZONEY1,y
  1033
  1034 				; optimize OK (interface.inc), line = 40
  1035
  1036 917C 99 80 05			sta adr._MZONEY2,y
  1037
  1038 				; optimize OK (interface.inc), line = 41
  1039
  1040 917F AD 49 A4			lda N
  1041 9182 0A				asl @
  1042 9183 A8				tay
  1043 9184 A9 12			lda <NULLPROC
  1044 9186 99 A0 05			sta adr._MZONEPROC,y
  1045 9189 A9 91			lda >NULLPROC
  1046 918B 99 A1 05			sta adr._MZONEPROC+1,y
  1047
  1048 				; ------------------------------------------------------------
  1049
  1050 = A449			N	= DATAORIGIN+$0026
  1051
  1052 = A449			@VarData	= N
  1053 = 0001			@VarDataSize	= 1
  1054
  1055 918E			@exit
  1056 					.ifdef @new
  1057 					lda <@VarData
  1058 					sta :ztmp
  1059 					lda >@VarData
  1060 					ldy #@VarDataSize-1
  1061 					jmp @FreeMem
  1062 					els
  1063 918E 60				rts						; ret
  1064 					eif
  1065 				.endl
  1066
  1067 918F			.local	CLEARWORKZONES					; PROCEDURE
  1068
  1069 				; optimize OK (interface.inc), line = 46
  1070
  1071 918F A9 09			lda #$09
  1072 9191 85 3E			sta I
  1073
  1074 9193			l_0251
  1075 				; --- ForToDoCondition
  1076 9193 A5 3E			lda I
  1077 9195 C9 20			cmp #$20
  1078 9197 B0 07			jcs l_025F
  1079
  1080 				; optimize OK (interface.inc), line = 47
  1081
  1082 9199 20 66 91			jsr CLEARZONE
  1083
  1084 				; --- ForToDoEpilog
  1085 919C E6 3E			inc I
  1086 919E D0 F3			jne l_0251
  1087 91A0			l_025F
  1088
  1089 				; ------------------------------------------------------------
  1090
  1091 91A0			@exit
  1092 					.ifdef @new
  1093 					lda <@VarData
  1094 					sta :ztmp
  1095 					lda >@VarData
  1096 					ldy #@VarDataSize-1
  1097 					jmp @FreeMem
  1098 					els
  1099 91A0 60				rts						; ret
  1100 					eif
  1101 				.endl
  1102
  1103 91A1			.local	INITINTERFACE					; PROCEDURE
  1104
  1105 				; optimize OK (interface.inc), line = 52
  1106
  1107 91A1 A9 FF			lda #$FF
  1108 91A3 85 50			sta SZONE
  1109 91A5 85 51			sta OZONE
  1110 91A7 A9 00			lda #$00
  1111 91A9 85 4B			sta CURSOR.OMBUTTON
  1112
  1113 				; optimize OK (interface.inc), line = 53
  1114
  1115 91AB 85 3E			sta I
  1116
  1117 91AD			l_0281
  1118 				; --- ForToDoCondition
  1119 91AD A5 3E			lda I
  1120 91AF C9 20			cmp #$20
  1121 91B1 B0 07			jcs l_028F
  1122
  1123 				; optimize OK (interface.inc), line = 54
  1124
  1125 91B3 20 66 91			jsr CLEARZONE
  1126
  1127 				; --- ForToDoEpilog
  1128 91B6 E6 3E			inc I
  1129 91B8 D0 F3			jne l_0281
  1130 91BA			l_028F
  1131
  1132 				; ------------------------------------------------------------
  1133
  1134 91BA			@exit
  1135 					.ifdef @new
  1136 					lda <@VarData
  1137 					sta :ztmp
  1138 					lda >@VarData
  1139 					ldy #@VarDataSize-1
  1140 					jmp @FreeMem
  1141 					els
  1142 91BA 60				rts						; ret
  1143 					eif
  1144 				.endl
  1145
  1146 91BB			.local	GETFREEZONE					; FUNCTION
  1147
  1148 				; optimize OK (interface.inc), line = 59
  1149
  1150 91BB A9 FF			lda #$FF
  1151 91BD 8D 4A A4			sta RESULT
  1152
  1153 				; optimize OK (interface.inc), line = 60
  1154
  1155 91C0 A9 09			lda #$09
  1156 91C2 85 3E			sta I
  1157
  1158 91C4			l_02A9
  1159 				; --- ForToDoCondition
  1160 91C4 A4 3E			ldy I
  1161 91C6 C0 20			cpy #$20
  1162 91C8 B0 13			jcs l_02B7
  1163
  1164 				; optimize OK (interface.inc), line = 62
  1165
  1166 91CA B9 20 05			lda adr._MZONEX1,y
  1167 91CD C9 FF			cmp #$FF
  1168 91CF D0 08			jne l_02CC
  1169 91D1 A5 3E			lda I
  1170 91D3 8D 4A A4			sta RESULT
  1171 91D6 4C DD 91			jmp @exit
  1172 91D9			l_02CC
  1173
  1174 				; --- ForToDoEpilog
  1175 91D9 E6 3E			inc I
  1176 91DB D0 E7			jne l_02A9
  1177 91DD			l_02B7
  1178 91DD			@exit
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = A44A			RESULT	= DATAORIGIN+$0027
  1183 91DD 60				rts						; ret
  1184 				.endl
  1185
  1186 91DE			.local	ADDZONE						; FUNCTION | OVERLOAD
  1187 91DE			.local	@02DB
  1188
  1189 				; optimize OK (interface.inc), line = 68
  1190
  1191 91DE AD 4B A4			lda N
  1192 91E1 C9 FF			cmp #$FF
  1193 91E3 D0 09			jne l_02F0
  1194 91E5 20 BB 91			jsr GETFREEZONE
  1195 91E8 AD 4A A4			lda GETFREEZONE.RESULT
  1196 91EB 8D 4B A4			sta N
  1197 91EE			l_02F0
  1198
  1199 				; optimize OK (interface.inc), line = 69
  1200
  1201 91EE AD 4B A4			lda N
  1202 91F1 C9 FF			cmp #$FF
  1203 91F3 F0 32			jeq l_0309
  1204 91F5 AD 50 A4			lda PRC
  1205 91F8 8D 47 A4			sta SETZONE.PRC
  1206 91FB AD 51 A4			lda PRC+1
  1207 91FE 8D 48 A4			sta SETZONE.PRC+1
  1208 9201 AD 4B A4			lda N
  1209 9204 8D 41 A4			sta SETZONE.N
  1210 9207 A9 01			lda #$01
  1211 9209 8D 42 A4			sta SETZONE.ACT
  1212 920C AD 4C A4			lda X
  1213 920F 8D 43 A4			sta SETZONE.X
  1214 9212 AD 4D A4			lda Y
  1215 9215 8D 44 A4			sta SETZONE.Y
  1216 9218 AD 4E A4			lda W
  1217 921B 8D 45 A4			sta SETZONE.W
  1218 921E AD 4F A4			lda H
  1219 9221 8D 46 A4			sta SETZONE.H
  1220 9224 20 13 91			jsr SETZONE
  1221 9227			l_0309
  1222
  1223 				; optimize OK (interface.inc), line = 70
  1224
  1225 9227 AD 4B A4			lda N
  1226 922A 8D 52 A4			sta RESULT
  1227 922D			@exit
  1228
  1229 				; ------------------------------------------------------------
  1230
  1231 = A44B			N	= DATAORIGIN+$0028
  1232 = A44C			X	= DATAORIGIN+$0029
  1233 = A44D			Y	= DATAORIGIN+$002A
  1234 = A44E			W	= DATAORIGIN+$002B
  1235 = A44F			H	= DATAORIGIN+$002C
  1236 = A450			PRC	= DATAORIGIN+$002D
  1237 = A452			RESULT	= DATAORIGIN+$002F
  1238
  1239 = A44B			@VarData	= N
  1240 = 0007			@VarDataSize	= 7
  1241
  1242 922D 60				rts						; ret
  1243 				.endl
  1244 				.endl							; overload
  1245
  1246 922E			.local	ADDZONE						; FUNCTION | OVERLOAD
  1247 922E			.local	@0324
  1248
  1249 				; optimize OK (interface.inc), line = 75
  1250
  1251 922E AD 57 A4			lda PRC
  1252 9231 8D 50 A4			sta ADDZONE.@02DB.PRC
  1253 9234 AD 58 A4			lda PRC+1
  1254 9237 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  1255 923A A9 FF			lda #$FF
  1256 923C 8D 4B A4			sta ADDZONE.@02DB.N
  1257 923F AD 53 A4			lda X
  1258 9242 8D 4C A4			sta ADDZONE.@02DB.X
  1259 9245 AD 54 A4			lda Y
  1260 9248 8D 4D A4			sta ADDZONE.@02DB.Y
  1261 924B AD 55 A4			lda W
  1262 924E 8D 4E A4			sta ADDZONE.@02DB.W
  1263 9251 AD 56 A4			lda H
  1264 9254 8D 4F A4			sta ADDZONE.@02DB.H
  1265 9257 20 DE 91			jsr ADDZONE.@02DB
  1266 925A AD 52 A4			lda ADDZONE.@02DB.RESULT
  1267 925D 8D 59 A4			sta RESULT
  1268 9260			@exit
  1269
  1270 				; ------------------------------------------------------------
  1271
  1272 = A453			X	= DATAORIGIN+$0030
  1273 = A454			Y	= DATAORIGIN+$0031
  1274 = A455			W	= DATAORIGIN+$0032
  1275 = A456			H	= DATAORIGIN+$0033
  1276 = A457			PRC	= DATAORIGIN+$0034
  1277 = A459			RESULT	= DATAORIGIN+$0036
  1278
  1279 = A453			@VarData	= X
  1280 = 0006			@VarDataSize	= 6
  1281
  1282 9260 60				rts						; ret
  1283 				.endl
  1284 				.endl							; overload
  1285
  1286 9261			.local	ADDZONEH					; FUNCTION | OVERLOAD
  1287 9261			.local	@0339
  1288
  1289 				; optimize OK (interface.inc), line = 85
  1290
  1291 9261 AD 5B A4			lda PRC
  1292 9264 8D 50 A4			sta ADDZONE.@02DB.PRC
  1293 9267 AD 5C A4			lda PRC+1
  1294 926A 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  1295 926D AD 3D A4			lda __X
  1296 9270 18 6D 3F A4			add __W
  1297 9274 8D 4C A4			sta ADDZONE.@02DB.X
  1298 9277 AD 5A A4			lda N
  1299 927A 8D 4B A4			sta ADDZONE.@02DB.N
  1300 927D AD 3E A4			lda __Y
  1301 9280 8D 4D A4			sta ADDZONE.@02DB.Y
  1302 9283 AD 3F A4			lda __W
  1303 9286 8D 4E A4			sta ADDZONE.@02DB.W
  1304 9289 AD 40 A4			lda __H
  1305 928C 8D 4F A4			sta ADDZONE.@02DB.H
  1306 928F 20 DE 91			jsr ADDZONE.@02DB
  1307 9292 AD 52 A4			lda ADDZONE.@02DB.RESULT
  1308 9295 8D 5D A4			sta RESULT
  1309 9298			@exit
  1310
  1311 				; ------------------------------------------------------------
  1312
  1313 = A45A			N	= DATAORIGIN+$0037
  1314 = A45B			PRC	= DATAORIGIN+$0038
  1315 = A45D			RESULT	= DATAORIGIN+$003A
  1316
  1317 = A45A			@VarData	= N
  1318 = 0003			@VarDataSize	= 3
  1319
  1320 9298 60				rts						; ret
  1321 				.endl
  1322 				.endl							; overload
  1323
  1324 9299			.local	ADDZONEV					; FUNCTION | OVERLOAD
  1325 9299			.local	@0356
  1326
  1327 				; optimize OK (interface.inc), line = 90
  1328
  1329 9299 AD 5E A4			lda PRC
  1330 929C 8D 57 A4			sta ADDZONE.@0324.PRC
  1331 929F AD 5F A4			lda PRC+1
  1332 92A2 8D 58 A4			sta ADDZONE.@0324.PRC+1
  1333 92A5 AD 3E A4			lda __Y
  1334 92A8 18 6D 40 A4			add __H
  1335 92AC 8D 54 A4			sta ADDZONE.@0324.Y
  1336 92AF AD 3D A4			lda __X
  1337 92B2 8D 53 A4			sta ADDZONE.@0324.X
  1338 92B5 AD 3F A4			lda __W
  1339 92B8 8D 55 A4			sta ADDZONE.@0324.W
  1340 92BB AD 40 A4			lda __H
  1341 92BE 8D 56 A4			sta ADDZONE.@0324.H
  1342 92C1 20 2E 92			jsr ADDZONE.@0324
  1343 92C4 AD 59 A4			lda ADDZONE.@0324.RESULT
  1344 92C7 8D 60 A4			sta RESULT
  1345 92CA			@exit
  1346
  1347 				; ------------------------------------------------------------
  1348
  1349 = A45E			PRC	= DATAORIGIN+$003B
  1350 = A460			RESULT	= DATAORIGIN+$003D
  1351
  1352 = A45E			@VarData	= PRC
  1353 = 0002			@VarDataSize	= 2
  1354
  1355 92CA 60				rts						; ret
  1356 				.endl
  1357 				.endl							; overload
  1358
  1359 92CB			.local	CHECKZONES					; FUNCTION
  1360
  1361 92CB 4C 09 93			jmp l_0373
  1362
  1363 92CE			.local	REFRESHZONE					; PROCEDURE
  1364
  1365 				; optimize OK (interface.inc), line = 104
  1366
  1367 92CE A5 51			lda OZONE
  1368 92D0 38 E9 09			sub #$09
  1369 92D3 50 02			svc
  1370 92D5 49 80			eor #$80
  1371 92D7 30 09			jmi l_0388
  1372
  1373 				; optimize OK (interface.inc), line = 106
  1374
  1375 92D9 A5 51			lda OZONE
  1376 92DB 20 96 94			jsr INVERTZONE
  1377
  1378 				; optimize OK (interface.inc), line = 107
  1379
  1380 92DE A9 FF			lda #$FF
  1381 92E0 85 51			sta OZONE
  1382 92E2			l_0388
  1383
  1384 				; optimize OK (interface.inc), line = 109
  1385
  1386 92E2 A5 57			lda NZONE
  1387 92E4 38 E9 09			sub #$09
  1388 92E7 50 02			svc
  1389 92E9 49 80			eor #$80
  1390 92EB 30 09			jmi l_03A5
  1391
  1392 				; optimize OK (interface.inc), line = 111
  1393
  1394 92ED A5 57			lda NZONE
  1395 92EF 20 96 94			jsr INVERTZONE
  1396
  1397 				; optimize OK (interface.inc), line = 112
  1398
  1399 92F2 A5 57			lda NZONE
  1400 92F4 85 51			sta OZONE
  1401 92F6			l_03A5
  1402 92F6			@exit
  1403 					.ifdef @new
  1404 					lda <@VarData
  1405 					sta :ztmp
  1406 					lda >@VarData
  1407 					ldy #@VarDataSize-1
  1408 					jmp @FreeMem
  1409 					els
  1410 92F6 60				rts						; ret
  1411 					eif
  1412 				.endl
  1413
  1414 92F7			.local	PRESSED						; FUNCTION
  1415
  1416 				; optimize OK (interface.inc), line = 118
  1417
  1418 92F7 A5 57			lda NZONE
  1419 92F9 85 50			sta SZONE
  1420
  1421 				; optimize OK (interface.inc), line = 119
  1422
  1423 92FB A9 FF			lda #$FF
  1424 92FD 85 57			sta NZONE
  1425
  1426 				; optimize OK (interface.inc), line = 120
  1427
  1428 92FF A9 00			lda #$00
  1429 9301 85 4B			sta CURSOR.OMBUTTON
  1430
  1431 				; optimize OK (interface.inc), line = 121
  1432
  1433 9303 A9 01			lda #$01
  1434 9305 8D 62 A4			sta RESULT
  1435 9308			@exit
  1436
  1437 				; ------------------------------------------------------------
  1438
  1439 = A462			RESULT	= DATAORIGIN+$003F
  1440 9308 60				rts						; ret
  1441 				.endl
  1442 9309			l_0373
  1443
  1444 				; optimize OK (interface.inc), line = 125
  1445
  1446 9309 A9 00			lda #$00
  1447 930B 8D 61 A4			sta RESULT
  1448
  1449 				; optimize OK (interface.inc), line = 126
  1450
  1451 930E A9 FF			lda #$FF
  1452 9310 85 57			sta NZONE
  1453 9312 85 50			sta SZONE
  1454
  1455 				; optimize OK (interface.inc), line = 127
  1456
  1457 9314 A9 00			lda #$00
  1458 9316 85 3E			sta I
  1459
  1460 9318			l_03DE
  1461 				; --- ForToDoCondition
  1462 9318 A4 3E			ldy I
  1463 931A C0 20			cpy #$20
  1464 931C 90 03 4C AA 93		jcs l_03EC
  1465
  1466 				; optimize OK (interface.inc), line = 129
  1467
  1468 9321 B9 00 05			lda adr._MZONEACTIVE,y
  1469 9324 F0 7D			jeq l_03FB
  1470
  1471 				; optimize OK (interface.inc), line = 130
  1472
  1473 9326 B9 20 05			lda adr._MZONEX1,y
  1474 9329 85 9E			sta :STACKORIGIN+10
  1475 932B A0 00			ldy #$00
  1476 932D A5 55			lda CURSOR.MX
  1477 932F 10 01			spl
  1478 9331 88				dey
  1479 9332 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  1480 9334 C5 9E			cmp :STACKORIGIN+10
  1481 9336 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1482 9338 E9 00			sbc #$00
  1483 933A 50 02			svc
  1484 933C 49 80			eor #$80
  1485 933E 30 63			jmi l_0446
  1486 9340 A4 3E			ldy I
  1487 9342 B9 60 05			lda adr._MZONEX2,y
  1488 9345 85 9F			sta :STACKORIGIN+11
  1489 9347 A0 00			ldy #$00
  1490 9349 A5 55			lda CURSOR.MX
  1491 934B 10 01			spl
  1492 934D 88				dey
  1493 934E 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  1494 9350 85 9E			sta :STACKORIGIN+10
  1495 9352 A5 9F			lda :STACKORIGIN+11
  1496 9354 C5 9E			cmp :STACKORIGIN+10
  1497 9356 A9 00			lda #$00
  1498 9358 E5 AE			sbc :STACKORIGIN+STACKWIDTH+10
  1499 935A 50 02			svc
  1500 935C 49 80			eor #$80
  1501 935E 30 43			jmi l_0446
  1502 9360 A4 3E			ldy I
  1503 9362 B9 40 05			lda adr._MZONEY1,y
  1504 9365 85 9F			sta :STACKORIGIN+11
  1505 9367 A0 00			ldy #$00
  1506 9369 A5 54			lda CURSOR.MY
  1507 936B 10 01			spl
  1508 936D 88				dey
  1509 936E 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  1510 9370 C5 9F			cmp :STACKORIGIN+11
  1511 9372 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  1512 9374 E9 00			sbc #$00
  1513 9376 50 02			svc
  1514 9378 49 80			eor #$80
  1515 937A 30 27			jmi l_0446
  1516 937C A4 3E			ldy I
  1517 937E B9 80 05			lda adr._MZONEY2,y
  1518 9381 85 9F			sta :STACKORIGIN+11
  1519 9383 A0 00			ldy #$00
  1520 9385 A5 54			lda CURSOR.MY
  1521 9387 10 01			spl
  1522 9389 88				dey
  1523 938A 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  1524 938C 85 9E			sta :STACKORIGIN+10
  1525 938E A5 9F			lda :STACKORIGIN+11
  1526 9390 C5 9E			cmp :STACKORIGIN+10
  1527 9392 A9 00			lda #$00
  1528 9394 E5 AE			sbc :STACKORIGIN+STACKWIDTH+10
  1529 9396 50 02			svc
  1530 9398 49 80			eor #$80
  1531 939A 30 07			jmi l_0446
  1532
  1533 				; optimize OK (interface.inc), line = 133
  1534
  1535 939C A5 3E			lda I
  1536 939E 85 57			sta NZONE
  1537 93A0 4C AA 93			jmp b_03DE					; break
  1538 93A3			l_0446
  1539 93A3			l_03FB
  1540
  1541 				; --- ForToDoEpilog
  1542 93A3 E6 3E			inc I
  1543 93A5 F0 03 4C 18 93		jne l_03DE
  1544 93AA			l_03EC
  1545 93AA			b_03DE
  1546
  1547 				; optimize OK (interface.inc), line = 137
  1548
  1549 93AA A5 57			lda NZONE
  1550 93AC C9 FF			cmp #$FF
  1551 93AE D0 03 4C 7A 94		jeq l_0468
  1552
  1553 				; optimize OK (interface.inc), line = 139
  1554
  1555 93B3 38 E9 09			sub #$09
  1556 93B6 50 02			svc
  1557 93B8 49 80			eor #$80
  1558 93BA 30 03 4C 4D 94		jpl l_047B
  1559
  1560 				; optimize FAIL ('REFRESHZONE', interface.inc), line = 141
  1561
  1562 93BF 20 CE 92			jsr REFRESHZONE
  1563
  1564 				; optimize OK (interface.inc), line = 142
  1565
  1566 93C2 A5 4A			lda CURSOR.MBUTTON
  1567 93C4 D0 18			jne l_048F
  1568
  1569 				; optimize OK (interface.inc), line = 144
  1570
  1571 93C6 A5 4B			lda CURSOR.OMBUTTON
  1572 93C8 C9 01			cmp #$01
  1573 93CA D0 0F			jne l_04B0
  1574 93CC A5 57			lda NZONE
  1575 93CE C5 51			cmp OZONE
  1576 93D0 D0 09			jne l_04B0
  1577
  1578 				; optimize FAIL ('PRESSED', interface.inc), line = 145
  1579
  1580 93D2 20 F7 92			jsr PRESSED
  1581 93D5 AD 62 A4			lda PRESSED.RESULT
  1582 93D8 8D 61 A4			sta RESULT
  1583 93DB			l_04B0
  1584 93DB 4C 4A 94			jmp l_04C0
  1585 93DE			l_048F
  1586
  1587 				; optimize OK (interface.inc), line = 149
  1588
  1589 93DE A5 57			lda NZONE
  1590 93E0 C5 51			cmp OZONE
  1591 93E2 F0 66			jeq l_04D4
  1592
  1593 				; optimize OK (interface.inc), line = 151
  1594
  1595 93E4 38 E9 03			sub #$03
  1596 93E7 50 02			svc
  1597 93E9 49 80			eor #$80
  1598 93EB 10 4D			jpl l_04E7
  1599
  1600 				; optimize OK (interface.inc), line = 153
  1601
  1602 93ED A9 FF			lda #$FF
  1603 93EF 20 24 95			jsr SETICON
  1604
  1605 				; optimize OK (interface.inc), line = 154
  1606
  1607 93F2 A4 57			ldy NZONE
  1608 93F4 B9 20 05			lda adr._MZONEX1,y
  1609 93F7 85 8C			sta PUTIMAGE.X
  1610 93F9 A0 00			ldy #$00
  1611 93FB A5 57			lda NZONE
  1612 93FD 10 01			spl
  1613 93FF 88				dey
  1614 9400 84 B2			sty :STACKORIGIN+STACKWIDTH+14
  1615 9402 18 69 03			add #$03
  1616 9405 85 A1			sta :STACKORIGIN+13
  1617 9407 A9 00			lda #$00
  1618 9409 65 B2			adc :STACKORIGIN+STACKWIDTH+14
  1619 940B 06 A1			asl :STACKORIGIN+13
  1620 940D 2A				rol @
  1621 940E 85 B1			sta :STACKORIGIN+STACKWIDTH+13
  1622 9410 A5 A1			lda :STACKORIGIN+13
  1623 9412 18 69 00			add #$00
  1624 9415 A8				tay
  1625 9416 A5 B1			lda :STACKORIGIN+STACKWIDTH+13
  1626 9418 69 00			adc #$00
  1627 941A 85 B1			sta :STACKORIGIN+STACKWIDTH+13
  1628 941C B9 8F 88			lda adr.AICONS,y
  1629 941F 85 88			sta PUTIMAGE.ADR
  1630 9421 B9 90 88			lda adr.AICONS+1,y
  1631 9424 85 89			sta PUTIMAGE.ADR+1
  1632 9426 A9 32			lda #$32
  1633 9428 85 84			sta PUTIMAGE.Y
  1634 942A A9 03			lda #$03
  1635 942C 8D 37 A4			sta PUTIMAGE.WIDTH
  1636 942F A9 0C			lda #$0C
  1637 9431 8D 38 A4			sta PUTIMAGE.HEIGHT
  1638 9434 20 AC 8D			jsr PUTIMAGE
  1639 9437 4C 42 94			jmp l_0506
  1640 943A			l_04E7
  1641
  1642 				; optimize OK (interface.inc), line = 156
  1643
  1644 943A A5 57			lda NZONE
  1645 943C 38 E9 03			sub #$03
  1646 943F 20 D6 95			jsr SETCONTROL
  1647 9442			l_0506
  1648
  1649 				; optimize OK (interface.inc), line = 158
  1650
  1651 9442 A5 57			lda NZONE
  1652 9444 85 51			sta OZONE
  1653
  1654 				; optimize OK (interface.inc), line = 159
  1655
  1656 9446 A9 01			lda #$01
  1657 9448 85 4B			sta CURSOR.OMBUTTON
  1658 944A			l_04D4
  1659 944A			l_04C0
  1660 944A 4C 77 94			jmp l_0523
  1661 944D			l_047B
  1662
  1663 				; optimize OK (interface.inc), line = 165
  1664
  1665 944D A5 4A			lda CURSOR.MBUTTON
  1666 944F D0 1B			jne l_0535
  1667
  1668 				; optimize OK (interface.inc), line = 167
  1669
  1670 9451 A5 4B			lda CURSOR.OMBUTTON
  1671 9453 C9 01			cmp #$01
  1672 9455 D0 09			jne l_0548
  1673 9457 20 F7 92			jsr PRESSED
  1674 945A AD 62 A4			lda PRESSED.RESULT
  1675 945D 8D 61 A4			sta RESULT
  1676 9460			l_0548
  1677
  1678 				; optimize OK (interface.inc), line = 168
  1679
  1680 9460 A5 57			lda NZONE
  1681 9462 C5 51			cmp OZONE
  1682 9464 F0 03			jeq l_0563
  1683 9466 20 CE 92			jsr REFRESHZONE
  1684 9469			l_0563
  1685 9469 4C 77 94			jmp l_0570
  1686 946C			l_0535
  1687
  1688 				; optimize OK (interface.inc), line = 172
  1689
  1690 946C A9 FF			lda #$FF
  1691 946E 85 57			sta NZONE
  1692
  1693 				; optimize FAIL ('REFRESHZONE', interface.inc), line = 173
  1694
  1695 9470 20 CE 92			jsr REFRESHZONE
  1696
  1697 				; optimize OK (interface.inc), line = 174
  1698
  1699 9473 A9 01			lda #$01
  1700 9475 85 4B			sta CURSOR.OMBUTTON
  1701 9477			l_0570
  1702 9477			l_0523
  1703 9477 4C 95 94			jmp l_0582
  1704 947A			l_0468
  1705
  1706 				; optimize FAIL ('REFRESHZONE', interface.inc), line = 180
  1707
  1708 947A 20 CE 92			jsr REFRESHZONE
  1709
  1710 				; optimize OK (interface.inc), line = 181
  1711
  1712 947D A5 4B			lda CURSOR.OMBUTTON
  1713 947F C9 01			cmp #$01
  1714 9481 D0 12			jne l_0595
  1715
  1716 				; optimize OK (interface.inc), line = 183
  1717
  1718 9483 A9 FF			lda #$FF
  1719 9485 20 24 95			jsr SETICON
  1720 9488 A9 FF			lda #$FF
  1721 948A 20 D6 95			jsr SETCONTROL
  1722
  1723 				; optimize OK (interface.inc), line = 184
  1724
  1725 948D A9 FF			lda #$FF
  1726 948F 85 51			sta OZONE
  1727
  1728 				; optimize OK (interface.inc), line = 185
  1729
  1730 9491 A9 00			lda #$00
  1731 9493 85 4B			sta CURSOR.OMBUTTON
  1732 9495			l_0595
  1733 9495			l_0582
  1734 9495			@exit
  1735
  1736 				; ------------------------------------------------------------
  1737
  1738 = A461			RESULT	= DATAORIGIN+$003E
  1739 = 0057			NZONE	= $57
  1740 9495 60				rts						; ret
  1741 				.endl
  1742
  1743 9496			.local	INVERTZONE					; PROCEDURE
  1744 9496 8D 63 A4			sta I
  1745
  1746 				; optimize OK (controls.inc), line = 9
  1747
  1748 9499 AC 63 A4			ldy I
  1749 949C B9 60 05			lda adr._MZONEX2,y
  1750 949F 38 F9 20 05			sub adr._MZONEX1,y
  1751 94A3 8D 64 A4			sta _W
  1752
  1753 				; optimize OK (controls.inc), line = 10
  1754
  1755 94A6 B9 80 05			lda adr._MZONEY2,y
  1756 94A9 38 F9 40 05			sub adr._MZONEY1,y
  1757 94AD 8D 65 A4			sta _H
  1758
  1759 				; optimize OK (controls.inc), line = 11
  1760
  1761 94B0 B9 40 05			lda adr._MZONEY1,y
  1762 94B3 85 8C			sta INVERT.Y
  1763 94B5 B9 20 05			lda adr._MZONEX1,y
  1764 94B8 85 88			sta INVERT.X
  1765 94BA AD 64 A4			lda _W
  1766 94BD 85 84			sta INVERT.W
  1767 94BF AD 65 A4			lda _H
  1768 94C2 8D 3B A4			sta INVERT.H
  1769 94C5 20 8C 90			jsr INVERT
  1770
  1771 				; ------------------------------------------------------------
  1772
  1773 = A463			I	= DATAORIGIN+$0040
  1774 = A464			_W	= DATAORIGIN+$0041
  1775 = A465			_H	= DATAORIGIN+$0042
  1776
  1777 = A463			@VarData	= I
  1778 = 0003			@VarDataSize	= 3
  1779
  1780 94C8			@exit
  1781 					.ifdef @new
  1782 					lda <@VarData
  1783 					sta :ztmp
  1784 					lda >@VarData
  1785 					ldy #@VarDataSize-1
  1786 					jmp @FreeMem
  1787 					els
  1788 94C8 60				rts						; ret
  1789 					eif
  1790 				.endl
  1791
  1792 94C9			.local	CLEARWORKAREA					; PROCEDURE
  1793
  1794 				; optimize OK (controls.inc), line = 16
  1795
  1796 94C9 A9 00			lda #$00
  1797 94CB 85 88			sta SYSTEM.FILLCHAR.@012A.A
  1798 94CD A9 28			lda #$28
  1799 94CF 85 89			sta SYSTEM.FILLCHAR.@012A.A+1
  1800 94D1 A9 C0			lda #$C0
  1801 94D3 85 8C			sta SYSTEM.FILLCHAR.@012A.COUNT
  1802 94D5 A9 03			lda #$03
  1803 94D7 85 8D			sta SYSTEM.FILLCHAR.@012A.COUNT+1
  1804 94D9 A9 00			lda #$00
  1805 94DB 85 84			sta SYSTEM.FILLCHAR.@012A.VALUE
  1806 94DD				.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
  1807 94DD				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@012A.M@INLINE [Source: SIED.a65]
     4 94DD 20 4F 89			jsr @fill
  1808 					.ENDL
  1809
  1810 				; optimize FAIL ('CLEARWORKZONES', controls.inc), line = 17
  1811
  1812 94E0 20 8F 91			jsr CLEARWORKZONES
  1813 94E3			@exit
  1814 					.ifdef @new
  1815 					lda <@VarData
  1816 					sta :ztmp
  1817 					lda >@VarData
  1818 					ldy #@VarDataSize-1
  1819 					jmp @FreeMem
  1820 					els
  1821 94E3 60				rts						; ret
  1822 					eif
  1823 				.endl
  1824
  1825 94E4			.local	CLEARSTATUS					; PROCEDURE
  1826
  1827 				; optimize OK (controls.inc), line = 22
  1828
  1829 94E4 AD F8 06			lda adr.YSCR+$F8
  1830 94E7 85 88			sta SYSTEM.FILLCHAR.@012A.A
  1831 94E9 AD F9 06			lda adr.YSCR+1+$F8
  1832 94EC 85 89			sta SYSTEM.FILLCHAR.@012A.A+1
  1833 94EE A9 18			lda #$18
  1834 94F0 85 8C			sta SYSTEM.FILLCHAR.@012A.COUNT
  1835 94F2 A9 01			lda #$01
  1836 94F4 85 8D			sta SYSTEM.FILLCHAR.@012A.COUNT+1
  1837 94F6 A9 00			lda #$00
  1838 94F8 85 84			sta SYSTEM.FILLCHAR.@012A.VALUE
  1839 94FA				.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
  1840 94FA				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@012A.M@INLINE [Source: SIED.a65]
     4 94FA 20 4F 89			jsr @fill
  1841 					.ENDL
  1842 94FD			@exit
  1843 					.ifdef @new
  1844 					lda <@VarData
  1845 					sta :ztmp
  1846 					lda >@VarData
  1847 					ldy #@VarDataSize-1
  1848 					jmp @FreeMem
  1849 					els
  1850 94FD 60				rts						; ret
  1851 					eif
  1852 				.endl
  1853
  1854 94FE			.local	SETSTATUS					; PROCEDURE
  1855
  1856 				; optimize FAIL ('CLEARSTATUS', controls.inc), line = 27
  1857
  1858 94FE 20 E4 94			jsr CLEARSTATUS
  1859
  1860 				; optimize OK (controls.inc), line = 28
  1861
  1862 9501 A9 28			lda #$28
  1863 9503				.LOCAL +MAIN.SETSCREENWIDTH
  1864 9503				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 9503 85 88			sta NSW
     5 9505 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 9508 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 950B 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
  1865 					.ENDL
  1866
  1867 				; optimize OK (controls.inc), line = 29
  1868
  1869 950E A9 00			lda #$00
  1870 9510 85 88			sta PUTTEXTC.X
  1871 9512 A9 45			lda #$45
  1872 9514 85 8C			sta PUTTEXTC.Y
  1873 9516 AD 66 A4			lda S
  1874 9519 85 84			sta PUTTEXTC.S
  1875 951B AD 67 A4			lda S+1
  1876 951E 85 85			sta PUTTEXTC.S+1
  1877 9520 20 22 90			jsr PUTTEXTC
  1878
  1879 				; ------------------------------------------------------------
  1880
  1881 = A466			S	= DATAORIGIN+$0043
  1882
  1883 = A466			@VarData	= S
  1884 = 0002			@VarDataSize	= 2
  1885
  1886 9523			@exit
  1887 					.ifdef @new
  1888 					lda <@VarData
  1889 					sta :ztmp
  1890 					lda >@VarData
  1891 					ldy #@VarDataSize-1
  1892 					jmp @FreeMem
  1893 					els
  1894 9523 60				rts						; ret
  1895 					eif
  1896 				.endl
  1897
  1898 9524			.local	SETICON						; PROCEDURE
  1899 9524 8D 68 A4			sta N
  1900
  1901 				; optimize OK (controls.inc), line = 38
  1902
  1903 9527 A9 28			lda #$28
  1904 9529				.LOCAL +MAIN.SETSCREENWIDTH
  1905 9529				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 9529 85 88			sta NSW
     5 952B 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 952E 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 9531 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
  1906 					.ENDL
  1907
  1908 				; optimize OK (controls.inc), line = 39
  1909
  1910 9534 A9 00			lda #$00
  1911 9536 85 3E			sta I
  1912
  1913 9538			l_060D
  1914 				; --- ForToDoCondition
  1915 9538 A4 3E			ldy I
  1916 953A C0 03			cpy #$03
  1917 953C 90 03 4C D5 95		jcs l_061B
  1918
  1919 				; optimize OK (controls.inc), line = 41
  1920
  1921 9541 B9 20 05			lda adr._MZONEX1,y
  1922 9544 8D 69 A4			sta _X
  1923
  1924 				; optimize OK (controls.inc), line = 42
  1925
  1926 9547 B9 00 05			lda adr._MZONEACTIVE,y
  1927 954A D0 03 4C CE 95		jeq l_0633
  1928
  1929 				; optimize OK (controls.inc), line = 44
  1930
  1931 954F A5 3E			lda I
  1932 9551 CD 68 A4			cmp N
  1933 9554 D0 48			jne l_0648
  1934
  1935 				; optimize OK (controls.inc), line = 46
  1936
  1937 9556 AD 69 A4			lda _X
  1938 9559 38 E9 01			sub #$01
  1939 955C 85 8C			sta PUTIMAGE.X
  1940 955E A9 BB			lda #$BB
  1941 9560 85 88			sta PUTIMAGE.ADR
  1942 9562 A9 83			lda #$83
  1943 9564 85 89			sta PUTIMAGE.ADR+1
  1944 9566 A9 30			lda #$30
  1945 9568 85 84			sta PUTIMAGE.Y
  1946 956A A9 05			lda #$05
  1947 956C 8D 37 A4			sta PUTIMAGE.WIDTH
  1948 956F A9 0F			lda #$0F
  1949 9571 8D 38 A4			sta PUTIMAGE.HEIGHT
  1950 9574 20 AC 8D			jsr PUTIMAGE
  1951
  1952 				; optimize OK (controls.inc), line = 47
  1953
  1954 9577 A0 00			ldy #$00
  1955 9579 AD 68 A4			lda N
  1956 957C 10 01			spl
  1957 957E 88				dey
  1958 957F 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  1959 9581 18 69 06			add #$06
  1960 9584 85 9D			sta :STACKORIGIN+9
  1961 9586 A9 00			lda #$00
  1962 9588 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  1963 958A 06 9D			asl :STACKORIGIN+9
  1964 958C 2A				rol @
  1965 958D 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1966 958F A5 9D			lda :STACKORIGIN+9
  1967 9591 18 69 00			add #$00
  1968 9594 A8				tay
  1969 9595 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1970 9597 69 00			adc #$00
  1971 9599 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1972 959B 4C A2 95			jmp l_066A
  1973 959E			l_0648
  1974
  1975 				; optimize OK (controls.inc), line = 50
  1976
  1977 959E A5 3E			lda I
  1978 95A0 0A				asl @
  1979 95A1 A8				tay
  1980 95A2			l_066A
  1981 95A2 B9 8F 88			lda adr.AICONS,y
  1982 95A5 8D 6A A4			sta P
  1983 95A8 B9 90 88			lda adr.AICONS+1,y
  1984 95AB 8D 6B A4			sta P+1
  1985
  1986 				; optimize OK (controls.inc), line = 51
  1987
  1988 95AE AD 6A A4			lda P
  1989 95B1 85 88			sta PUTIMAGE.ADR
  1990 95B3 AD 6B A4			lda P+1
  1991 95B6 85 89			sta PUTIMAGE.ADR+1
  1992 95B8 AD 69 A4			lda _X
  1993 95BB 85 8C			sta PUTIMAGE.X
  1994 95BD A9 32			lda #$32
  1995 95BF 85 84			sta PUTIMAGE.Y
  1996 95C1 A9 03			lda #$03
  1997 95C3 8D 37 A4			sta PUTIMAGE.WIDTH
  1998 95C6 A9 0C			lda #$0C
  1999 95C8 8D 38 A4			sta PUTIMAGE.HEIGHT
  2000 95CB 20 AC 8D			jsr PUTIMAGE
  2001 95CE			l_0633
  2002
  2003 				; --- ForToDoEpilog
  2004 95CE E6 3E			inc I
  2005 95D0 F0 03 4C 38 95		jne l_060D
  2006 95D5			l_061B
  2007
  2008 				; ------------------------------------------------------------
  2009
  2010 = A468			N	= DATAORIGIN+$0045
  2011 = A469			_X	= DATAORIGIN+$0046
  2012 = A46A			P	= DATAORIGIN+$0047
  2013
  2014 = A468			@VarData	= N
  2015 = 0004			@VarDataSize	= 4
  2016
  2017 95D5			@exit
  2018 					.ifdef @new
  2019 					lda <@VarData
  2020 					sta :ztmp
  2021 					lda >@VarData
  2022 					ldy #@VarDataSize-1
  2023 					jmp @FreeMem
  2024 					els
  2025 95D5 60				rts						; ret
  2026 					eif
  2027 				.endl
  2028
  2029 95D6			.local	SETCONTROL					; PROCEDURE
  2030 95D6 8D 6C A4			sta N
  2031
  2032 				; optimize OK (controls.inc), line = 72
  2033
  2034 95D9 A9 28			lda #$28
  2035 95DB				.LOCAL +MAIN.SETSCREENWIDTH
  2036 95DB				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 95DB 85 88			sta NSW
     5 95DD 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 95E0 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 95E3 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
  2037 					.ENDL
  2038
  2039 				; optimize OK (controls.inc), line = 73
  2040
  2041 95E6 A9 00			lda #$00
  2042 95E8 85 3E			sta I
  2043
  2044 95EA			l_0691
  2045 				; --- ForToDoCondition
  2046 95EA A5 3E			lda I
  2047 95EC C9 06			cmp #$06
  2048 95EE B0 53			jcs l_069F
  2049
  2050 				; optimize OK (controls.inc), line = 75
  2051
  2052 95F0 18 69 03			add #$03
  2053 95F3 A8				tay
  2054 95F4 B9 20 05			lda adr._MZONEX1,y
  2055 95F7 8D 6D A4			sta _X
  2056
  2057 				; optimize OK (controls.inc), line = 76
  2058
  2059 95FA A5 3E			lda I
  2060 95FC CD 6C A4			cmp N
  2061 95FF D0 0E			jne l_06C0
  2062
  2063 				; optimize OK (controls.inc), line = 77
  2064
  2065 9601 0A				asl @
  2066 9602 A8				tay
  2067 9603 B9 83 88			lda adr.ACONTROLS+$0C,y
  2068 9606 8D 6E A4			sta P
  2069 9609 B9 84 88			lda adr.ACONTROLS+1+$0C,y
  2070 960C 4C 1C 96			jmp l_06D6
  2071 960F			l_06C0
  2072
  2073 				; optimize OK (controls.inc), line = 79
  2074
  2075 960F A5 3E			lda I
  2076 9611 0A				asl @
  2077 9612 A8				tay
  2078 9613 B9 77 88			lda adr.ACONTROLS,y
  2079 9616 8D 6E A4			sta P
  2080 9619 B9 78 88			lda adr.ACONTROLS+1,y
  2081 961C			l_06D6
  2082 961C 8D 6F A4			sta P+1
  2083
  2084 				; optimize OK (controls.inc), line = 80
  2085
  2086 961F AD 6E A4			lda P
  2087 9622 85 88			sta PUTIMAGE.ADR
  2088 9624 AD 6F A4			lda P+1
  2089 9627 85 89			sta PUTIMAGE.ADR+1
  2090 9629 AD 6D A4			lda _X
  2091 962C 85 8C			sta PUTIMAGE.X
  2092 962E A9 37			lda #$37
  2093 9630 85 84			sta PUTIMAGE.Y
  2094 9632 A9 03			lda #$03
  2095 9634 8D 37 A4			sta PUTIMAGE.WIDTH
  2096 9637 A9 08			lda #$08
  2097 9639 8D 38 A4			sta PUTIMAGE.HEIGHT
  2098 963C 20 AC 8D			jsr PUTIMAGE
  2099
  2100 				; --- ForToDoEpilog
  2101 963F E6 3E			inc I
  2102 9641 D0 A7			jne l_0691
  2103 9643			l_069F
  2104
  2105 				; ------------------------------------------------------------
  2106
  2107 = A46C			N	= DATAORIGIN+$0049
  2108 = A46D			_X	= DATAORIGIN+$004A
  2109 = A46E			P	= DATAORIGIN+$004B
  2110
  2111 = A46C			@VarData	= N
  2112 = 0004			@VarDataSize	= 4
  2113
  2114 9643			@exit
  2115 					.ifdef @new
  2116 					lda <@VarData
  2117 					sta :ztmp
  2118 					lda >@VarData
  2119 					ldy #@VarDataSize-1
  2120 					jmp @FreeMem
  2121 					els
  2122 9643 60				rts						; ret
  2123 					eif
  2124 				.endl
  2125
  2126 9644			.local	ADDBUTTON					; FUNCTION
  2127
  2128 				; optimize OK (controls.inc), line = 88
  2129
  2130 9644 AD 70 A4			lda X
  2131 9647 85 88			sta PUTTEXT.X
  2132 9649 AD 71 A4			lda Y
  2133 964C 85 8C			sta PUTTEXT.Y
  2134 964E AD 72 A4			lda CAP
  2135 9651 85 84			sta PUTTEXT.S
  2136 9653 AD 73 A4			lda CAP+1
  2137 9656 85 85			sta PUTTEXT.S+1
  2138 9658 20 B4 8F			jsr PUTTEXT
  2139
  2140 				; optimize OK (controls.inc), line = 89
  2141
  2142 965B AD 74 A4			lda PRC
  2143 965E 8D 50 A4			sta ADDZONE.@02DB.PRC
  2144 9661 AD 75 A4			lda PRC+1
  2145 9664 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  2146 9667 AC 73 A4			ldy CAP+1
  2147 966A 84 81			sty :bp+1
  2148 966C AC 72 A4			ldy CAP
  2149 966F B1 80			lda (:bp),y
  2150 9671 18 69 02			add #$02
  2151 9674 8D 4E A4			sta ADDZONE.@02DB.W
  2152 9677 AD 71 A4			lda Y
  2153 967A 38 E9 01			sub #$01
  2154 967D 8D 4D A4			sta ADDZONE.@02DB.Y
  2155 9680 AD 70 A4			lda X
  2156 9683 38 E9 01			sub #$01
  2157 9686 8D 4C A4			sta ADDZONE.@02DB.X
  2158 9689 A9 FF			lda #$FF
  2159 968B 8D 4B A4			sta ADDZONE.@02DB.N
  2160 968E A9 07			lda #$07
  2161 9690 8D 4F A4			sta ADDZONE.@02DB.H
  2162 9693 20 DE 91			jsr ADDZONE.@02DB
  2163 9696 AD 52 A4			lda ADDZONE.@02DB.RESULT
  2164 9699 8D 76 A4			sta RESULT
  2165 969C			@exit
  2166
  2167 				; ------------------------------------------------------------
  2168
  2169 = A470			X	= DATAORIGIN+$004D
  2170 = A471			Y	= DATAORIGIN+$004E
  2171 = A472			CAP	= DATAORIGIN+$004F
  2172 = A474			PRC	= DATAORIGIN+$0051
  2173 = A476			RESULT	= DATAORIGIN+$0053
  2174
  2175 = A470			@VarData	= X
  2176 = 0006			@VarDataSize	= 6
  2177
  2178 969C 60				rts						; ret
  2179 				.endl
  2180
  2181 969D			.local	ADDINPUT					; FUNCTION
  2182
  2183 				; optimize OK (controls.inc), line = 96
  2184
  2185 969D AD 77 A4			lda X
  2186 96A0 85 88			sta PUTTEXT.X
  2187 96A2 AD 78 A4			lda Y
  2188 96A5 85 8C			sta PUTTEXT.Y
  2189 96A7 AD 7A A4			lda VALUE
  2190 96AA 85 84			sta PUTTEXT.S
  2191 96AC AD 7B A4			lda VALUE+1
  2192 96AF 85 85			sta PUTTEXT.S+1
  2193 96B1 20 B4 8F			jsr PUTTEXT
  2194
  2195 				; optimize OK (controls.inc), line = 97
  2196
  2197 96B4 AD 7C A4			lda PRC
  2198 96B7 8D 50 A4			sta ADDZONE.@02DB.PRC
  2199 96BA AD 7D A4			lda PRC+1
  2200 96BD 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  2201 96C0 AD 79 A4			lda W
  2202 96C3 18 69 02			add #$02
  2203 96C6 8D 4E A4			sta ADDZONE.@02DB.W
  2204 96C9 AD 78 A4			lda Y
  2205 96CC 38 E9 01			sub #$01
  2206 96CF 8D 4D A4			sta ADDZONE.@02DB.Y
  2207 96D2 AD 77 A4			lda X
  2208 96D5 38 E9 01			sub #$01
  2209 96D8 8D 4C A4			sta ADDZONE.@02DB.X
  2210 96DB A9 FF			lda #$FF
  2211 96DD 8D 4B A4			sta ADDZONE.@02DB.N
  2212 96E0 A9 07			lda #$07
  2213 96E2 8D 4F A4			sta ADDZONE.@02DB.H
  2214 96E5 20 DE 91			jsr ADDZONE.@02DB
  2215 96E8 AD 52 A4			lda ADDZONE.@02DB.RESULT
  2216 96EB 8D 7E A4			sta RESULT
  2217 96EE			@exit
  2218
  2219 				; ------------------------------------------------------------
  2220
  2221 = A477			X	= DATAORIGIN+$0054
  2222 = A478			Y	= DATAORIGIN+$0055
  2223 = A479			W	= DATAORIGIN+$0056
  2224 = A47A			VALUE	= DATAORIGIN+$0057
  2225 = A47C			PRC	= DATAORIGIN+$0059
  2226 = A47E			RESULT	= DATAORIGIN+$005B
  2227
  2228 = A477			@VarData	= X
  2229 = 0007			@VarDataSize	= 7
  2230
  2231 96EE 60				rts						; ret
  2232 				.endl
  2233
  2234 96EF			.local	DOINPUT						; FUNCTION
  2235
  2236 96EF 4C 31 97			jmp l_0741
  2237
  2238 96F2			.local	REFRESHVALUE					; PROCEDURE
  2239
  2240 				; optimize OK (controls.inc), line = 110
  2241
  2242 96F2 AD 86 A4			lda X
  2243 96F5 85 88			sta BLANK.X
  2244 96F7 AD 87 A4			lda Y
  2245 96FA 85 8C			sta BLANK.Y
  2246 96FC AD 88 A4			lda W
  2247 96FF 85 84			sta BLANK.W
  2248 9701 A9 07			lda #$07
  2249 9703 8D 3C A4			sta BLANK.H
  2250 9706 20 CF 90			jsr BLANK
  2251
  2252 				; optimize OK (controls.inc), line = 111
  2253
  2254 9709 AD 87 A4			lda Y
  2255 970C 18 69 01			add #$01
  2256 970F 85 8C			sta PUTTEXT.Y
  2257 9711 AD 86 A4			lda X
  2258 9714 85 88			sta PUTTEXT.X
  2259 9716 AD 7F A4			lda VALUE
  2260 9719 85 84			sta PUTTEXT.S
  2261 971B AD 80 A4			lda VALUE+1
  2262 971E 85 85			sta PUTTEXT.S+1
  2263 9720 20 B4 8F			jsr PUTTEXT
  2264
  2265 				; optimize OK (controls.inc), line = 112
  2266
  2267 9723 AC 80 A4			ldy VALUE+1
  2268 9726 84 81			sty :bp+1
  2269 9728 AC 7F A4			ldy VALUE
  2270 972B B1 80			lda (:bp),y
  2271 972D 8D 85 A4			sta LN
  2272 9730			@exit
  2273 					.ifdef @new
  2274 					lda <@VarData
  2275 					sta :ztmp
  2276 					lda >@VarData
  2277 					ldy #@VarDataSize-1
  2278 					jmp @FreeMem
  2279 					els
  2280 9730 60				rts						; ret
  2281 					eif
  2282 				.endl
  2283 9731			l_0741
  2284
  2285 				; optimize OK (controls.inc), line = 116
  2286
  2287 9731 A5 50			lda SZONE
  2288 9733 8D 82 A4			sta OZONE
  2289
  2290 				; optimize OK (controls.inc), line = 117
  2291
  2292 9736 A4 50			ldy SZONE
  2293 9738 B9 20 05			lda adr._MZONEX1,y
  2294 973B 8D 86 A4			sta X
  2295
  2296 				; optimize OK (controls.inc), line = 118
  2297
  2298 973E B9 40 05			lda adr._MZONEY1,y
  2299 9741 8D 87 A4			sta Y
  2300
  2301 				; optimize OK (controls.inc), line = 119
  2302
  2303 9744 B9 60 05			lda adr._MZONEX2,y
  2304 9747 38 ED 86 A4			sub X
  2305 974B 38 E9 01			sub #$01
  2306 974E 8D 88 A4			sta W
  2307
  2308 				; optimize OK (controls.inc), line = 120
  2309
  2310 9751 A9 00			lda #$00
  2311 9753 99 00 05			sta adr._MZONEACTIVE,y
  2312
  2313 				; optimize FAIL (0, controls.inc), line = 121
  2314
  2315 9756 EE 86 A4			inc X
  2316
  2317 				; optimize FAIL ('REFRESHVALUE', controls.inc), line = 122
  2318
  2319 9759 20 F2 96			jsr REFRESHVALUE
  2320
  2321 				; optimize OK (controls.inc), line = 123
  2322
  2323 975C AD 85 A4			lda LN
  2324 975F 8D 83 A4			sta CX
  2325
  2326 				; optimize OK (controls.inc), line = 124
  2327
  2328 9762 A4 14			ldy TM
  2329 9764 C8				iny
  2330 9765 8C 89 A4			sty CTM
  2331 9768 A9 00			lda #$00
  2332 976A 8D 8A A4			sta ISCRS
  2333 976D 85 5D			sta CURSOR.MALLOWKEYS
  2334 976F A9 FF			lda #$FF
  2335 9771 8D FC 02			sta KEYB
  2336
  2337 				; --- RepeatUntilProlog
  2338 9774			l_07B8
  2339
  2340 				; optimize OK (controls.inc), line = 126
  2341
  2342 9774 AD 86 A4			lda X
  2343 9777 18 6D 83 A4			add CX
  2344 977B 8D 84 A4			sta CH
  2345
  2346 				; optimize OK (controls.inc), line = 127
  2347
  2348 977E A5 14			lda TM
  2349 9780 CD 89 A4			cmp CTM
  2350 9783 D0 28			jne l_07D8
  2351
  2352 				; optimize OK (controls.inc), line = 129
  2353
  2354 9785 18 69 14			add #$14
  2355 9788 8D 89 A4			sta CTM
  2356
  2357 				; optimize OK (controls.inc), line = 130
  2358
  2359 978B AD 84 A4			lda CH
  2360 978E 85 88			sta INVERT.X
  2361 9790 AD 87 A4			lda Y
  2362 9793 85 8C			sta INVERT.Y
  2363 9795 A9 00			lda #$00
  2364 9797 85 84			sta INVERT.W
  2365 9799 A9 06			lda #$06
  2366 979B 8D 3B A4			sta INVERT.H
  2367 979E 20 8C 90			jsr INVERT
  2368 97A1 A0 01			ldy #1
  2369 97A3 AD 8A A4			lda ISCRS
  2370 97A6 F0 01			beq @+
  2371 97A8 88				dey
  2372 				@
  2373 97A9 98				tya
  2374 97AA 8D 8A A4			sta ISCRS
  2375 97AD			l_07D8
  2376
  2377 				; optimize FAIL ('CHECKZONES', controls.inc), line = 132
  2378
  2379 97AD 20 CB 92			jsr CHECKZONES
  2380
  2381 				; optimize OK (controls.inc), line = 133
  2382
  2383 97B0 A5 4A			lda CURSOR.MBUTTON
  2384 97B2 F0 23			jeq l_080A
  2385
  2386 				; optimize OK (controls.inc), line = 135
  2387
  2388 97B4 AD 8A A4			lda ISCRS
  2389 97B7 F0 16			jeq l_0817
  2390 97B9 AD 84 A4			lda CH
  2391 97BC 85 88			sta INVERT.X
  2392 97BE AD 87 A4			lda Y
  2393 97C1 85 8C			sta INVERT.Y
  2394 97C3 A9 00			lda #$00
  2395 97C5 85 84			sta INVERT.W
  2396 97C7 A9 06			lda #$06
  2397 97C9 8D 3B A4			sta INVERT.H
  2398 97CC 20 8C 90			jsr INVERT
  2399 97CF			l_0817
  2400
  2401 				; optimize OK (controls.inc), line = 136
  2402
  2403 97CF A9 FE			lda #$FE
  2404 97D1 8D 81 A4			sta RESULT
  2405 97D4 4C 1C 99			jmp b_07B8					; break
  2406 97D7			l_080A
  2407
  2408 				; optimize OK (controls.inc), line = 138
  2409
  2410 97D7 AD FC 02			lda KEYB
  2411 97DA C9 FF			cmp #$FF
  2412 97DC D0 03 4C 19 99		jeq l_083B
  2413
  2414 				; optimize OK (controls.inc), line = 140
  2415
  2416 97E1 AD 8A A4			lda ISCRS
  2417 97E4 F0 1B			jeq l_0848
  2418 97E6 AD 84 A4			lda CH
  2419 97E9 85 88			sta INVERT.X
  2420 97EB AD 87 A4			lda Y
  2421 97EE 85 8C			sta INVERT.Y
  2422 97F0 A9 00			lda #$00
  2423 97F2 85 84			sta INVERT.W
  2424 97F4 A9 06			lda #$06
  2425 97F6 8D 3B A4			sta INVERT.H
  2426 97F9 20 8C 90			jsr INVERT
  2427 97FC A9 00			lda #$00
  2428 97FE 8D 8A A4			sta ISCRS
  2429 9801			l_0848
  2430
  2431 				; optimize OK (controls.inc), line = 141
  2432
  2433 9801 AD FC 02			lda KEYB
  2434 9804 8D 8B A4			sta @CASETMP_0004
  2435 9807 C9 1C			cmp #$1C
  2436 9809 D0 0B			jne l_0863
  2437 				@
  2438
  2439 				; optimize OK (controls.inc), line = 142
  2440
  2441 980B A9 FF			lda #$FF
  2442 980D 8D 81 A4			sta RESULT
  2443 9810 4C 1C 99			jmp b_07B8					; break
  2444 9813 4C 0F 99			jmp a_0004
  2445 9816			l_0863
  2446 9816 C9 0C			cmp #$0C
  2447 9818 D0 0C			jne l_086E
  2448
  2449 				; optimize OK (controls.inc), line = 143
  2450
  2451 981A AD 82 A4			lda OZONE
  2452 981D 8D 81 A4			sta RESULT
  2453 9820 4C 1C 99			jmp b_07B8					; break
  2454 9823 4C 0F 99			jmp a_0004
  2455 9826			l_086E
  2456 9826 C9 86			cmp #$86
  2457 9828 D0 0D			jne l_087B
  2458
  2459 				; optimize OK (controls.inc), line = 144
  2460
  2461 982A AD 83 A4			lda CX
  2462 982D 30 05			jmi l_088D
  2463 982F F0 03			jeq l_088D
  2464 9831 CE 83 A4			dec CX
  2465 9834			l_088D
  2466 9834 4C 0F 99			jmp a_0004
  2467 9837			l_087B
  2468 9837 C9 87			cmp #$87
  2469 9839 D0 1D			jne l_089B
  2470
  2471 				; optimize OK (controls.inc), line = 145
  2472
  2473 983B A0 00			ldy #$00
  2474 983D AD 83 A4			lda CX
  2475 9840 10 01			spl
  2476 9842 88				dey
  2477 9843 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  2478 9845 CD 88 A4			cmp W
  2479 9848 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2480 984A E9 00			sbc #$00
  2481 984C 50 02			svc
  2482 984E 49 80			eor #$80
  2483 9850 10 03			jpl l_08AF
  2484 9852 EE 83 A4			inc CX
  2485 9855			l_08AF
  2486 9855 4C 0F 99			jmp a_0004
  2487 9858			l_089B
  2488 9858 C9 34			cmp #$34
  2489 985A D0 46			jne l_08BD
  2490
  2491 				; optimize OK (controls.inc), line = 148
  2492
  2493 985C A0 00			ldy #$00
  2494 985E AD 83 A4			lda CX
  2495 9861 10 01			spl
  2496 9863 88				dey
  2497 9864 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  2498 9866 85 9D			sta :STACKORIGIN+9
  2499 9868 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2500 986A D0 05			bne @+
  2501 986C A5 9D			lda :STACKORIGIN+9
  2502 986E CD 85 A4			cmp LN
  2503 				@
  2504 9871 D0 10			jne l_08D1
  2505 9873 AD 85 A4			lda LN
  2506 9876 38 E9 01			sub #$01
  2507 9879 AC 80 A4			ldy VALUE+1
  2508 987C 84 81			sty :bp+1
  2509 987E AC 7F A4			ldy VALUE
  2510 9881 91 80			sta (:bp),y
  2511 9883			l_08D1
  2512
  2513 				; optimize OK (controls.inc), line = 149
  2514
  2515 9883 AC 7F A4 84 82 AC + 	mwy VALUE :bp2
  2516 988D AC 83 A4			ldy CX
  2517 9890 A9 00			lda #$00
  2518 9892 91 82			sta (:bp2),y
  2519
  2520 				; optimize OK (controls.inc), line = 150
  2521
  2522 9894 98				tya
  2523 9895 30 05			jmi l_08F8
  2524 9897 F0 03			jeq l_08F8
  2525 9899 CE 83 A4			dec CX
  2526 989C			l_08F8
  2527
  2528 				; optimize FAIL ('REFRESHVALUE', controls.inc), line = 151
  2529
  2530 989C 20 F2 96			jsr REFRESHVALUE
  2531 989F 4C 0F 99			jmp a_0004
  2532 98A2			l_08BD
  2533
  2534 				; optimize OK (controls.inc), line = 154
  2535
  2536 98A2 AD FC 02			lda KEYB
  2537 98A5 20 85 8D			jsr KEYSCAN2ASC
  2538 98A8 AD 35 A4			lda KEYSCAN2ASC.RESULT
  2539 98AB 8D 84 A4			sta CH
  2540
  2541 				; optimize OK (controls.inc), line = 155
  2542
  2543 98AE C9 60			cmp #$60
  2544 98B0 90 06			jcc l_091B
  2545 98B2 38 E9 20			sub #$20
  2546 98B5 8D 84 A4			sta CH
  2547 98B8			l_091B
  2548
  2549 				; optimize OK (controls.inc), line = 156
  2550
  2551 98B8 A0 00			ldy #$00
  2552 98BA AD 83 A4			lda CX
  2553 98BD 10 01			spl
  2554 98BF 88				dey
  2555 98C0 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  2556 98C2 CD 88 A4			cmp W
  2557 98C5 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2558 98C7 E9 00			sbc #$00
  2559 98C9 50 02			svc
  2560 98CB 49 80			eor #$80
  2561 98CD 10 03			jpl l_0933
  2562 98CF EE 83 A4			inc CX
  2563 98D2			l_0933
  2564
  2565 				; optimize OK (controls.inc), line = 157
  2566
  2567 98D2 AC 7F A4 84 82 AC + 	mwy VALUE :bp2
  2568 98DC AC 83 A4			ldy CX
  2569 98DF AD 84 A4			lda CH
  2570 98E2 91 82			sta (:bp2),y
  2571
  2572 				; optimize OK (controls.inc), line = 158
  2573
  2574 98E4 A0 00			ldy #$00
  2575 98E6 AD 83 A4			lda CX
  2576 98E9 10 01			spl
  2577 98EB 88				dey
  2578 98EC 84 AD			sty :STACKORIGIN+STACKWIDTH+9
  2579 98EE 85 9D			sta :STACKORIGIN+9
  2580 98F0 AD 85 A4			lda LN
  2581 98F3 C5 9D			cmp :STACKORIGIN+9
  2582 98F5 A9 00			lda #$00
  2583 98F7 E5 AD			sbc :STACKORIGIN+STACKWIDTH+9
  2584 98F9 50 02			svc
  2585 98FB 49 80			eor #$80
  2586 98FD 10 0D			jpl l_0957
  2587 98FF AC 80 A4			ldy VALUE+1
  2588 9902 84 81			sty :bp+1
  2589 9904 AC 7F A4			ldy VALUE
  2590 9907 AD 83 A4			lda CX
  2591 990A 91 80			sta (:bp),y
  2592 990C			l_0957
  2593
  2594 				; optimize FAIL ('REFRESHVALUE', controls.inc), line = 159
  2595
  2596 990C 20 F2 96			jsr REFRESHVALUE
  2597 990F			a_0004
  2598
  2599 				; optimize OK (controls.inc), line = 161
  2600
  2601 990F A5 14			lda TM
  2602 9911 8D 89 A4			sta CTM
  2603 9914 A9 FF			lda #$FF
  2604 9916 8D FC 02			sta KEYB
  2605 9919			l_083B
  2606
  2607 				; optimize OK (controls.inc), line = 163
  2608
  2609 9919 4C 74 97			jmp l_07B8
  2610 991C			b_07B8
  2611
  2612 				; optimize OK (controls.inc), line = 164
  2613
  2614 991C A9 01			lda #$01
  2615 991E 85 5D			sta CURSOR.MALLOWKEYS
  2616
  2617 				; optimize OK (controls.inc), line = 165
  2618
  2619 9920 A9 FF			lda #$FF
  2620 9922 8D FC 02			sta KEYB
  2621
  2622 				; optimize OK (controls.inc), line = 166
  2623
  2624 9925 AC 82 A4			ldy OZONE
  2625 9928 A9 01			lda #$01
  2626 992A 99 00 05			sta adr._MZONEACTIVE,y
  2627 992D			@exit
  2628
  2629 				; ------------------------------------------------------------
  2630
  2631 = A47F			VALUE	= DATAORIGIN+$005C
  2632 = A481			RESULT	= DATAORIGIN+$005E
  2633 = A482			OZONE	= DATAORIGIN+$005F
  2634 = A483			CX	= DATAORIGIN+$0060
  2635 = A484			CH	= DATAORIGIN+$0061
  2636 = A485			LN	= DATAORIGIN+$0062
  2637 = A486			X	= DATAORIGIN+$0063
  2638 = A487			Y	= DATAORIGIN+$0064
  2639 = A488			W	= DATAORIGIN+$0065
  2640 = A489			CTM	= DATAORIGIN+$0066
  2641 = A48A			ISCRS	= DATAORIGIN+$0067
  2642 = A48B			@CASETMP_0004	= DATAORIGIN+$0068
  2643
  2644 = A47F			@VarData	= VALUE
  2645 = 000C			@VarDataSize	= 12
  2646
  2647 992D 60				rts						; ret
  2648 				.endl
  2649
  2650 992E			.local	ADDFILELABEL					; PROCEDURE
  2651
  2652 				; optimize OK (controls.inc), line = 183
  2653
  2654 992E AD 6D A5			lda N
  2655 9931 C9 0F			cmp #$0F
  2656 9933 90 03			jcc l_099D
  2657 9935 4C 97 99			jmp @exit
  2658 9938			l_099D
  2659
  2660 				; optimize OK (controls.inc), line = 184
  2661
  2662 9938 AC 6D A5			ldy N
  2663 993B B9 A1 88			lda adr._DIRFILEX,y
  2664 993E 8D 70 A5			sta X
  2665 9941 B9 B0 88			lda adr._DIRFILEY,y
  2666 9944 8D 71 A5			sta Y
  2667
  2668 				; optimize OK (controls.inc), line = 185
  2669
  2670 9947 AD 6D A5			lda N
  2671 994A 0A				asl @
  2672 994B A8				tay
  2673 994C B9 8C A4			lda adr.DIRNAME,y
  2674 994F 85 84			sta PUTTEXT.S
  2675 9951 B9 8D A4			lda adr.DIRNAME+1,y
  2676 9954 85 85			sta PUTTEXT.S+1
  2677 9956 AD 70 A5			lda X
  2678 9959 85 88			sta PUTTEXT.X
  2679 995B AD 71 A5			lda Y
  2680 995E 85 8C			sta PUTTEXT.Y
  2681 9960 20 B4 8F			jsr PUTTEXT
  2682
  2683 				; optimize OK (controls.inc), line = 186
  2684
  2685 9963 AD 6E A5			lda PRC
  2686 9966 8D 50 A4			sta ADDZONE.@02DB.PRC
  2687 9969 AD 6F A5			lda PRC+1
  2688 996C 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  2689 996F AD 71 A5			lda Y
  2690 9972 38 E9 01			sub #$01
  2691 9975 8D 4D A4			sta ADDZONE.@02DB.Y
  2692 9978 AD 70 A5			lda X
  2693 997B 38 E9 01			sub #$01
  2694 997E 8D 4C A4			sta ADDZONE.@02DB.X
  2695 9981 A9 0E			lda #$0E
  2696 9983 18 6D 6D A5			add N
  2697 9987 8D 4B A4			sta ADDZONE.@02DB.N
  2698 998A A9 0E			lda #$0E
  2699 998C 8D 4E A4			sta ADDZONE.@02DB.W
  2700 998F A9 07			lda #$07
  2701 9991 8D 4F A4			sta ADDZONE.@02DB.H
  2702 9994 20 DE 91			jsr ADDZONE.@02DB
  2703
  2704 				; ------------------------------------------------------------
  2705
  2706 = A56D			N	= DATAORIGIN+$014A
  2707 = A56E			PRC	= DATAORIGIN+$014B
  2708 = A570			X	= DATAORIGIN+$014D
  2709 = A571			Y	= DATAORIGIN+$014E
  2710
  2711 = A56D			@VarData	= N
  2712 = 0005			@VarDataSize	= 5
  2713
  2714 9997			@exit
  2715 					.ifdef @new
  2716 					lda <@VarData
  2717 					sta :ztmp
  2718 					lda >@VarData
  2719 					ldy #@VarDataSize-1
  2720 					jmp @FreeMem
  2721 					els
  2722 9997 60				rts						; ret
  2723 					eif
  2724 				.endl
  2725
  2726 9998			.local	SHOWABOUT					; PROCEDURE
  2727
  2728 				; optimize OK (about.inc), line = 3
  2729
  2730 9998 A9 FF			lda #$FF
  2731 999A 20 3F A0			jsr SETMODULE
  2732
  2733 				; optimize OK (about.inc), line = 4
  2734
  2735 999D A9 14			lda #$14
  2736 999F				.LOCAL +MAIN.SETSCREENWIDTH
  2737 999F				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 999F 85 88			sta NSW
     5 99A1 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 99A4 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 99A7 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
  2738 					.ENDL
  2739
  2740 				; optimize OK (about.inc), line = 5
  2741
  2742 99AA A9 0A			lda #$0A
  2743 99AC 85 88			sta PUTTEXT.X
  2744 99AE A9 06			lda #$06
  2745 99B0 85 8C			sta PUTTEXT.Y
  2746 99B2 A9 01			lda #$01
  2747 99B4 85 84			sta PUTTEXT.S
  2748 99B6 A9 80			lda #$80
  2749 99B8 85 85			sta PUTTEXT.S+1
  2750 99BA 20 B4 8F			jsr PUTTEXT
  2751
  2752 				; optimize OK (about.inc), line = 6
  2753
  2754 99BD A9 0A			lda #$0A
  2755 99BF 85 88			sta PUTTEXT.X
  2756 99C1 A9 0C			lda #$0C
  2757 99C3 85 8C			sta PUTTEXT.Y
  2758 99C5 A9 15			lda #$15
  2759 99C7 85 84			sta PUTTEXT.S
  2760 99C9 A9 80			lda #$80
  2761 99CB 85 85			sta PUTTEXT.S+1
  2762 99CD 20 B4 8F			jsr PUTTEXT
  2763
  2764 				; optimize OK (about.inc), line = 7
  2765
  2766 99D0 A9 0F			lda #$0F
  2767 99D2 85 88			sta PUTTEXT.X
  2768 99D4 A9 18			lda #$18
  2769 99D6 85 8C			sta PUTTEXT.Y
  2770 99D8 A9 29			lda #$29
  2771 99DA 85 84			sta PUTTEXT.S
  2772 99DC A9 80			lda #$80
  2773 99DE 85 85			sta PUTTEXT.S+1
  2774 99E0 20 B4 8F			jsr PUTTEXT
  2775
  2776 				; optimize OK (about.inc), line = 8
  2777
  2778 99E3 A9 01			lda #$01
  2779 99E5 85 88			sta PUTTEXT.X
  2780 99E7 A9 24			lda #$24
  2781 99E9 85 8C			sta PUTTEXT.Y
  2782 99EB A9 32			lda #$32
  2783 99ED 85 84			sta PUTTEXT.S
  2784 99EF A9 80			lda #$80
  2785 99F1 85 85			sta PUTTEXT.S+1
  2786 99F3 20 B4 8F			jsr PUTTEXT
  2787
  2788 				; optimize OK (about.inc), line = 9
  2789
  2790 99F6 A9 59			lda #$59
  2791 99F8 8D 66 A4			sta SETSTATUS.S
  2792 99FB A9 80			lda #$80
  2793 99FD 8D 67 A4			sta SETSTATUS.S+1
  2794 9A00 20 FE 94			jsr SETSTATUS
  2795 9A03			@exit
  2796 					.ifdef @new
  2797 					lda <@VarData
  2798 					sta :ztmp
  2799 					lda >@VarData
  2800 					ldy #@VarDataSize-1
  2801 					jmp @FreeMem
  2802 					els
  2803 9A03 60				rts						; ret
  2804 					eif
  2805 				.endl
  2806
  2807 9A04			.local	DOCHOICEFILE					; PROCEDURE
  2808
  2809 				; optimize OK (module-disk.inc), line = 13
  2810
  2811 9A04 A5 50			lda SZONE
  2812 9A06 8D 74 A5			sta @CASETMP_0005
  2813 9A09 C9 0E			cmp #14
  2814 9A0B 30 09			bmi @+
  2815 9A0D C9 1D			cmp #29
  2816 9A0F F0 02			seq
  2817 9A11 10 03			bpl @+
  2818 9A13 4C 19 9A			jmp *+6
  2819 				@
  2820 9A16 4C 65 9A			jmp l_0A03
  2821 				@
  2822
  2823 				; optimize OK (module-disk.inc), line = 15
  2824
  2825 9A19 A5 50			lda SZONE
  2826 9A1B 0A				asl @
  2827 9A1C A8				tay
  2828 9A1D B9 70 A4			lda adr.DIRNAME-$1C,y
  2829 9A20 85 88			sta @move.src
  2830 9A22 B9 71 A4			lda adr.DIRNAME+1-$1C,y
  2831 9A25 85 89			sta @move.src+1
  2832 					@moveSTRING FN #17
  2832 				 MWA FN @MOVE.DST\ MWA #17 @MOVE.CNT\ JSR @MOVESTRING
  2832 9A27 AD 94 A3 85 8C AD +  MWA FN @MOVE.DST
  2832 9A31 A9 11 85 84 A9 00 +  MWA #17 @MOVE.CNT
  2832 9A39 20 97 89		 JSR @MOVESTRING
  2833
  2834 				; optimize OK (module-disk.inc), line = 17
  2835
  2836 9A3C A9 07			lda #$07
  2837 9A3E 85 88			sta BLANK.X
  2838 9A40 A9 01			lda #$01
  2839 9A42 85 8C			sta BLANK.Y
  2840 9A44 A9 0C			lda #$0C
  2841 9A46 85 84			sta BLANK.W
  2842 9A48 A9 05			lda #$05
  2843 9A4A 8D 3C A4			sta BLANK.H
  2844 9A4D 20 CF 90			jsr BLANK
  2845
  2846 				; optimize OK (module-disk.inc), line = 18
  2847
  2848 9A50 A9 07			lda #$07
  2849 9A52 85 88			sta PUTTEXT.X
  2850 9A54 A9 01			lda #$01
  2851 9A56 85 8C			sta PUTTEXT.Y
  2852 9A58 AD 94 A3			lda FN
  2853 9A5B 85 84			sta PUTTEXT.S
  2854 9A5D AD 95 A3			lda FN+1
  2855 9A60 85 85			sta PUTTEXT.S+1
  2856 9A62 20 B4 8F			jsr PUTTEXT
  2857 9A65			l_0A03
  2858 9A65			a_0005
  2859
  2860 				; ------------------------------------------------------------
  2861
  2862 = A574			@CASETMP_0005	= DATAORIGIN+$0151
  2863
  2864 = A574			@VarData	= @CASETMP_0005
  2865 = 0001			@VarDataSize	= 1
  2866
  2867 9A65			@exit
  2868 					.ifdef @new
  2869 					lda <@VarData
  2870 					sta :ztmp
  2871 					lda >@VarData
  2872 					ldy #@VarDataSize-1
  2873 					jmp @FreeMem
  2874 					els
  2875 9A65 60				rts						; ret
  2876 					eif
  2877 				.endl
  2878
  2879 9A66			.local	DOPREVPAGEDIR					; PROCEDURE
  2880
  2881 				; optimize OK (module-disk.inc), line = 27
  2882
  2883 9A66 AD 72 A5			lda DIRPAGEBEGIN
  2884 9A69 38 E9 0E			sub #$0E
  2885 9A6C 8D 72 A5			sta DIRPAGEBEGIN
  2886 9A6F B0 03			scs
  2887 9A71 CE 73 A5			dec DIRPAGEBEGIN+1
  2888
  2889 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 28
  2890
  2891 9A74 20 8A 9A			jsr READDIRECTORY
  2892 9A77			@exit
  2893 					.ifdef @new
  2894 					lda <@VarData
  2895 					sta :ztmp
  2896 					lda >@VarData
  2897 					ldy #@VarDataSize-1
  2898 					jmp @FreeMem
  2899 					els
  2900 9A77 60				rts						; ret
  2901 					eif
  2902 				.endl
  2903
  2904 9A78			.local	DONEXTPAGEDIR					; PROCEDURE
  2905
  2906 				; optimize OK (module-disk.inc), line = 33
  2907
  2908 9A78 AD 72 A5			lda DIRPAGEBEGIN
  2909 9A7B 18 69 0E			add #$0E
  2910 9A7E 8D 72 A5			sta DIRPAGEBEGIN
  2911 9A81 90 03			scc
  2912 9A83 EE 73 A5			inc DIRPAGEBEGIN+1
  2913
  2914 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 34
  2915
  2916 9A86 20 8A 9A			jsr READDIRECTORY
  2917 9A89			@exit
  2918 					.ifdef @new
  2919 					lda <@VarData
  2920 					sta :ztmp
  2921 					lda >@VarData
  2922 					ldy #@VarDataSize-1
  2923 					jmp @FreeMem
  2924 					els
  2925 9A89 60				rts						; ret
  2926 					eif
  2927 				.endl
  2928
  2929 9A8A			.local	READDIRECTORY					; PROCEDURE
  2930
  2931 				; optimize OK (module-disk.inc), line = 43
  2932
  2933 9A8A AD 01 04			lda adr.DEV+$01
  2934 9A8D C9 44			cmp #$44
  2935 9A8F F0 03 4C DA 9B		jne l_0A3C
  2936
  2937 				; optimize OK (module-disk.inc), line = 45
  2938
  2939 9A94 A9 03			lda #$03
  2940 9A96 85 88			sta CURSOR.SETPIVOT.X
  2941 9A98 85 8C			sta CURSOR.SETPIVOT.Y
  2942 9A9A 20 BC 8A			jsr CURSOR.SETPIVOT
  2943 9A9D A9 EF			lda #$EF
  2944 9A9F 85 88			sta CURSOR.SETCURSOR.SPR
  2945 9AA1 A9 80			lda #$80
  2946 9AA3 85 89			sta CURSOR.SETCURSOR.SPR+1
  2947 9AA5 20 A7 8A			jsr CURSOR.SETCURSOR
  2948
  2949 				; optimize OK (module-disk.inc), line = 46
  2950
  2951 9AA8 AD 92 A3			lda DEV
  2952 9AAB 85 88			sta @move.src
  2953 9AAD AD 93 A3			lda DEV+1
  2954 9AB0 85 89			sta @move.src+1
  2955 					@moveSTRING _FN #21
  2955 				 MWA _FN @MOVE.DST\ MWA #21 @MOVE.CNT\ JSR @MOVESTRING
  2955 9AB2 AD 96 A3 85 8C AD +  MWA _FN @MOVE.DST
  2955 9ABC A9 15 85 84 A9 00 +  MWA #21 @MOVE.CNT
  2955 9AC4 20 97 89		 JSR @MOVESTRING
  2956 9AC7 AD 2C 04			lda adr.FILEMASK
  2957 9ACA 85 84			sta SYSTEM.MOVE.@012B.COUNT
  2958 9ACC AD 17 04			lda adr._FN
  2959 9ACF 18 69 01			add #$01
  2960 9AD2 85 9E			sta :STACKORIGIN+10
  2961 9AD4 A9 00			lda #$00
  2962 9AD6 69 00			adc #$00
  2963 9AD8 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  2964 9ADA A9 17			lda <adr._FN
  2965 9ADC 18 65 9E			add :STACKORIGIN+10
  2966 9ADF 85 8C			sta SYSTEM.MOVE.@012B.DEST
  2967 9AE1 A9 04			lda >adr._FN
  2968 9AE3 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  2969 9AE5 85 8D			sta SYSTEM.MOVE.@012B.DEST+1
  2970 9AE7 A9 2D			lda <adr.FILEMASK+$01
  2971 9AE9 85 88			sta SYSTEM.MOVE.@012B.SOURCE
  2972 9AEB A9 04			lda >adr.FILEMASK+$01
  2973 9AED 85 89			sta SYSTEM.MOVE.@012B.SOURCE+1
  2974 9AEF A9 00			lda #$00
  2975 9AF1 85 85			sta SYSTEM.MOVE.@012B.COUNT+1
  2976 9AF3				.LOCAL +MAIN.SYSTEM.MOVE.@012B
  2977 9AF3				m@INLINE
Macro: MAIN.SYSTEM.MOVE.@012B.M@INLINE [Source: SIED.a65]
     4 9AF3 20 FA 88			jsr @move
Source: SIED.a65
  2978 					.ENDL
  2979
  2980 				; optimize OK (module-disk.inc), line = 47
  2981
  2982 9AF6 AD 72 A5			lda DIRPAGEBEGIN
  2983 9AF9 8D 77 A5			sta DIRSEEK
  2984 9AFC AD 73 A5			lda DIRPAGEBEGIN+1
  2985 9AFF 8D 78 A5			sta DIRSEEK+1
  2986
  2987 				; optimize OK (module-disk.inc), line = 48
  2988
  2989 9B02 AD 73 A5			lda DIRPAGEBEGIN+1
  2990 9B05 30 0A			jmi l_0A68
  2991 9B07 0D 72 A5			ora DIRPAGEBEGIN
  2992 9B0A F0 05			jeq l_0A68
  2993 9B0C A9 72			lda #$72
  2994 9B0E 4C 13 9B			jmp l_0A74
  2995 9B11			l_0A68
  2996 9B11 A9 7D			lda #$7D
  2997 9B13			l_0A74
  2998 9B13 8D 66 A4			sta SETSTATUS.S
  2999 9B16 A9 80			lda #$80
  3000 9B18 8D 67 A4			sta SETSTATUS.S+1
  3001 9B1B 20 FE 94			jsr SETSTATUS
  3002
  3003 				; optimize OK (module-disk.inc), line = 49
  3004
  3005 9B1E A9 01			lda #$01
  3006 9B20 8D 2E A4			sta CIO.OPN.CHN
  3007 9B23 A9 06			lda #$06
  3008 9B25 8D 2F A4			sta CIO.OPN.AX1
  3009 9B28 A9 00			lda #$00
  3010 9B2A 8D 30 A4			sta CIO.OPN.AX2
  3011 9B2D AD 96 A3			lda _FN
  3012 9B30 8D 31 A4			sta CIO.OPN.DEVICE
  3013 9B33 AD 97 A3			lda _FN+1
  3014 9B36 8D 32 A4			sta CIO.OPN.DEVICE+1
  3015 9B39 20 44 8A			jsr CIO.OPN
  3016
  3017 				; optimize OK (module-disk.inc), line = 50
  3018
  3019 9B3C A9 FF			lda #$FF
  3020 9B3E 8D 75 A5			sta N
  3021
  3022 				; --- WhileProlog
  3023 9B41 4C C1 9B			jmp l_0A82
  3024 9B44			l_0A83
  3025
  3026 				; optimize OK (module-disk.inc), line = 53
  3027
  3028 9B44 A9 01			lda #$01
  3029 9B46 85 88			sta GETLN.CHN
  3030 9B48 AD 96 A3			lda _FN
  3031 9B4B 85 8C			sta GETLN.BUF
  3032 9B4D AD 97 A3			lda _FN+1
  3033 9B50 85 8D			sta GETLN.BUF+1
  3034 9B52 20 F4 8C			jsr GETLN
  3035
  3036 				; optimize OK (module-disk.inc), line = 54
  3037
  3038 9B55 AD 18 04			lda adr._FN+$01
  3039 9B58 C9 30			cmp #$30
  3040 9B5A 90 1A			jcc l_0A9A
  3041
  3042 				; optimize OK (module-disk.inc), line = 56
  3043
  3044 9B5C CE 17 04			dec adr._FN
  3045 9B5F AD 96 A3			lda _FN
  3046 9B62 8D 66 A4			sta SETSTATUS.S
  3047 9B65 AD 97 A3			lda _FN+1
  3048 9B68 8D 67 A4			sta SETSTATUS.S+1
  3049 9B6B 20 FE 94			jsr SETSTATUS
  3050
  3051 				; optimize OK (module-disk.inc), line = 57
  3052
  3053 9B6E A9 03			lda #$03
  3054 9B70 8D 2A A4			sta SYSTEM.IORESULT
  3055 9B73 4C D7 9B			jmp b_0A83					; break
  3056 9B76			l_0A9A
  3057
  3058 				; optimize OK (module-disk.inc), line = 60
  3059
  3060 9B76 AD 78 A5			lda DIRSEEK+1
  3061 9B79 30 13			jmi l_0AC1
  3062 9B7B 0D 77 A5			ora DIRSEEK
  3063 9B7E F0 0E			jeq l_0AC1
  3064
  3065 				; optimize FAIL (0, module-disk.inc), line = 62
  3066
  3067 9B80 AD 77 A5			lda DIRSEEK
  3068 9B83 D0 03			bne @+
  3069 9B85 CE 78 A5			dec DIRSEEK+1
  3070 				@
  3071 9B88 CE 77 A5			dec DIRSEEK
  3072 9B8B 4C C1 9B			jmp c_0A83					; continue
  3073 9B8E			l_0AC1
  3074
  3075 				; optimize OK (module-disk.inc), line = 65
  3076
  3077 9B8E AD 75 A5			lda N
  3078 9B91 C9 FF			cmp #$FF
  3079 9B93 D0 0D			jne l_0ADA
  3080 9B95 A9 92			lda #$92
  3081 9B97 8D 66 A4			sta SETSTATUS.S
  3082 9B9A A9 80			lda #$80
  3083 9B9C 8D 67 A4			sta SETSTATUS.S+1
  3084 9B9F 20 FE 94			jsr SETSTATUS
  3085 9BA2			l_0ADA
  3086
  3087 				; optimize FAIL (0, module-disk.inc), line = 68
  3088
  3089 9BA2 EE 75 A5			inc N
  3090
  3091 				; optimize OK (module-disk.inc), line = 69
  3092
  3093 9BA5 AD 75 A5			lda N
  3094 9BA8 0A				asl @
  3095 9BA9 A8				tay
  3096 9BAA B9 8C A4			lda adr.DIRNAME,y
  3097 9BAD 85 8C			sta REDUCEFILENAME.OUTFN
  3098 9BAF B9 8D A4			lda adr.DIRNAME+1,y
  3099 9BB2 85 8D			sta REDUCEFILENAME.OUTFN+1
  3100 9BB4 AD 96 A3			lda _FN
  3101 9BB7 85 88			sta REDUCEFILENAME.INFN
  3102 9BB9 AD 97 A3			lda _FN+1
  3103 9BBC 85 89			sta REDUCEFILENAME.INFN+1
  3104 9BBE 20 36 8D			jsr REDUCEFILENAME
  3105 9BC1			c_0A83
  3106 9BC1			l_0A82
  3107
  3108 				; optimize OK (module-disk.inc), line = 51
  3109
  3110 9BC1 AD 2A A4			lda SYSTEM.IORESULT
  3111 9BC4 C9 01			cmp #$01
  3112 9BC6 D0 0F			jne l_0A83w
  3113 9BC8 AD 75 A5			lda N
  3114 9BCB 38 E9 0F			sub #$0F
  3115 9BCE 50 02			svc
  3116 9BD0 49 80			eor #$80
  3117 9BD2 10 03			jpl l_0A83w
  3118 9BD4 4C 44 9B			jmp l_0A83
  3119 9BD7			l_0A83w
  3120 9BD7			b_0A83
  3121 9BD7 4C DF 9B			jmp l_0B0C
  3122 9BDA			l_0A3C
  3123
  3124 				; optimize OK (module-disk.inc), line = 73
  3125
  3126 9BDA A9 A0			lda #$A0
  3127 9BDC 8D 2A A4			sta SYSTEM.IORESULT
  3128 9BDF			l_0B0C
  3129
  3130 				; optimize OK (module-disk.inc), line = 74
  3131
  3132 9BDF AD 84 06			lda adr.YSCR+$84
  3133 9BE2 85 88			sta SYSTEM.FILLCHAR.@012A.A
  3134 9BE4 AD 85 06			lda adr.YSCR+1+$84
  3135 9BE7 85 89			sta SYSTEM.FILLCHAR.@012A.A+1
  3136 9BE9 A9 F8			lda #$F8
  3137 9BEB 85 8C			sta SYSTEM.FILLCHAR.@012A.COUNT
  3138 9BED A9 02			lda #$02
  3139 9BEF 85 8D			sta SYSTEM.FILLCHAR.@012A.COUNT+1
  3140 9BF1 A9 00			lda #$00
  3141 9BF3 85 84			sta SYSTEM.FILLCHAR.@012A.VALUE
  3142 9BF5				.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
  3143 9BF5				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@012A.M@INLINE [Source: SIED.a65]
     4 9BF5 20 4F 89			jsr @fill
Source: SIED.a65
  3144 					.ENDL
  3145
  3146 				; optimize OK (module-disk.inc), line = 75
  3147
  3148 9BF8 AD 2A A4			lda SYSTEM.IORESULT
  3149 9BFB C9 04			cmp #$04
  3150 9BFD 90 41			jcc l_0B28
  3151 9BFF A0 F2			ldy #256-14
  3152 9C01 B9 B5 7F 99 25 03 + 	mva:rne CODEORIGIN+$00A7+14-256,y adr._FN+14-256,y+
  3153
  3154 				; optimize OK (module-disk.inc), line = 78
  3155
  3156 9C0A AD 2A A4			lda SYSTEM.IORESULT
  3157 9C0D 4A				lsr @
  3158 9C0E 4A				lsr @
  3159 9C0F 4A				lsr @
  3160 9C10 4A				lsr @
  3161 9C11 8D 75 A5			sta N
  3162 9C14 AC 75 A5			ldy N
  3163 9C17 B9 BF 88			lda adr._HEX,y
  3164 9C1A 8D 23 04			sta adr._FN+$0C
  3165
  3166 				; optimize OK (module-disk.inc), line = 79
  3167
  3168 9C1D AD 2A A4			lda SYSTEM.IORESULT
  3169 9C20 29 0F			and #$0F
  3170 9C22 8D 75 A5			sta N
  3171 9C25 AC 75 A5			ldy N
  3172 9C28 B9 BF 88			lda adr._HEX,y
  3173 9C2B 8D 24 04			sta adr._FN+$0D
  3174
  3175 				; optimize OK (module-disk.inc), line = 80
  3176
  3177 9C2E AD 96 A3			lda _FN
  3178 9C31 8D 66 A4			sta SETSTATUS.S
  3179 9C34 AD 97 A3			lda _FN+1
  3180 9C37 8D 67 A4			sta SETSTATUS.S+1
  3181 9C3A 20 FE 94			jsr SETSTATUS
  3182 9C3D 4C 05 9D			jmp l_0B5D
  3183 9C40			l_0B28
  3184
  3185 				; optimize OK (module-disk.inc), line = 84
  3186
  3187 9C40 A9 0E			lda #$0E
  3188 9C42 8D 76 A5			sta J
  3189
  3190 9C45			l_0B66
  3191 				; --- ForToDoCondition
  3192 9C45 AD 76 A5			lda J
  3193 9C48 C9 1F			cmp #$1F
  3194 9C4A B0 08			jcs l_0B74
  3195 9C4C 20 66 91			jsr CLEARZONE
  3196
  3197 				; --- ForToDoEpilog
  3198 9C4F EE 76 A5			inc J
  3199 9C52 D0 F1			jne l_0B66
  3200 9C54			l_0B74
  3201
  3202 				; optimize OK (module-disk.inc), line = 85
  3203
  3204 9C54 A9 00			lda #$00
  3205 9C56 8D 76 A5			sta J
  3206
  3207 				; --- WhileProlog
  3208 9C59 4C 72 9C			jmp l_0B83
  3209 9C5C			l_0B84
  3210
  3211 				; optimize OK (module-disk.inc), line = 87
  3212
  3213 9C5C AD 76 A5			lda J
  3214 9C5F 8D 6D A5			sta ADDFILELABEL.N
  3215 9C62 A9 04			lda <DOCHOICEFILE
  3216 9C64 8D 6E A5			sta ADDFILELABEL.PRC
  3217 9C67 A9 9A			lda >DOCHOICEFILE
  3218 9C69 8D 6F A5			sta ADDFILELABEL.PRC+1
  3219 9C6C 20 2E 99			jsr ADDFILELABEL
  3220
  3221 				; optimize FAIL (0, module-disk.inc), line = 88
  3222
  3223 9C6F EE 76 A5			inc J
  3224 9C72			l_0B83
  3225
  3226 				; optimize OK (module-disk.inc), line = 85
  3227
  3228 9C72 AD 75 A5			lda N
  3229 9C75 38 ED 76 A5			sub J
  3230 9C79 50 02			svc
  3231 9C7B 49 80			eor #$80
  3232 9C7D 10 DD			jpl l_0B84
  3233
  3234 				; optimize OK (module-disk.inc), line = 90
  3235
  3236 9C7F AD 73 A5			lda DIRPAGEBEGIN+1
  3237 9C82 30 05			bmi @+
  3238 9C84 0D 72 A5			ora DIRPAGEBEGIN
  3239 9C87 D0 03			sne
  3240 				@
  3241 9C89 4C 8F 9C			jmp *+6
  3242 9C8C 4C 96 9C		@	jmp l_0BB7x
  3243 9C8F AD 2A A4			lda SYSTEM.IORESULT
  3244 9C92 C9 03			cmp #$03
  3245 9C94 B0 6F			jcs l_0BB7
  3246 				@
  3247 9C96			l_0BB7x
  3248
  3249 				; optimize OK (module-disk.inc), line = 92
  3250
  3251 9C96 A9 1B			lda #$1B
  3252 9C98 85 88			sta BLANK.X
  3253 9C9A A9 29			lda #$29
  3254 9C9C 85 8C			sta BLANK.Y
  3255 9C9E A9 0C			lda #$0C
  3256 9CA0 85 84			sta BLANK.W
  3257 9CA2 A9 05			lda #$05
  3258 9CA4 8D 3C A4			sta BLANK.H
  3259 9CA7 20 CF 90			jsr BLANK
  3260 9CAA A9 1C			lda #$1C
  3261 9CAC 20 66 91			jsr CLEARZONE
  3262
  3263 				; optimize OK (module-disk.inc), line = 93
  3264
  3265 9CAF AD 73 A5			lda DIRPAGEBEGIN+1
  3266 9CB2 30 26			jmi l_0BD0
  3267 9CB4 0D 72 A5			ora DIRPAGEBEGIN
  3268 9CB7 F0 21			jeq l_0BD0
  3269
  3270 				; optimize OK (module-disk.inc), line = 94
  3271
  3272 9CB9 A9 1B			lda #$1B
  3273 9CBB 8D 70 A4			sta ADDBUTTON.X
  3274 9CBE A9 29			lda #$29
  3275 9CC0 8D 71 A4			sta ADDBUTTON.Y
  3276 9CC3 A9 B5			lda #$B5
  3277 9CC5 8D 72 A4			sta ADDBUTTON.CAP
  3278 9CC8 A9 80			lda #$80
  3279 9CCA 8D 73 A4			sta ADDBUTTON.CAP+1
  3280 9CCD A9 66			lda <DOPREVPAGEDIR
  3281 9CCF 8D 74 A4			sta ADDBUTTON.PRC
  3282 9CD2 A9 9A			lda >DOPREVPAGEDIR
  3283 9CD4 8D 75 A4			sta ADDBUTTON.PRC+1
  3284 9CD7 20 44 96			jsr ADDBUTTON
  3285 9CDA			l_0BD0
  3286
  3287 				; optimize OK (module-disk.inc), line = 95
  3288
  3289 9CDA AD 2A A4			lda SYSTEM.IORESULT
  3290 9CDD C9 03			cmp #$03
  3291 9CDF B0 24			jcs l_0BE9
  3292
  3293 				; optimize OK (module-disk.inc), line = 97
  3294
  3295 9CE1 A9 23			lda #$23
  3296 9CE3 8D 70 A4			sta ADDBUTTON.X
  3297 9CE6 A9 29			lda #$29
  3298 9CE8 8D 71 A4			sta ADDBUTTON.Y
  3299 9CEB A9 BA			lda #$BA
  3300 9CED 8D 72 A4			sta ADDBUTTON.CAP
  3301 9CF0 A9 80			lda #$80
  3302 9CF2 8D 73 A4			sta ADDBUTTON.CAP+1
  3303 9CF5 A9 78			lda <DONEXTPAGEDIR
  3304 9CF7 8D 74 A4			sta ADDBUTTON.PRC
  3305 9CFA A9 9A			lda >DONEXTPAGEDIR
  3306 9CFC 8D 75 A4			sta ADDBUTTON.PRC+1
  3307 9CFF 20 44 96			jsr ADDBUTTON
  3308
  3309 				; optimize FAIL ('CLEARSTATUS', module-disk.inc), line = 98
  3310
  3311 9D02 20 E4 94			jsr CLEARSTATUS
  3312 9D05			l_0B5D
  3313 9D05			l_0BE9
  3314 9D05			l_0BB7
  3315
  3316 				; optimize OK (module-disk.inc), line = 102
  3317
  3318 9D05 A9 01			lda #$01
  3319 9D07 20 84 8A			jsr CIO.CLS
  3320
  3321 				; optimize OK (module-disk.inc), line = 103
  3322
  3323 9D0A A9 00			lda #$00
  3324 9D0C 85 88			sta CURSOR.SETPIVOT.X
  3325 9D0E 85 8C			sta CURSOR.SETPIVOT.Y
  3326 9D10 20 BC 8A			jsr CURSOR.SETPIVOT
  3327 9D13 A9 E8			lda #$E8
  3328 9D15 85 88			sta CURSOR.SETCURSOR.SPR
  3329 9D17 A9 80			lda #$80
  3330 9D19 85 89			sta CURSOR.SETCURSOR.SPR+1
  3331 9D1B 20 A7 8A			jsr CURSOR.SETCURSOR
  3332
  3333 				; ------------------------------------------------------------
  3334
  3335 = A575			N	= DATAORIGIN+$0152
  3336 = A576			J	= DATAORIGIN+$0153
  3337 = A577			DIRSEEK	= DATAORIGIN+$0154
  3338
  3339 = A575			@VarData	= N
  3340 = 0004			@VarDataSize	= 4
  3341
  3342 9D1E			@exit
  3343 					.ifdef @new
  3344 					lda <@VarData
  3345 					sta :ztmp
  3346 					lda >@VarData
  3347 					ldy #@VarDataSize-1
  3348 					jmp @FreeMem
  3349 					els
  3350 9D1E 60				rts						; ret
  3351 					eif
  3352 				.endl
  3353
  3354 9D1F			.local	STARTDIRECTORY					; PROCEDURE
  3355
  3356 				; optimize OK (module-disk.inc), line = 108
  3357
  3358 9D1F A9 00			lda #$00
  3359 9D21 8D 72 A5			sta DIRPAGEBEGIN
  3360 9D24 8D 73 A5			sta DIRPAGEBEGIN+1
  3361
  3362 				; optimize FAIL ('READDIRECTORY', module-disk.inc), line = 109
  3363
  3364 9D27 20 8A 9A			jsr READDIRECTORY
  3365 9D2A			@exit
  3366 					.ifdef @new
  3367 					lda <@VarData
  3368 					sta :ztmp
  3369 					lda >@VarData
  3370 					ldy #@VarDataSize-1
  3371 					jmp @FreeMem
  3372 					els
  3373 9D2A 60				rts						; ret
  3374 					eif
  3375 				.endl
  3376
  3377 9D2B			.local	DOFILENAME					; PROCEDURE
  3378
  3379 				; optimize OK (module-disk.inc), line = 114
  3380
  3381 9D2B AD 94 A3			lda FN
  3382 9D2E 8D 7F A4			sta DOINPUT.VALUE
  3383 9D31 AD 95 A3			lda FN+1
  3384 9D34 8D 80 A4			sta DOINPUT.VALUE+1
  3385 9D37 20 EF 96			jsr DOINPUT
  3386 9D3A			@exit
  3387 					.ifdef @new
  3388 					lda <@VarData
  3389 					sta :ztmp
  3390 					lda >@VarData
  3391 					ldy #@VarDataSize-1
  3392 					jmp @FreeMem
  3393 					els
  3394 9D3A 60				rts						; ret
  3395 					eif
  3396 				.endl
  3397
  3398 9D3B			.local	DODEVICE					; PROCEDURE
  3399
  3400 				; optimize OK (module-disk.inc), line = 119
  3401
  3402 9D3B AD 92 A3			lda DEV
  3403 9D3E 8D 7F A4			sta DOINPUT.VALUE
  3404 9D41 AD 93 A3			lda DEV+1
  3405 9D44 8D 80 A4			sta DOINPUT.VALUE+1
  3406 9D47 20 EF 96			jsr DOINPUT
  3407 9D4A AD 81 A4			lda DOINPUT.RESULT
  3408 9D4D 30 03			jmi l_0C20
  3409 9D4F 20 1F 9D			jsr STARTDIRECTORY
  3410 9D52			l_0C20
  3411 9D52			@exit
  3412 					.ifdef @new
  3413 					lda <@VarData
  3414 					sta :ztmp
  3415 					lda >@VarData
  3416 					ldy #@VarDataSize-1
  3417 					jmp @FreeMem
  3418 					els
  3419 9D52 60				rts						; ret
  3420 					eif
  3421 				.endl
  3422
  3423 9D53			.local	SHOWDISKDIRECTORY				; PROCEDURE
  3424
  3425 				; optimize OK (module-disk.inc), line = 124
  3426
  3427 9D53 AD 36 A4			lda CURMODULE
  3428 9D56 D0 03 4C 34 9E		jeq @exit
  3429 9D5B			l_0C3A
  3430
  3431 				; optimize OK (module-disk.inc), line = 125
  3432
  3433 9D5B A9 00			lda #$00
  3434 9D5D 20 3F A0			jsr SETMODULE
  3435
  3436 				; optimize OK (module-disk.inc), line = 126
  3437
  3438 9D60 AD 82 06			lda adr.YSCR+$82
  3439 9D63 85 82			sta :bp2
  3440 9D65 AD 83 06			lda adr.YSCR+1+$82
  3441 9D68 85 83			sta :bp2+1
  3442 9D6A A9 FF			lda #$FF
  3443 9D6C A0 13			ldy #$13
  3444 9D6E 91 82 88 10 FB		sta:rpl (:bp2),y-
  3445
  3446 				; optimize OK (module-disk.inc), line = 127
  3447
  3448 9D73 A9 14			lda #$14
  3449 9D75				.LOCAL +MAIN.SETSCREENWIDTH
  3450 9D75				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 9D75 85 88			sta NSW
     5 9D77 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 9D7A 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 9D7D 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
Source: SIED.a65
  3451 					.ENDL
  3452
  3453 				; optimize OK (module-disk.inc), line = 128
  3454
  3455 9D80 A9 01			lda #$01
  3456 9D82 8D 77 A4			sta ADDINPUT.X
  3457 9D85 8D 78 A4			sta ADDINPUT.Y
  3458 9D88 A9 04			lda #$04
  3459 9D8A 8D 79 A4			sta ADDINPUT.W
  3460 9D8D AD 92 A3			lda DEV
  3461 9D90 8D 7A A4			sta ADDINPUT.VALUE
  3462 9D93 AD 93 A3			lda DEV+1
  3463 9D96 8D 7B A4			sta ADDINPUT.VALUE+1
  3464 9D99 A9 3B			lda <DODEVICE
  3465 9D9B 8D 7C A4			sta ADDINPUT.PRC
  3466 9D9E A9 9D			lda >DODEVICE
  3467 9DA0 8D 7D A4			sta ADDINPUT.PRC+1
  3468 9DA3 20 9D 96			jsr ADDINPUT
  3469
  3470 				; optimize OK (module-disk.inc), line = 129
  3471
  3472 9DA6 A9 07			lda #$07
  3473 9DA8 8D 77 A4			sta ADDINPUT.X
  3474 9DAB A9 01			lda #$01
  3475 9DAD 8D 78 A4			sta ADDINPUT.Y
  3476 9DB0 A9 0C			lda #$0C
  3477 9DB2 8D 79 A4			sta ADDINPUT.W
  3478 9DB5 AD 94 A3			lda FN
  3479 9DB8 8D 7A A4			sta ADDINPUT.VALUE
  3480 9DBB AD 95 A3			lda FN+1
  3481 9DBE 8D 7B A4			sta ADDINPUT.VALUE+1
  3482 9DC1 A9 2B			lda <DOFILENAME
  3483 9DC3 8D 7C A4			sta ADDINPUT.PRC
  3484 9DC6 A9 9D			lda >DOFILENAME
  3485 9DC8 8D 7D A4			sta ADDINPUT.PRC+1
  3486 9DCB 20 9D 96			jsr ADDINPUT
  3487
  3488 				; optimize OK (module-disk.inc), line = 130
  3489
  3490 9DCE A9 15			lda #$15
  3491 9DD0 8D 70 A4			sta ADDBUTTON.X
  3492 9DD3 A9 01			lda #$01
  3493 9DD5 8D 71 A4			sta ADDBUTTON.Y
  3494 9DD8 A9 BF			lda #$BF
  3495 9DDA 8D 72 A4			sta ADDBUTTON.CAP
  3496 9DDD A9 80			lda #$80
  3497 9DDF 8D 73 A4			sta ADDBUTTON.CAP+1
  3498 9DE2 A9 12			lda <NULLPROC
  3499 9DE4 8D 74 A4			sta ADDBUTTON.PRC
  3500 9DE7 A9 91			lda >NULLPROC
  3501 9DE9 8D 75 A4			sta ADDBUTTON.PRC+1
  3502 9DEC 20 44 96			jsr ADDBUTTON
  3503
  3504 				; optimize OK (module-disk.inc), line = 131
  3505
  3506 9DEF A9 1B			lda #$1B
  3507 9DF1 8D 70 A4			sta ADDBUTTON.X
  3508 9DF4 A9 01			lda #$01
  3509 9DF6 8D 71 A4			sta ADDBUTTON.Y
  3510 9DF9 A9 C4			lda #$C4
  3511 9DFB 8D 72 A4			sta ADDBUTTON.CAP
  3512 9DFE A9 80			lda #$80
  3513 9E00 8D 73 A4			sta ADDBUTTON.CAP+1
  3514 9E03 A9 12			lda <NULLPROC
  3515 9E05 8D 74 A4			sta ADDBUTTON.PRC
  3516 9E08 A9 91			lda >NULLPROC
  3517 9E0A 8D 75 A4			sta ADDBUTTON.PRC+1
  3518 9E0D 20 44 96			jsr ADDBUTTON
  3519
  3520 				; optimize OK (module-disk.inc), line = 132
  3521
  3522 9E10 A9 21			lda #$21
  3523 9E12 8D 70 A4			sta ADDBUTTON.X
  3524 9E15 A9 01			lda #$01
  3525 9E17 8D 71 A4			sta ADDBUTTON.Y
  3526 9E1A A9 C9			lda #$C9
  3527 9E1C 8D 72 A4			sta ADDBUTTON.CAP
  3528 9E1F A9 80			lda #$80
  3529 9E21 8D 73 A4			sta ADDBUTTON.CAP+1
  3530 9E24 A9 12			lda <NULLPROC
  3531 9E26 8D 74 A4			sta ADDBUTTON.PRC
  3532 9E29 A9 91			lda >NULLPROC
  3533 9E2B 8D 75 A4			sta ADDBUTTON.PRC+1
  3534 9E2E 20 44 96			jsr ADDBUTTON
  3535
  3536 				; optimize FAIL ('STARTDIRECTORY', module-disk.inc), line = 133
  3537
  3538 9E31 20 1F 9D			jsr STARTDIRECTORY
  3539 9E34			@exit
  3540 					.ifdef @new
  3541 					lda <@VarData
  3542 					sta :ztmp
  3543 					lda >@VarData
  3544 					ldy #@VarDataSize-1
  3545 					jmp @FreeMem
  3546 					els
  3547 9E34 60				rts						; ret
  3548 					eif
  3549 				.endl
  3550
  3551 9E35			.local	SHOWPATHEDITOR					; PROCEDURE
  3552
  3553 				; optimize OK (module-path.inc), line = 3
  3554
  3555 9E35 AD 36 A4			lda CURMODULE
  3556 9E38 C9 01			cmp #$01
  3557 9E3A D0 03 4C 95 9F		jeq @exit
  3558 9E3F			l_0C76
  3559
  3560 				; optimize OK (module-path.inc), line = 4
  3561
  3562 9E3F A9 01			lda #$01
  3563 9E41 20 3F A0			jsr SETMODULE
  3564
  3565 				; optimize OK (module-path.inc), line = 6
  3566
  3567 9E44 A9 03			lda #$03
  3568 9E46 8D 4B A4			sta ADDZONE.@02DB.N
  3569 9E49 A9 01			lda #$01
  3570 9E4B 8D 4C A4			sta ADDZONE.@02DB.X
  3571 9E4E A9 37			lda #$37
  3572 9E50 8D 4D A4			sta ADDZONE.@02DB.Y
  3573 9E53 A9 03			lda #$03
  3574 9E55 8D 4E A4			sta ADDZONE.@02DB.W
  3575 9E58 A9 07			lda #$07
  3576 9E5A 8D 4F A4			sta ADDZONE.@02DB.H
  3577 9E5D A9 12			lda <NULLPROC
  3578 9E5F 8D 50 A4			sta ADDZONE.@02DB.PRC
  3579 9E62 A9 91			lda >NULLPROC
  3580 9E64 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  3581 9E67 20 DE 91			jsr ADDZONE.@02DB
  3582
  3583 				; optimize OK (module-path.inc), line = 7
  3584
  3585 9E6A A9 04			lda #$04
  3586 9E6C 8D 5A A4			sta ADDZONEH.@0339.N
  3587 9E6F A9 12			lda <NULLPROC
  3588 9E71 8D 5B A4			sta ADDZONEH.@0339.PRC
  3589 9E74 A9 91			lda >NULLPROC
  3590 9E76 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3591 9E79 20 61 92			jsr ADDZONEH.@0339
  3592
  3593 				; optimize OK (module-path.inc), line = 8
  3594
  3595 9E7C A9 05			lda #$05
  3596 9E7E 8D 5A A4			sta ADDZONEH.@0339.N
  3597 9E81 A9 12			lda <NULLPROC
  3598 9E83 8D 5B A4			sta ADDZONEH.@0339.PRC
  3599 9E86 A9 91			lda >NULLPROC
  3600 9E88 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3601 9E8B 20 61 92			jsr ADDZONEH.@0339
  3602
  3603 				; optimize OK (module-path.inc), line = 9
  3604
  3605 9E8E A9 06			lda #$06
  3606 9E90 8D 5A A4			sta ADDZONEH.@0339.N
  3607 9E93 A9 12			lda <NULLPROC
  3608 9E95 8D 5B A4			sta ADDZONEH.@0339.PRC
  3609 9E98 A9 91			lda >NULLPROC
  3610 9E9A 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3611 9E9D 20 61 92			jsr ADDZONEH.@0339
  3612
  3613 				; optimize OK (module-path.inc), line = 11
  3614
  3615 9EA0 A9 07			lda #$07
  3616 9EA2 8D 4B A4			sta ADDZONE.@02DB.N
  3617 9EA5 A9 0F			lda #$0F
  3618 9EA7 8D 4C A4			sta ADDZONE.@02DB.X
  3619 9EAA A9 37			lda #$37
  3620 9EAC 8D 4D A4			sta ADDZONE.@02DB.Y
  3621 9EAF A9 03			lda #$03
  3622 9EB1 8D 4E A4			sta ADDZONE.@02DB.W
  3623 9EB4 A9 07			lda #$07
  3624 9EB6 8D 4F A4			sta ADDZONE.@02DB.H
  3625 9EB9 A9 12			lda <NULLPROC
  3626 9EBB 8D 50 A4			sta ADDZONE.@02DB.PRC
  3627 9EBE A9 91			lda >NULLPROC
  3628 9EC0 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  3629 9EC3 20 DE 91			jsr ADDZONE.@02DB
  3630
  3631 				; optimize OK (module-path.inc), line = 12
  3632
  3633 9EC6 A9 08			lda #$08
  3634 9EC8 8D 5A A4			sta ADDZONEH.@0339.N
  3635 9ECB A9 12			lda <NULLPROC
  3636 9ECD 8D 5B A4			sta ADDZONEH.@0339.PRC
  3637 9ED0 A9 91			lda >NULLPROC
  3638 9ED2 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3639 9ED5 20 61 92			jsr ADDZONEH.@0339
  3640
  3641 				; optimize OK (module-path.inc), line = 14
  3642
  3643 9ED8 A9 FF			lda #$FF
  3644 9EDA 20 D6 95			jsr SETCONTROL
  3645
  3646 				; optimize OK (module-path.inc), line = 15
  3647
  3648 9EDD A9 2C			lda #$2C
  3649 9EDF 8D 02 D0			sta adr.HPOSP+$02
  3650 9EE2 A9 E6			lda #$E6
  3651 9EE4 8D C2 02			sta adr.PCOL+$02
  3652 9EE7 A9 03			lda #$03
  3653 9EE9 8D 0A D0			sta adr.SIZEP+$02
  3654
  3655 				; optimize OK (module-path.inc), line = 16
  3656
  3657 9EEC A9 14			lda #$14
  3658 9EEE				.LOCAL +MAIN.SETSCREENWIDTH
  3659 9EEE				m@INLINE
Macro: MAIN.SETSCREENWIDTH.M@INLINE [Source: SIED.a65]
     1 9EEE 85 88			sta NSW
     5 9EF0 8D DB 8D		  sta MAIN.PUTIMAGE._LNWIDTH
     6 9EF3 8D 3F 8E		  sta MAIN.PUTSPRITE._LNWIDTH1
     7 9EF6 8D 96 8F		  sta MAIN.PUTSPRITE._LNWIDTH2
Source: SIED.a65
  3660 					.ENDL
  3661
  3662 				; optimize OK (module-path.inc), line = 17
  3663
  3664 9EF9 A9 06			lda #$06
  3665 9EFB 85 88			sta PUTIMAGE.ADR
  3666 9EFD A9 84			lda #$84
  3667 9EFF 85 89			sta PUTIMAGE.ADR+1
  3668 9F01 A9 00			lda #$00
  3669 9F03 85 8C			sta PUTIMAGE.X
  3670 9F05 85 84			sta PUTIMAGE.Y
  3671 9F07 A9 03			lda #$03
  3672 9F09 8D 37 A4			sta PUTIMAGE.WIDTH
  3673 9F0C A9 30			lda #$30
  3674 9F0E 8D 38 A4			sta PUTIMAGE.HEIGHT
  3675 9F11 20 AC 8D			jsr PUTIMAGE
  3676
  3677 				; optimize OK (module-path.inc), line = 19
  3678
  3679 9F14 A9 00			lda #$00
  3680 9F16 8D 53 A4			sta ADDZONE.@0324.X
  3681 9F19 8D 54 A4			sta ADDZONE.@0324.Y
  3682 9F1C A9 03			lda #$03
  3683 9F1E 8D 55 A4			sta ADDZONE.@0324.W
  3684 9F21 A9 0C			lda #$0C
  3685 9F23 8D 56 A4			sta ADDZONE.@0324.H
  3686 9F26 A9 12			lda <NULLPROC
  3687 9F28 8D 57 A4			sta ADDZONE.@0324.PRC
  3688 9F2B A9 91			lda >NULLPROC
  3689 9F2D 8D 58 A4			sta ADDZONE.@0324.PRC+1
  3690 9F30 20 2E 92			jsr ADDZONE.@0324
  3691
  3692 				; optimize OK (module-path.inc), line = 20
  3693
  3694 9F33 A9 12			lda <NULLPROC
  3695 9F35 8D 5E A4			sta ADDZONEV.@0356.PRC
  3696 9F38 A9 91			lda >NULLPROC
  3697 9F3A 8D 5F A4			sta ADDZONEV.@0356.PRC+1
  3698 9F3D 20 99 92			jsr ADDZONEV.@0356
  3699
  3700 				; optimize OK (module-path.inc), line = 21
  3701
  3702 9F40 A9 12			lda <NULLPROC
  3703 9F42 8D 5E A4			sta ADDZONEV.@0356.PRC
  3704 9F45 A9 91			lda >NULLPROC
  3705 9F47 8D 5F A4			sta ADDZONEV.@0356.PRC+1
  3706 9F4A 20 99 92			jsr ADDZONEV.@0356
  3707
  3708 				; optimize OK (module-path.inc), line = 22
  3709
  3710 9F4D A9 12			lda <NULLPROC
  3711 9F4F 8D 5E A4			sta ADDZONEV.@0356.PRC
  3712 9F52 A9 91			lda >NULLPROC
  3713 9F54 8D 5F A4			sta ADDZONEV.@0356.PRC+1
  3714 9F57 20 99 92			jsr ADDZONEV.@0356
  3715
  3716 				; optimize OK (module-path.inc), line = 23
  3717
  3718 9F5A A9 03			lda #$03
  3719 9F5C 8D 53 A4			sta ADDZONE.@0324.X
  3720 9F5F A9 00			lda #$00
  3721 9F61 8D 54 A4			sta ADDZONE.@0324.Y
  3722 9F64 A9 03			lda #$03
  3723 9F66 8D 55 A4			sta ADDZONE.@0324.W
  3724 9F69 A9 0C			lda #$0C
  3725 9F6B 8D 56 A4			sta ADDZONE.@0324.H
  3726 9F6E A9 12			lda <NULLPROC
  3727 9F70 8D 57 A4			sta ADDZONE.@0324.PRC
  3728 9F73 A9 91			lda >NULLPROC
  3729 9F75 8D 58 A4			sta ADDZONE.@0324.PRC+1
  3730 9F78 20 2E 92			jsr ADDZONE.@0324
  3731
  3732 				; optimize OK (module-path.inc), line = 24
  3733
  3734 9F7B A9 12			lda <NULLPROC
  3735 9F7D 8D 5E A4			sta ADDZONEV.@0356.PRC
  3736 9F80 A9 91			lda >NULLPROC
  3737 9F82 8D 5F A4			sta ADDZONEV.@0356.PRC+1
  3738 9F85 20 99 92			jsr ADDZONEV.@0356
  3739
  3740 				; optimize OK (module-path.inc), line = 25
  3741
  3742 9F88 A9 12			lda <NULLPROC
  3743 9F8A 8D 5E A4			sta ADDZONEV.@0356.PRC
  3744 9F8D A9 91			lda >NULLPROC
  3745 9F8F 8D 5F A4			sta ADDZONEV.@0356.PRC+1
  3746 9F92 20 99 92			jsr ADDZONEV.@0356
  3747 9F95			@exit
  3748 					.ifdef @new
  3749 					lda <@VarData
  3750 					sta :ztmp
  3751 					lda >@VarData
  3752 					ldy #@VarDataSize-1
  3753 					jmp @FreeMem
  3754 					els
  3755 9F95 60				rts						; ret
  3756 					eif
  3757 				.endl
  3758
  3759 9F96			.local	SHOWSCENARIOEDITOR				; PROCEDURE
  3760
  3761 				; optimize OK (module-scenario.inc), line = 3
  3762
  3763 9F96 AD 36 A4			lda CURMODULE
  3764 9F99 C9 02			cmp #$02
  3765 9F9B D0 03 4C 3E A0		jeq @exit
  3766 9FA0			l_0CCD
  3767
  3768 				; optimize OK (module-scenario.inc), line = 4
  3769
  3770 9FA0 A9 02			lda #$02
  3771 9FA2 20 3F A0			jsr SETMODULE
  3772
  3773 				; optimize OK (module-scenario.inc), line = 5
  3774
  3775 9FA5 A9 03			lda #$03
  3776 9FA7 8D 4B A4			sta ADDZONE.@02DB.N
  3777 9FAA A9 01			lda #$01
  3778 9FAC 8D 4C A4			sta ADDZONE.@02DB.X
  3779 9FAF A9 37			lda #$37
  3780 9FB1 8D 4D A4			sta ADDZONE.@02DB.Y
  3781 9FB4 A9 03			lda #$03
  3782 9FB6 8D 4E A4			sta ADDZONE.@02DB.W
  3783 9FB9 A9 07			lda #$07
  3784 9FBB 8D 4F A4			sta ADDZONE.@02DB.H
  3785 9FBE A9 12			lda <NULLPROC
  3786 9FC0 8D 50 A4			sta ADDZONE.@02DB.PRC
  3787 9FC3 A9 91			lda >NULLPROC
  3788 9FC5 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  3789 9FC8 20 DE 91			jsr ADDZONE.@02DB
  3790
  3791 				; optimize OK (module-scenario.inc), line = 6
  3792
  3793 9FCB A9 04			lda #$04
  3794 9FCD 8D 5A A4			sta ADDZONEH.@0339.N
  3795 9FD0 A9 12			lda <NULLPROC
  3796 9FD2 8D 5B A4			sta ADDZONEH.@0339.PRC
  3797 9FD5 A9 91			lda >NULLPROC
  3798 9FD7 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3799 9FDA 20 61 92			jsr ADDZONEH.@0339
  3800
  3801 				; optimize OK (module-scenario.inc), line = 7
  3802
  3803 9FDD A9 05			lda #$05
  3804 9FDF 8D 5A A4			sta ADDZONEH.@0339.N
  3805 9FE2 A9 12			lda <NULLPROC
  3806 9FE4 8D 5B A4			sta ADDZONEH.@0339.PRC
  3807 9FE7 A9 91			lda >NULLPROC
  3808 9FE9 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3809 9FEC 20 61 92			jsr ADDZONEH.@0339
  3810
  3811 				; optimize OK (module-scenario.inc), line = 8
  3812
  3813 9FEF A9 06			lda #$06
  3814 9FF1 8D 5A A4			sta ADDZONEH.@0339.N
  3815 9FF4 A9 12			lda <NULLPROC
  3816 9FF6 8D 5B A4			sta ADDZONEH.@0339.PRC
  3817 9FF9 A9 91			lda >NULLPROC
  3818 9FFB 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3819 9FFE 20 61 92			jsr ADDZONEH.@0339
  3820
  3821 				; optimize OK (module-scenario.inc), line = 10
  3822
  3823 A001 A9 07			lda #$07
  3824 A003 8D 4B A4			sta ADDZONE.@02DB.N
  3825 A006 A9 0F			lda #$0F
  3826 A008 8D 4C A4			sta ADDZONE.@02DB.X
  3827 A00B A9 37			lda #$37
  3828 A00D 8D 4D A4			sta ADDZONE.@02DB.Y
  3829 A010 A9 03			lda #$03
  3830 A012 8D 4E A4			sta ADDZONE.@02DB.W
  3831 A015 A9 07			lda #$07
  3832 A017 8D 4F A4			sta ADDZONE.@02DB.H
  3833 A01A A9 12			lda <NULLPROC
  3834 A01C 8D 50 A4			sta ADDZONE.@02DB.PRC
  3835 A01F A9 91			lda >NULLPROC
  3836 A021 8D 51 A4			sta ADDZONE.@02DB.PRC+1
  3837 A024 20 DE 91			jsr ADDZONE.@02DB
  3838
  3839 				; optimize OK (module-scenario.inc), line = 11
  3840
  3841 A027 A9 08			lda #$08
  3842 A029 8D 5A A4			sta ADDZONEH.@0339.N
  3843 A02C A9 12			lda <NULLPROC
  3844 A02E 8D 5B A4			sta ADDZONEH.@0339.PRC
  3845 A031 A9 91			lda >NULLPROC
  3846 A033 8D 5C A4			sta ADDZONEH.@0339.PRC+1
  3847 A036 20 61 92			jsr ADDZONEH.@0339
  3848
  3849 				; optimize OK (module-scenario.inc), line = 12
  3850
  3851 A039 A9 FF			lda #$FF
  3852 A03B 20 D6 95			jsr SETCONTROL
  3853 A03E			@exit
  3854 					.ifdef @new
  3855 					lda <@VarData
  3856 					sta :ztmp
  3857 					lda >@VarData
  3858 					ldy #@VarDataSize-1
  3859 					jmp @FreeMem
  3860 					els
  3861 A03E 60				rts						; ret
  3862 					eif
  3863 				.endl
  3864
  3865 A03F			.local	SETMODULE					; PROCEDURE
  3866 A03F 8D 79 A5			sta CM
  3867
  3868 				; optimize OK (module.inc), line = 3
  3869
  3870 A042 8D 36 A4			sta CURMODULE
  3871
  3872 				; optimize OK (module.inc), line = 4
  3873
  3874 A045 A9 03			lda #$03
  3875 A047 85 3E			sta I
  3876
  3877 A049			l_0CFB
  3878 				; --- ForToDoCondition
  3879 A049 A5 3E			lda I
  3880 A04B C9 0A			cmp #$0A
  3881 A04D B0 07			jcs l_0D09
  3882 A04F 20 66 91			jsr CLEARZONE
  3883
  3884 				; --- ForToDoEpilog
  3885 A052 E6 3E			inc I
  3886 A054 D0 F3			jne l_0CFB
  3887 A056			l_0D09
  3888
  3889 				; optimize OK (module.inc), line = 5
  3890
  3891 A056 A9 01			lda #$01
  3892 A058 8D 00 05			sta adr._MZONEACTIVE
  3893
  3894 				; optimize OK (module.inc), line = 6
  3895
  3896 A05B 8D 01 05			sta adr._MZONEACTIVE+$01
  3897
  3898 				; optimize OK (module.inc), line = 7
  3899
  3900 A05E 8D 02 05			sta adr._MZONEACTIVE+$02
  3901
  3902 				; optimize OK (module.inc), line = 8
  3903
  3904 A061 AD D0 06			lda adr.YSCR+$D0
  3905 A064 85 88			sta SYSTEM.FILLCHAR.@012A.A
  3906 A066 AD D1 06			lda adr.YSCR+1+$D0
  3907 A069 85 89			sta SYSTEM.FILLCHAR.@012A.A+1
  3908 A06B A9 58			lda #$58
  3909 A06D 85 8C			sta SYSTEM.FILLCHAR.@012A.COUNT
  3910 A06F A9 02			lda #$02
  3911 A071 85 8D			sta SYSTEM.FILLCHAR.@012A.COUNT+1
  3912 A073 A9 00			lda #$00
  3913 A075 85 84			sta SYSTEM.FILLCHAR.@012A.VALUE
  3914 A077				.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
  3915 A077				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@012A.M@INLINE [Source: SIED.a65]
     4 A077 20 4F 89			jsr @fill
Source: SIED.a65
  3916 					.ENDL
  3917
  3918 				; optimize OK (module.inc), line = 9
  3919
  3920 A07A A9 00			lda #$00
  3921 A07C 8D 02 D0			sta adr.HPOSP+$02
  3922
  3923 				; optimize OK (module.inc), line = 10
  3924
  3925 A07F AD 79 A5			lda CM
  3926 A082 20 24 95			jsr SETICON
  3927
  3928 				; optimize FAIL ('CLEARSTATUS', module.inc), line = 11
  3929
  3930 A085 20 E4 94			jsr CLEARSTATUS
  3931
  3932 				; optimize FAIL ('CLEARWORKAREA', module.inc), line = 12
  3933
  3934 A088 20 C9 94			jsr CLEARWORKAREA
  3935
  3936 				; optimize OK (module.inc), line = 13
  3937
  3938 A08B A0 01			ldy #1
  3939 A08D AD 79 A5			lda CM
  3940 A090 D0 01			bne @+
  3941 A092 88				dey
  3942 				@
  3943 A093 98				tya
  3944 A094 8D 00 05			sta adr._MZONEACTIVE
  3945
  3946 				; optimize OK (module.inc), line = 14
  3947
  3948 A097 A0 01			ldy #1
  3949 A099 AD 79 A5			lda CM
  3950 A09C C9 01			cmp #$01
  3951 A09E D0 01			bne @+
  3952 A0A0 88				dey
  3953 				@
  3954 A0A1 98				tya
  3955 A0A2 8D 01 05			sta adr._MZONEACTIVE+$01
  3956
  3957 				; optimize OK (module.inc), line = 15
  3958
  3959 A0A5 A0 01			ldy #1
  3960 A0A7 AD 79 A5			lda CM
  3961 A0AA C9 02			cmp #$02
  3962 A0AC D0 01			bne @+
  3963 A0AE 88				dey
  3964 				@
  3965 A0AF 98				tya
  3966 A0B0 8D 02 05			sta adr._MZONEACTIVE+$02
  3967
  3968 				; ------------------------------------------------------------
  3969
  3970 = A579			CM	= DATAORIGIN+$0156
  3971
  3972 = A579			@VarData	= CM
  3973 = 0001			@VarDataSize	= 1
  3974
  3975 A0B3			@exit
  3976 					.ifdef @new
  3977 					lda <@VarData
  3978 					sta :ztmp
  3979 					lda >@VarData
  3980 					ldy #@VarDataSize-1
  3981 					jmp @FreeMem
  3982 					els
  3983 A0B3 60				rts						; ret
  3984 					eif
  3985 				.endl
  3986
  3987 A0B4			.local	INITMODULES					; PROCEDURE
  3988
  3989 				; optimize OK (module.inc), line = 20
  3990
  3991 A0B4 A9 00			lda #$00
  3992 A0B6 8D 41 A4			sta SETZONE.N
  3993 A0B9 8D 42 A4			sta SETZONE.ACT
  3994 A0BC A9 1C			lda #$1C
  3995 A0BE 8D 43 A4			sta SETZONE.X
  3996 A0C1 A9 31			lda #$31
  3997 A0C3 8D 44 A4			sta SETZONE.Y
  3998 A0C6 A9 03			lda #$03
  3999 A0C8 8D 45 A4			sta SETZONE.W
  4000 A0CB A9 0F			lda #$0F
  4001 A0CD 8D 46 A4			sta SETZONE.H
  4002 A0D0 A9 53			lda <SHOWDISKDIRECTORY
  4003 A0D2 8D 47 A4			sta SETZONE.PRC
  4004 A0D5 A9 9D			lda >SHOWDISKDIRECTORY
  4005 A0D7 8D 48 A4			sta SETZONE.PRC+1
  4006 A0DA 20 13 91			jsr SETZONE
  4007
  4008 				; optimize OK (module.inc), line = 21
  4009
  4010 A0DD A9 01			lda #$01
  4011 A0DF 8D 41 A4			sta SETZONE.N
  4012 A0E2 A9 00			lda #$00
  4013 A0E4 8D 42 A4			sta SETZONE.ACT
  4014 A0E7 A9 20			lda #$20
  4015 A0E9 8D 43 A4			sta SETZONE.X
  4016 A0EC A9 31			lda #$31
  4017 A0EE 8D 44 A4			sta SETZONE.Y
  4018 A0F1 A9 03			lda #$03
  4019 A0F3 8D 45 A4			sta SETZONE.W
  4020 A0F6 A9 0F			lda #$0F
  4021 A0F8 8D 46 A4			sta SETZONE.H
  4022 A0FB A9 35			lda <SHOWPATHEDITOR
  4023 A0FD 8D 47 A4			sta SETZONE.PRC
  4024 A100 A9 9E			lda >SHOWPATHEDITOR
  4025 A102 8D 48 A4			sta SETZONE.PRC+1
  4026 A105 20 13 91			jsr SETZONE
  4027
  4028 				; optimize OK (module.inc), line = 22
  4029
  4030 A108 A9 02			lda #$02
  4031 A10A 8D 41 A4			sta SETZONE.N
  4032 A10D A9 00			lda #$00
  4033 A10F 8D 42 A4			sta SETZONE.ACT
  4034 A112 A9 24			lda #$24
  4035 A114 8D 43 A4			sta SETZONE.X
  4036 A117 A9 31			lda #$31
  4037 A119 8D 44 A4			sta SETZONE.Y
  4038 A11C A9 03			lda #$03
  4039 A11E 8D 45 A4			sta SETZONE.W
  4040 A121 A9 0F			lda #$0F
  4041 A123 8D 46 A4			sta SETZONE.H
  4042 A126 A9 96			lda <SHOWSCENARIOEDITOR
  4043 A128 8D 47 A4			sta SETZONE.PRC
  4044 A12B A9 9F			lda >SHOWSCENARIOEDITOR
  4045 A12D 8D 48 A4			sta SETZONE.PRC+1
  4046 A130 20 13 91			jsr SETZONE
  4047
  4048 				; optimize OK (module.inc), line = 23
  4049
  4050 A133 A9 78			lda #$78
  4051 A135 85 3E			sta I
  4052
  4053 A137			l_0D7B
  4054 				; --- ForToDoCondition
  4055 A137 A5 3E			lda I
  4056 A139 C9 7B			cmp #$7B
  4057 A13B B0 1E			jcs l_0D89
  4058 A13D 0A				asl @
  4059 A13E A8				tay
  4060 A13F B9 00 06			lda adr.YSCR,y
  4061 A142 18 69 08			add #$08
  4062 A145 85 82			sta :bp2
  4063 A147 B9 01 06			lda adr.YSCR+1,y
  4064 A14A 69 00			adc #$00
  4065 A14C 85 83			sta :bp2+1
  4066 A14E A9 55			lda #$55
  4067 A150 A0 1F			ldy #$1F
  4068 A152 91 82 88 10 FB		sta:rpl (:bp2),y-
  4069
  4070 				; --- ForToDoEpilog
  4071 A157 E6 3E			inc I
  4072 A159 D0 DC			jne l_0D7B
  4073 A15B			l_0D89
  4074
  4075 				; optimize OK (module.inc), line = 24
  4076
  4077 A15B A9 00			lda #$00
  4078 A15D 85 88			sta PUTTEXTC.X
  4079 A15F A9 3F			lda #$3F
  4080 A161 85 8C			sta PUTTEXTC.Y
  4081 A163 A9 D0			lda #$D0
  4082 A165 85 84			sta PUTTEXTC.S
  4083 A167 A9 80			lda #$80
  4084 A169 85 85			sta PUTTEXTC.S+1
  4085 A16B 20 22 90			jsr PUTTEXTC
  4086 A16E A0 FB			ldy #256-5
  4087 A170 B9 DE 7F 99 31 03 + 	mva:rne CODEORIGIN+$00D9+5-256,y adr.FILEMASK+5-256,y+
  4088 A179 A0 FD			ldy #256-3
  4089 A17B B9 E1 7F 99 03 03 + 	mva:rne CODEORIGIN+$00DE+3-256,y adr.DEV+3-256,y+
  4090 A184 A0 F9			ldy #256-7
  4091 A186 B9 E8 7F 99 0C 03 + 	mva:rne CODEORIGIN+$00E1+7-256,y adr.FN+7-256,y+
  4092
  4093 				; ------------------------------------------------------------
  4094
  4095 A18F			@exit
  4096 					.ifdef @new
  4097 					lda <@VarData
  4098 					sta :ztmp
  4099 					lda >@VarData
  4100 					ldy #@VarDataSize-1
  4101 					jmp @FreeMem
  4102 					els
  4103 A18F 60				rts						; ret
  4104 					eif
  4105 				.endl
  4106
  4107 A190			.local	INITEDITOR					; PROCEDURE
  4108
  4109 				; optimize OK (SIED.pas), line = 44
  4110
  4111 A190 A9 00			lda #$00
  4112 A192 85 3E			sta I
  4113
  4114 A194			l_0DAB
  4115 				; --- ForToDoCondition
  4116 A194 A4 3E			ldy I
  4117 A196 C0 20			cpy #$20
  4118 A198 B0 20			jcs l_0DB9
  4119
  4120 				; optimize OK (SIED.pas), line = 46
  4121
  4122 A19A A9 00			lda #$00
  4123 A19C 99 80 04			sta adr._ASC2INT,y
  4124
  4125 				; optimize OK (SIED.pas), line = 47
  4126
  4127 A19F A5 3E			lda I
  4128 A1A1 99 A0 04			sta adr._ASC2INT+$20,y
  4129
  4130 				; optimize OK (SIED.pas), line = 48
  4131
  4132 A1A4 A9 20			lda #$20
  4133 A1A6 18 65 3E			add I
  4134 A1A9 A4 3E			ldy I
  4135 A1AB 99 C0 04			sta adr._ASC2INT+$40,y
  4136
  4137 				; optimize OK (SIED.pas), line = 49
  4138
  4139 A1AE A9 20			lda #$20
  4140 A1B0 18 65 3E			add I
  4141 A1B3 99 E0 04			sta adr._ASC2INT+$60,y
  4142
  4143 				; --- ForToDoEpilog
  4144 A1B6 E6 3E			inc I
  4145 A1B8 D0 DA			jne l_0DAB
  4146 A1BA			l_0DB9
  4147
  4148 				; optimize OK (SIED.pas), line = 51
  4149
  4150 A1BA A9 00			lda #$00
  4151 A1BC 85 3E			sta I
  4152
  4153 A1BE			l_0DFD
  4154 				; --- ForToDoCondition
  4155 A1BE A5 3E			lda I
  4156 A1C0 C9 38			cmp #$38
  4157 A1C2 B0 3D			jcs l_0E0B
  4158 A1C4 85 9D			sta :STACKORIGIN+9
  4159 A1C6 A9 10			lda #$10
  4160 A1C8 85 8C			sta :ecx
  4161 A1CA 85 90			sta :ztmp8
  4162 A1CC A5 3E			lda I
  4163 A1CE 85 84			sta :eax
  4164 A1D0 85 92			sta :ztmp10
  4165 					.ifdef fmulinit
  4166 					fmulu_8
  4167 					els
  4168 A1D2 20 A7 89			imulCL
  4169 					eif
  4170 A1D5 38				sec
  4171 A1D6 24 92			bit :ztmp10
  4172 A1D8 10 02			bpl @+
  4173 A1DA E5 90			sbc :ztmp8
  4174 				@
  4175 A1DC 24 90			bit :ztmp8
  4176 A1DE 10 02			bpl @+
  4177 A1E0 E5 92			sbc :ztmp10
  4178 				@
  4179 A1E2 85 85			sta :eax+1
  4180 A1E4 A5 84			lda :eax
  4181 A1E6 85 9E			sta :STACKORIGIN+10
  4182 A1E8 A9 24			lda #$24
  4183 A1EA 18 65 85			add :eax+1
  4184 A1ED 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  4185 A1EF A5 9D			lda :STACKORIGIN+9
  4186 A1F1 0A				asl @
  4187 A1F2 A8				tay
  4188 A1F3 A5 9E			lda :STACKORIGIN+10
  4189 A1F5 99 00 06			sta adr.YSCR,y
  4190 A1F8 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  4191 A1FA 99 01 06			sta adr.YSCR+1,y
  4192
  4193 				; --- ForToDoEpilog
  4194 A1FD E6 3E			inc I
  4195 A1FF D0 BD			jne l_0DFD
  4196 A201			l_0E0B
  4197
  4198 				; optimize OK (SIED.pas), line = 52
  4199
  4200 A201 A9 00			lda #$00
  4201 A203 85 3E			sta I
  4202
  4203 A205			l_0E2A
  4204 				; --- ForToDoCondition
  4205 A205 A5 3E			lda I
  4206 A207 C9 30			cmp #$30
  4207 A209 B0 48			jcs l_0E38
  4208 A20B A0 00			ldy #$00
  4209 A20D A5 3E			lda I
  4210 A20F 10 01			spl
  4211 A211 88				dey
  4212 A212 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  4213 A214 18 69 38			add #$38
  4214 A217 0A				asl @
  4215 A218 85 9D			sta :STACKORIGIN+9
  4216 A21A A9 14			lda #$14
  4217 A21C 85 8C			sta :ecx
  4218 A21E 85 90			sta :ztmp8
  4219 A220 A5 3E			lda I
  4220 A222 85 84			sta :eax
  4221 A224 85 92			sta :ztmp10
  4222 					.ifdef fmulinit
  4223 					fmulu_8
  4224 					els
  4225 A226 20 A7 89			imulCL
  4226 					eif
  4227 A229 38				sec
  4228 A22A 24 92			bit :ztmp10
  4229 A22C 10 02			bpl @+
  4230 A22E E5 90			sbc :ztmp8
  4231 				@
  4232 A230 24 90			bit :ztmp8
  4233 A232 10 02			bpl @+
  4234 A234 E5 92			sbc :ztmp10
  4235 				@
  4236 A236 85 85			sta :eax+1
  4237 A238 A5 84			lda :eax
  4238 A23A 85 9E			sta :STACKORIGIN+10
  4239 A23C A9 28			lda #$28
  4240 A23E 18 65 85			add :eax+1
  4241 A241 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  4242 A243 A4 9D			ldy :STACKORIGIN+9
  4243 A245 A5 9E			lda :STACKORIGIN+10
  4244 A247 99 00 06			sta adr.YSCR,y
  4245 A24A A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  4246 A24C 99 01 06			sta adr.YSCR+1,y
  4247
  4248 				; --- ForToDoEpilog
  4249 A24F E6 3E			inc I
  4250 A251 D0 B2			jne l_0E2A
  4251 A253			l_0E38
  4252
  4253 				; optimize OK (SIED.pas), line = 53
  4254
  4255 A253 A9 00			lda #$00
  4256 A255 85 3E			sta I
  4257
  4258 A257			l_0E5B
  4259 				; --- ForToDoCondition
  4260 A257 A5 3E			lda I
  4261 A259 C9 18			cmp #$18
  4262 A25B B0 4E			jcs l_0E69
  4263 A25D A9 68			lda #$68
  4264 A25F 85 9D			sta :STACKORIGIN+9
  4265 A261 A0 00			ldy #$00
  4266 A263 A5 3E			lda I
  4267 A265 10 01			spl
  4268 A267 88				dey
  4269 A268 84 AE			sty :STACKORIGIN+STACKWIDTH+10
  4270 A26A 18 65 9D			add :STACKORIGIN+9
  4271 A26D 0A				asl @
  4272 A26E 85 9D			sta :STACKORIGIN+9
  4273 A270 A9 C0			lda #$C0
  4274 A272 85 9E			sta :STACKORIGIN+10
  4275 A274 A9 2B			lda #$2B
  4276 A276 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  4277 A278 A9 28			lda #$28
  4278 A27A 85 8C			sta :ecx
  4279 A27C 85 90			sta :ztmp8
  4280 A27E A5 3E			lda I
  4281 A280 85 84			sta :eax
  4282 A282 85 92			sta :ztmp10
  4283 					.ifdef fmulinit
  4284 					fmulu_8
  4285 					els
  4286 A284 20 A7 89			imulCL
  4287 					eif
  4288 A287 38				sec
  4289 A288 24 92			bit :ztmp10
  4290 A28A 10 02			bpl @+
  4291 A28C E5 90			sbc :ztmp8
  4292 				@
  4293 A28E 24 90			bit :ztmp8
  4294 A290 10 02			bpl @+
  4295 A292 E5 92			sbc :ztmp10
  4296 				@
  4297 A294 85 85			sta :eax+1
  4298 A296 A4 9D			ldy :STACKORIGIN+9
  4299 A298 A5 9E			lda :STACKORIGIN+10
  4300 A29A 18 65 84			add :eax
  4301 A29D 99 00 06			sta adr.YSCR,y
  4302 A2A0 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  4303 A2A2 65 85			adc :eax+1
  4304 A2A4 99 01 06			sta adr.YSCR+1,y
  4305
  4306 				; --- ForToDoEpilog
  4307 A2A7 E6 3E			inc I
  4308 A2A9 D0 AC			jne l_0E5B
  4309 A2AB			l_0E69
  4310
  4311 				; optimize OK (SIED.pas), line = 54
  4312
  4313 A2AB A9 00			lda #$00
  4314 A2AD 85 88			sta SYSTEM.FILLCHAR.@012A.A
  4315 A2AF A9 20			lda #$20
  4316 A2B1 85 89			sta SYSTEM.FILLCHAR.@012A.A+1
  4317 A2B3 A9 00			lda #$00
  4318 A2B5 85 8C			sta SYSTEM.FILLCHAR.@012A.COUNT
  4319 A2B7 A9 10			lda #$10
  4320 A2B9 85 8D			sta SYSTEM.FILLCHAR.@012A.COUNT+1
  4321 A2BB A9 00			lda #$00
  4322 A2BD 85 84			sta SYSTEM.FILLCHAR.@012A.VALUE
  4323 A2BF				.LOCAL +MAIN.SYSTEM.FILLCHAR.@012A
  4324 A2BF				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR.@012A.M@INLINE [Source: SIED.a65]
     4 A2BF 20 4F 89			jsr @fill
Source: SIED.a65
  4325 					.ENDL
  4326
  4327 				; optimize OK (SIED.pas), line = 55
  4328
  4329 A2C2 A9 FF			lda #$FF
  4330 A2C4 A0 31			ldy #$31
  4331 A2C6 99 17 23 88 10 FA		sta:rpl $2317,y-
  4332
  4333 				; optimize OK (SIED.pas), line = 56
  4334
  4335 A2CC A9 01			lda #$01
  4336 A2CE 85 D4			sta ACTIVEPAGE
  4337
  4338 				; optimize OK (SIED.pas), line = 57
  4339
  4340 A2D0 A9 00			lda #$00
  4341 A2D2 8D 2F 02			sta SDMACTL
  4342
  4343 				; -------------------  ASM Block 00000089  -------------------
  4344
  4345 A2D5 A5 14		    lda $14
  4346 A2D7 C5 14		    cmp $14
  4347 A2D9 F0 FC		    beq *-2
  4348 				  
  4349 				; -------------------  ASM Block 00000090  -------------------
  4350
  4351 A2DB 78			 sei; 
  4352 				; optimize OK (SIED.pas), line = 65
  4353
  4354 A2DC A9 74 8D 00 02		mva <MYDLI VDSLST
  4355 A2E1 A9 8C 8D 01 02		mva >MYDLI VDSLST+1
  4356
  4357 				; optimize OK (SIED.pas), line = 66
  4358
  4359 A2E6 A9 C0			lda #$C0
  4360 A2E8 8D 0E D4			sta NMIEN
  4361
  4362 				; -------------------  ASM Block 00000091  -------------------
  4363
  4364 A2EB 58			 cli; 
  4365 				; optimize OK (SIED.pas), line = 68
  4366
  4367 A2EC A9 FD			lda #$FD
  4368 A2EE 8D 30 02			sta SDLST
  4369 A2F1 A9 80			lda #$80
  4370 A2F3 8D 31 02			sta SDLST+1
  4371
  4372 				; optimize OK (SIED.pas), line = 69
  4373
  4374 A2F6 A9 EA			lda #$EA
  4375 A2F8 8D C4 02			sta PFCOL0
  4376 A2FB A9 00			lda #$00
  4377 A2FD 8D C5 02			sta PFCOL1
  4378 A300 A9 0F			lda #$0F
  4379 A302 8D C6 02			sta PFCOL2
  4380 A305 A9 E0			lda #$E0
  4381 A307 8D C8 02			sta PFCOL4
  4382
  4383 				; optimize OK (SIED.pas), line = 70
  4384
  4385 A30A A9 0A			lda #$0A
  4386 A30C 8D D9 02			sta KRPDEL
  4387 A30F A9 01			lda #$01
  4388 A311 8D DA 02			sta KEYREP
  4389
  4390 				; optimize FAIL ('CURSOR.INITCURSOR', SIED.pas), line = 72
  4391
  4392 A314 20 15 8C			jsr CURSOR.INITCURSOR
  4393
  4394 				; optimize FAIL ('INITINTERFACE', SIED.pas), line = 73
  4395
  4396 A317 20 A1 91			jsr INITINTERFACE
  4397
  4398 				; optimize FAIL ('INITMODULES', SIED.pas), line = 74
  4399
  4400 A31A 20 B4 A0			jsr INITMODULES
  4401
  4402 				; optimize FAIL ('SHOWABOUT', SIED.pas), line = 75
  4403
  4404 A31D 20 98 99			jsr SHOWABOUT
  4405
  4406 				; ------------------------------------------------------------
  4407
  4408 A320			@exit
  4409 					.ifdef @new
  4410 					lda <@VarData
  4411 					sta :ztmp
  4412 					lda >@VarData
  4413 					ldy #@VarDataSize-1
  4414 					jmp @FreeMem
  4415 					els
  4416 A320 60				rts						; ret
  4417 					eif
  4418 				.endl
  4419 A321			l_00EC
  4420
  4421 				; optimize FAIL ('INITEDITOR', SIED.pas), line = 79
  4422
  4423 A321 20 90 A1			jsr INITEDITOR
  4424
  4425 				; --- WhileProlog
  4426 A324 4C 42 A3			jmp l_0EC3
  4427 A327			l_0EC4
  4428
  4429 				; optimize FAIL ('CHECKZONES', SIED.pas), line = 82
  4430
  4431 A327 20 CB 92			jsr CHECKZONES
  4432 A32A AD 61 A4			lda CHECKZONES.RESULT
  4433 A32D F0 13			jeq l_0ECE
  4434
  4435 				; -------------------  ASM Block 00000092  -------------------
  4436
  4437 A32F A5 50		        lda szone
  4438 A331 0A			        asl @
  4439 A332 A8			        tay
  4440 A333 B9 A0 05		        lda adr._mzonePROC,y
  4441 A336 8D 40 A3		        sta jaddr
  4442 A339 B9 A1 05		        lda adr._mzonePROC+1,y
  4443 A33C 8D 41 A3		        sta jaddr+1
  4444 A33F 20 FF FF		        jsr jaddr:$ffff
  4445 				      
  4446 A342			l_0ECE
  4447 A342			l_0EC3
  4448
  4449 				; optimize OK (SIED.pas), line = 80
  4450
  4451 A342 4C 27 A3			jmp l_0EC4
  4452
  4453 				; ------------------------------------------------------------
  4454
  4455 = 0600			SCREEN_LINES_ADDR	= $0600
  4456 = 2000			PMG_ADDR	= $2000
  4457 = 2400			SCREEN_ADDR	= $2400
  4458 = 2800			EDITOR_ADDR	= $2800
  4459 = 3000			FONTS_ADDR	= $3000
  4460 = 000F			MAX_SPRITE	= $0F
  4461 = 0007			MAX_GROUP	= $07
  4462 = 0014			ZP_TM	= $14
  4463 = 0012			ZP_NFRMTM	= $12
  4464 = 001C			ZP_CURGROUP	= $1C
  4465 = 001D			ZP_CURPWRSPRITE	= $1D
  4466 = 001E			ZP_CURTRLSPRITE	= $1E
  4467 = 0020			ZP_AX1	= $20
  4468 = 0021			ZP_AY1	= $21
  4469 = 0022			ZP_AX2	= $22
  4470 = 0023			ZP_AY2	= $23
  4471 = 0024			ZP_BX1	= $24
  4472 = 0025			ZP_BY1	= $25
  4473 = 0026			ZP_BX2	= $26
  4474 = 0027			ZP_BY2	= $27
  4475 = 0028			ZP__X1	= $28
  4476 = 0029			ZP__Y1	= $29
  4477 = 002A			ZP__X2	= $2A
  4478 = 002B			ZP__Y2	= $2B
  4479 = 002C			ZP_NXTTLEVENT	= $2C
  4480 = 002E			ZP_SCR	= $2E
  4481 = 0070			ZP_BCDSCORE	= $70
  4482 = 0074			ZP_BCDLEVEL	= $74
  4483 = 0075			ZP_PLAYERLIVES	= $75
  4484 = 0076			ZP_BCDMISSILES	= $76
  4485 = 0077			ZP_F1PWR	= $77
  4486 = 0078			ZP_F1SPD	= $78
  4487 = 0079			ZP_F2PWR	= $79
  4488 = 007A			ZP_KEYCODE	= $7A
  4489 = 007B			ZP_JOYDIRECTION	= $7B
  4490 = 007C			ZP_JOYFIRE1	= $7C
  4491 = 007E			ZP_JOYFIRE2	= $7E
  4492 = 00D4			ZP_ACTIVEPAGE	= $D4
  4493 = 00D5			ZP_I	= $D5
  4494 = 00D6			ZP_J	= $D6
  4495 = 00D7			ZP_TRAILADR	= $D7
  4496 = 00D9			ZP_DYVAL	= $D9
  4497 = 00DA			ZP_DXVAL	= $DA
  4498 = 00E0			ZP_SPRITEN	= $E0
  4499 = 00E1			ZP_SPRITEX	= $E1
  4500 = 00E2			ZP_SPRITEY	= $E2
  4501 = 00E3			ZP_SPRITEI	= $E3
  4502 = 00E4			ZP_GAMESTAT	= $E4
  4503 = 00E5			ZP_TLADR	= $E5
  4504 = 00E7			ZP_TIMERS	= $E7
  4505 = 00E8			ZP_TIMER0	= $E8
  4506 = 00E9			ZP_TIMER1	= $E9
  4507 = 00EA			ZP_TIMER2	= $EA
  4508 = 00EB			ZP_TIMER3	= $EB
  4509 = 00EC			ZP_TIMER4	= $EC
  4510 = 00ED			ZP_TIMER5	= $ED
  4511 = 00EE			ZP_CURTIMELINE	= $EE
  4512 = 0000			DL_BLANK1	= $00
  4513 = 0010			DL_BLANK2	= $10
  4514 = 0020			DL_BLANK3	= $20
  4515 = 0030			DL_BLANK4	= $30
  4516 = 0040			DL_BLANK5	= $40
  4517 = 0050			DL_BLANK6	= $50
  4518 = 0060			DL_BLANK7	= $60
  4519 = 0070			DL_BLANK8	= $70
  4520 = 0080			DL_DLI	= $80
  4521 = 0040			DL_LMS	= $40
  4522 = 0020			DL_VSCROLL	= $20
  4523 = 0010			DL_HSCROLL	= $10
  4524 = 0002			DL_MODE_40X24T2	= $02
  4525 = 0004			DL_MODE_40X24T5	= $04
  4526 = 0005			DL_MODE_40X12T5	= $05
  4527 = 0006			DL_MODE_20X24T5	= $06
  4528 = 0007			DL_MODE_20X12T5	= $07
  4529 = 0008			DL_MODE_40X24G4	= $08
  4530 = 0009			DL_MODE_80X48G2	= $09
  4531 = 000A			DL_MODE_80X48G4	= $0A
  4532 = 000B			DL_MODE_160X96G2	= $0B
  4533 = 000C			DL_MODE_160X192G2	= $0C
  4534 = 000D			DL_MODE_160X96G4	= $0D
  4535 = 000E			DL_MODE_160X192G4	= $0E
  4536 = 000F			DL_MODE_320X192G2	= $0F
  4537 = 0001			DL_JMP	= $01
  4538 = 0041			DL_JVB	= $41
  4539 = 80FD			adr.DLIST	= CODEORIGIN+$00FD
  4540 A345			.var DLIST	= adr.DLIST .word
  4541 = 8157			adr._CONTROLS	= CODEORIGIN+$0157
  4542 A345			.var _CONTROLS	= adr._CONTROLS .word
  4543 = 8277			adr._ICONS	= CODEORIGIN+$0277
  4544 A345			.var _ICONS	= adr._ICONS .word
  4545 = 83BB			adr._ICARD	= CODEORIGIN+$03BB
  4546 A345			.var _ICARD	= adr._ICARD .word
  4547 = 8406			adr._IPATH	= CODEORIGIN+$0406
  4548 A345			.var _IPATH	= adr._IPATH .word
  4549 = 84C6			adr._FONT	= CODEORIGIN+$04C6
  4550 A345			.var _FONT	= adr._FONT .word
  4551 = 873C			adr._CFONT	= CODEORIGIN+$073C
  4552 A345			.var _CFONT	= adr._CFONT .word
  4553 = 8877			adr.ACONTROLS	= CODEORIGIN+$0877
  4554 A345			.var ACONTROLS	= adr.ACONTROLS .word
  4555 = 888F			adr.AICONS	= CODEORIGIN+$088F
  4556 A345			.var AICONS	= adr.AICONS .word
  4557 = 0000			K_L	= $00
  4558 = 0001			K_J	= $01
  4559 = 0002			K_SEMICO	= $02
  4560 = 0003			K_F1	= $03
  4561 = 0004			K_F2	= $04
  4562 = 0005			K_K	= $05
  4563 = 0006			K_PLUS	= $06
  4564 = 0006			K_LEFT	= $06
  4565 = 0007			K_STAR	= $07
  4566 = 0007			K_RIGHT	= $07
  4567 = 0008			K_O	= $08
  4568 = 000A			K_P	= $0A
  4569 = 000B			K_U	= $0B
  4570 = 000C			K_RETURN	= $0C
  4571 = 000D			K_I	= $0D
  4572 = 000E			K_UP	= $0E
  4573 = 000F			K_DOWN	= $0F
  4574 = 0010			K_V	= $10
  4575 = 0011			K_HELP	= $11
  4576 = 0012			K_C	= $12
  4577 = 0013			K_F3	= $13
  4578 = 0014			K_F4	= $14
  4579 = 0015			K_B	= $15
  4580 = 0016			K_X	= $16
  4581 = 0017			K_Z	= $17
  4582 = 0018			K_4	= $18
  4583 = 001A			K_3	= $1A
  4584 = 001B			K_6	= $1B
  4585 = 001C			K_ESC	= $1C
  4586 = 001D			K_5	= $1D
  4587 = 001E			K_2	= $1E
  4588 = 001F			K_1	= $1F
  4589 = 0020			K_COMMA	= $20
  4590 = 0021			K_SPACE	= $21
  4591 = 0022			K_DOT	= $22
  4592 = 0023			K_N	= $23
  4593 = 0025			K_M	= $25
  4594 = 0026			K_BACKSL	= $26
  4595 = 0027			K_INVERS	= $27
  4596 = 0028			K_R	= $28
  4597 = 002A			K_E	= $2A
  4598 = 002B			K_Y	= $2B
  4599 = 002C			K_TAB	= $2C
  4600 = 002D			K_T	= $2D
  4601 = 002E			K_W	= $2E
  4602 = 002F			K_Q	= $2F
  4603 = 0030			K_9	= $30
  4604 = 0032			K_0	= $32
  4605 = 0033			K_7	= $33
  4606 = 0034			K_DELETE	= $34
  4607 = 0035			K_8	= $35
  4608 = 0036			K_CLEAR	= $36
  4609 = 0037			K_INSERT	= $37
  4610 = 0038			K_F	= $38
  4611 = 0039			K_H	= $39
  4612 = 003A			K_D	= $3A
  4613 = 003C			K_CAPS	= $3C
  4614 = 003D			K_G	= $3D
  4615 = 003E			K_S	= $3E
  4616 = 003F			K_A	= $3F
  4617 = 0040			KMOD_SHIFT	= $40
  4618 = 0080			KMOD_CTRL	= $80
  4619 = 02D9			KRPDEL	= $02D9
  4620 = 02DA			KEYREP	= $02DA
  4621 = 02FC			KEYB	= $02FC
  4622 = 0011			BRKKEY	= $11
  4623 = 0480			adr._ASC2INT	= $0480
  4624 A345			.var _ASC2INT	= adr._ASC2INT .word
  4625 = 026F			GPRIOR	= $026F
  4626 = 022F			SDMACTL	= $022F
  4627 = D01D			PMCTL	= $D01D
  4628 = D407			PMBASE	= $D407
  4629 = D000			adr.HPOSP	= $D000
  4630 A345			.var HPOSP	= adr.HPOSP .word
  4631 = D008			adr.SIZEP	= $D008
  4632 A345			.var SIZEP	= adr.SIZEP .word
  4633 = 02C0			adr.PCOL	= $02C0
  4634 A345			.var PCOL	= adr.PCOL .word
  4635 = 003E			I	= $3E
  4636 = 0014			TM	= $14
  4637 = A436			CURMODULE	= DATAORIGIN+$0013
  4638 = 0200			DLIV	= $0200
  4639 = D40E			NMIEN	= $D40E
  4640 = 0230			SDLST	= $0230
  4641 = 026F			GTIACS	= $026F
  4642 = 02C4			PFCOL0	= $02C4
  4643 = 02C5			PFCOL1	= $02C5
  4644 = 02C6			PFCOL2	= $02C6
  4645 = 02C7			PFCOL3	= $02C7
  4646 = 02C8			PFCOL4	= $02C8
  4647 = 00D4			ACTIVEPAGE	= $D4
  4648 = 002E			SCR	= $2E
  4649 = 0600			adr.YSCR	= $0600
  4650 A345			.var YSCR	= adr.YSCR .word
  4651 = 3000			adr.AFONT	= $3000
  4652 A345			.var AFONT	= adr.AFONT .word
  4653 = 3100			adr.AFONTC	= $3100
  4654 A345			.var AFONTC	= adr.AFONTC .word
  4655 = 001F			MAX_ZONES	= $1F
  4656 = 0009			USER_ZONES_BEGIN	= $09
  4657 = 0500			adr._MZONEACTIVE	= $0500
  4658 A345			.var _MZONEACTIVE	= adr._MZONEACTIVE .word
  4659 = 0520			adr._MZONEX1	= $0520
  4660 A345			.var _MZONEX1	= adr._MZONEX1 .word
  4661 = 0540			adr._MZONEY1	= $0540
  4662 A345			.var _MZONEY1	= adr._MZONEY1 .word
  4663 = 0560			adr._MZONEX2	= $0560
  4664 A345			.var _MZONEX2	= adr._MZONEX2 .word
  4665 = 0580			adr._MZONEY2	= $0580
  4666 A345			.var _MZONEY2	= adr._MZONEY2 .word
  4667 = 05A0			adr._MZONEPROC	= $05A0
  4668 A345			.var _MZONEPROC	= adr._MZONEPROC .word
  4669 = 0050			SZONE	= $50
  4670 = 0051			OZONE	= $51
  4671 = A43D			__X	= DATAORIGIN+$001A
  4672 = A43E			__Y	= DATAORIGIN+$001B
  4673 = A43F			__W	= DATAORIGIN+$001C
  4674 = A440			__H	= DATAORIGIN+$001D
  4675 = 0037			YCONTROLS	= $37
  4676 = 88A1			adr._DIRFILEX	= CODEORIGIN+$08A1
  4677 A345			.var _DIRFILEX	= adr._DIRFILEX .word
  4678 = 88B0			adr._DIRFILEY	= CODEORIGIN+$08B0
  4679 A345			.var _DIRFILEY	= adr._DIRFILEY .word
  4680 = A48C			adr.DIRNAME	= [DATAORIGIN+$0069] .array [15] .word
  4681 A345			.var DIRNAME	= adr.DIRNAME .word
  4682 = 88BF			adr._HEX	= CODEORIGIN+$08BF
  4683 A345			.var _HEX	= adr._HEX .word
  4684 = 0400			adr.DEV	= $0400
  4685 A345			.var DEV	= adr.DEV .word
  4686 = 0405			adr.FN	= $0405
  4687 A345			.var FN	= adr.FN .word
  4688 = 0417			adr._FN	= $0417
  4689 A345			.var _FN	= adr._FN .word
  4690 = 042C			adr.FILEMASK	= $042C
  4691 A345			.var FILEMASK	= adr.FILEMASK .word
  4692 = A572			DIRPAGEBEGIN	= DATAORIGIN+$014F
  4693 A345			@exit
  4694
  4695 A345 A2 00		@halt	ldx #$00
  4696 A347 9A				txs
  4697
  4698 					.ifdef MAIN.@DEFINES.ROMOFF
  4699 A348 EE 01 D3			inc portb
  4700 					.fi
  4701
  4702 A34B A0 01			ldy #$01
  4703
  4704 A34D 60				rts
  4705
  4706 				; ------------------------------------------------------------
  4707
  4708 A34E 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  4709
  4710 				; ------------------------------------------------------------
  4711
  4712 A35E			.local	@DEFINES
  4713 A35E			ATARI
  4714 A35E			DISABLEIOCBCOPY
  4715 A35E			BASICOFF
  4716 A35E			ROMOFF
  4717 A35E			NOROMFONT
  4718 				.endl
  4719
  4720 A35E			.local	@RESOURCE
  4721 				.endl
  4722
  4723 = A35E FD 80		DLIST
  4723 = A360 57 81		_CONTROLS
  4723 = A362 77 82		_ICONS
  4723 = A364 BB 83		_ICARD
  4723 = A366 06 84		_IPATH
  4723 = A368 C6 84		_FONT
  4723 = A36A 3C 87		_CFONT
  4723 = A36C 77 88		ACONTROLS
  4723 = A36E 8F 88		AICONS
  4723 = A370 80 04		_ASC2INT
  4723 = A372 00 D0		HPOSP
  4723 = A374 08 D0		SIZEP
  4723 = A376 C0 02		PCOL
  4723 = A378 00 06		YSCR
  4723 = A37A 00 30		AFONT
  4723 = A37C 00 31		AFONTC
  4723 = A37E 00 05		_MZONEACTIVE
  4723 = A380 20 05		_MZONEX1
  4723 = A382 40 05		_MZONEY1
  4723 = A384 60 05		_MZONEX2
  4723 = A386 80 05		_MZONEY2
  4723 = A388 A0 05		_MZONEPROC
  4723 = A38A A1 88		_DIRFILEX
  4723 = A38C B0 88		_DIRFILEY
  4723 = A38E 8C A4		DIRNAME
  4723 = A390 BF 88		_HEX
  4723 = A392 00 04		DEV
  4723 = A394 05 04		FN
  4723 = A396 17 04		_FN
  4723 = A398 2C 04		FILEMASK
  4723 				.endl							; MAIN
  4724
  4725 				; ------------------------------------------------------------
  4726 				; ------------------------------------------------------------
  4727
  4728 				.macro	UNITINITIALIZATION
  4729 				
  4730 					.ifdef MAIN.SYSTEM.@UnitInit
  4731 					jsr MAIN.SYSTEM.@UnitInit
  4732 					.fi
  4733 				
  4734 					.ifdef MAIN.CIO.@UnitInit
  4735 					jsr MAIN.CIO.@UnitInit
  4736 					.fi
  4737 				
  4738 					.ifdef MAIN.CURSOR.@UnitInit
  4739 					jsr MAIN.CURSOR.@UnitInit
  4740 					.fi
  4741 				.endm
  4742
  4743 				; ------------------------------------------------------------
  4744
  4745 					ift .SIZEOF(MAIN.SYSTEM) > 0
  4746 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  4746 				SYSTEM: $8A40..$8A43
  4747 					eif
  4748
  4749 					ift .SIZEOF(MAIN.CIO) > 0
  4750 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  4750 				CIO: $8A44..$8AA6
  4751 					eif
  4752
  4753 					ift .SIZEOF(MAIN.CURSOR) > 0
  4754 					.print 'CURSOR: ',MAIN.CURSOR,'..',MAIN.CURSOR+.SIZEOF(MAIN.CURSOR)-1
  4754 				CURSOR: $8AA7..$8C73
  4755 					eif
  4756
  4757 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  4757 				CODE: $8000..$A35D
  4758
  4759 				; ------------------------------------------------------------
  4760
  4761 = A39A				?adr = *
  4762 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  4763 = A423				?adr = ?old_adr
  4764 					eif
  4765
  4766 					org ?adr
  4767 = A423				?old_adr = *
  4768
  4769 A423			DATAORIGIN
  4770 A423-A4A9> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $FF $00 $00 $00 $00
  4771 A43B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4772 A453 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4773 A46B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  4774 A483 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 <[DATAORIGIN+$0087] >[DATAORIGIN+$0087] <[DATAORIGIN+$0094] >[DATAORIGIN+$0094] <[DATAORIGIN+$00A1] >[DATAORIGIN+$00A1] <[DATAORIGIN+$00AE]  >[DATAORIGIN+$00AE] <[DATAORIGIN+$00BB] >[DATAORIGIN+$00BB] <[DATAORIGIN+$00C8] >[DATAORIGIN+$00C8] <[DATAORIGIN+$00D5] >[DATAORIGIN+$00D5] <[DATAORIGIN+$00E2]
  4775 A49B A5 12 A5 1F A5 2C + .by  >[DATAORIGIN+$00E2] <[DATAORIGIN+$00EF] >[DATAORIGIN+$00EF] <[DATAORIGIN+$00FC] >[DATAORIGIN+$00FC] <[DATAORIGIN+$0109] >[DATAORIGIN+$0109] <[DATAORIGIN+$0116]  >[DATAORIGIN+$0116] <[DATAORIGIN+$0123] >[DATAORIGIN+$0123] <[DATAORIGIN+$0130] >[DATAORIGIN+$0130] <[DATAORIGIN+$013D] >[DATAORIGIN+$013D]
  4776
  4777 = 0087			VARINITSIZE	= *-DATAORIGIN
  4778 = 0157			VARDATASIZE	= 343
  4779
  4780 = A57A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  4781
  4782 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  4782 				DATA: $A423..$A57A
  4783
  4784 02E0-02E1> BF 89			run START
  4785
  4786 				; ------------------------------------------------------------
  4787
  4788 				.macro	STATICDATA
  4789 				.by  $00 $13 $53 $50 $41 $43 $45 $20  $49 $4D $50 $41 $43 $54 $20 $45  $44 $49 $54 $4F $52 $13 $2D $2D
  4790 				.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $08 $47 $53 $44 $20 $32 $30
  4791 				.by  $32 $34 $26 $47 $49 $54 $3A $2F  $2F $47 $53 $4F $46 $54 $57 $41  $52 $45 $44 $45 $56 $45 $4C $4F
  4792 				.by  $50 $4D $45 $4E $54 $2F $53 $50  $41 $43 $45 $49 $4D $50 $41 $43  $54 $07 $32 $38 $2D $32 $2D $32
  4793 				.by  $34 $10 $30 $31 $32 $33 $34 $35  $36 $37 $38 $39 $41 $42 $43 $44  $45 $46 $0A $53 $45 $45 $4B $49
  4794 				.by  $4E $47 $2E $2E $2E $14 $52 $45  $41 $44 $49 $4E $47 $20 $44 $49  $52 $45 $43 $54 $4F $52 $59 $2E
  4795 				.by  $2E $2E $14 $52 $45 $41 $44 $49  $4E $47 $20 $44 $49 $52 $45 $43  $54 $4F $52 $59 $2E $2E $2E $0D
  4796 				.by  $49 $2F $4F $20 $45 $52 $52 $4F  $52 $20 $24 $30 $30 $04 $50 $52  $45 $56 $04 $4E $45 $58 $54 $04
  4797 				.by  $4C $4F $41 $44 $04 $53 $41 $56  $45 $06 $45 $58 $50 $4F $52 $54  $08 $30 $30 $3A $30 $30 $2E $30
  4798 				.by  $30 $04 $2A $2E $2A $9B $02 $44  $3A $06 $4E $4F $4E $41 $4D $45  $10 $18 $3C $3E $78 $60 $80 $BA
  4799 				.by  $7C $F6 $EE $6C $BA $44 $10 $10  $00 $C6 $00 $10 $10 $70 $70 $70  $70 $30 $80 $20 $4B $00 $28 $0B
  4800 				.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B
  4801 				.by  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $0B $0B  $0B $0B $0B $0B $0B $0B $90 $0D
  4802 				.by  $0D $0D $0D $0D $0D $0D $0D $0D  $0D $0D $0D $0D $0D $0D $30 $0D  $0D $0D $0D $0D $B0 $0D $0D $0D
  4803 				.by  $0D $0D $0D $8D $41 $FD $80 $15  $55 $40 $56 $59 $50 $56 $69 $58  $56 $A9 $58 $56 $69 $58 $56 $59
  4804 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $9A $54 $15 $AA $54 $15 $9A
  4805 				.by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $56 $95 $50 $56 $A5 $58  $56 $A9 $58 $56 $A5 $58 $56 $95
  4806 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $A5 $54  $15 $A9 $54 $15 $AA $54 $15 $A9
  4807 				.by  $54 $15 $A5 $54 $05 $55 $50 $15  $55 $40 $56 $59 $50 $56 $99 $58  $56 $A9 $58 $56 $99 $58 $56 $59
  4808 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $96 $54  $15 $A6 $54 $15 $AA $54 $15 $A6
  4809 				.by  $54 $15 $96 $54 $05 $55 $50 $15  $55 $40 $55 $55 $50 $56 $A9 $58  $56 $A9 $58 $56 $A9 $58 $55 $55
  4810 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $55 $54  $15 $AA $54 $15 $AA $54 $15 $AA
  4811 				.by  $54 $15 $55 $54 $05 $55 $50 $15  $55 $40 $56 $A9 $50 $55 $55 $58  $5A $AA $58 $56 $A9 $58 $55 $A5
  4812 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $AA $54  $15 $55 $54 $16 $AA $94 $15 $AA
  4813 				.by  $54 $15 $69 $54 $05 $55 $50 $15  $55 $40 $55 $A5 $50 $56 $A9 $58  $5A $AA $58 $55 $55 $58 $56 $A9
  4814 				.by  $58 $15 $55 $68 $0A $AA $A0 $00  $00 $00 $05 $55 $50 $15 $69 $54  $15 $AA $54 $16 $AA $94 $15 $55
  4815 				.by  $54 $15 $AA $54 $05 $55 $50 $55  $55 $54 $6A $A9 $56 $6A $A9 $56  $55 $55 $5A $55 $65 $54 $55 $89
  4816 				.by  $56 $55 $65 $56 $55 $55 $56 $55  $65 $56 $55 $65 $56 $55 $55 $56  $2A $AA $AA $00 $00 $14 $00 $01
  4817 				.by  $46 $00 $04 $5A $00 $01 $18 $00  $04 $68 $00 $32 $20 $00 $48 $00  $00 $E0 $00 $0D $20 $00 $D2 $80
  4818 				.by  $00 $28 $00 $00 $00 $00 $00 $15  $55 $00 $56 $6A $40 $25 $55 $60  $06 $69 $60 $05 $55 $60 $06 $99
  4819 				.by  $60 $05 $55 $60 $06 $6A $60 $05  $55 $60 $05 $9A $94 $01 $55 $5A  $00 $AA $A8 $00 $00 $00 $15 $55
  4820 				.by  $55 $1A $AA $55 $1A $AA $55 $15  $55 $54 $15 $59 $55 $15 $62 $55  $15 $59 $55 $15 $55 $55 $15 $59
  4821 				.by  $55 $15 $59 $55 $15 $55 $55 $00  $00 $00 $00 $00 $05 $00 $00 $51  $00 $01 $14 $00 $00 $44 $00 $01
  4822 				.by  $10 $00 $0C $00 $00 $10 $00 $00  $30 $00 $03 $40 $00 $34 $00 $00  $00 $00 $00 $00 $00 $00 $05 $55
  4823 				.by  $40 $15 $9A $90 $01 $55 $50 $01  $9A $50 $01 $55 $50 $01 $A6 $50  $01 $55 $50 $01 $9A $90 $01 $55
  4824 				.by  $50 $01 $66 $A5 $00 $55 $54 $AA  $AA $AA $95 $55 $55 $9A $AA $55  $9A $AA $55 $95 $55 $56 $95 $59
  4825 				.by  $55 $95 $62 $55 $95 $59 $55 $95  $55 $55 $95 $59 $55 $95 $59 $55  $95 $55 $55 $AA $AA $AA $AA $AA
  4826 				.by  $A5 $AA $AA $51 $AA $A9 $16 $AA  $AA $46 $AA $A9 $9A $AA $AE $AA  $AA $9A $AA $AA $BA $AA $AB $6A
  4827 				.by  $AA $B6 $AA $AA $AA $AA $AA $AA  $AA $AA $A5 $55 $6A $95 $9A $9A  $A9 $55 $5A $A9 $9A $5A $A9 $55
  4828 				.by  $5A $A9 $A6 $5A $A9 $55 $5A $A9  $9A $9A $A9 $55 $5A $A9 $66 $A5  $AA $55 $56 $2A $AA $AA $AA $AA
  4829 				.by  $0A $AA $AA $AA $A8 $0A $AA $AA  $AA $A8 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA
  4830 				.by  $A0 $02 $AA $AA $AA $A0 $02 $AA  $AA $AA $A0 $02 $AA $AA $AA $A0  $02 $AA $AA $AA $A0 $02 $AA $AA
  4831 				.by  $AA $A0 $02 $AA $AA $AA $A0 $02  $AA $AA $AA $A0 $02 $AA $AA $AA  $A0 $00 $AA $AA $AA $80 $00 $10
  4832 				.by  $01 $1F $D0 $01 $54 $52 $01 $6F  $D1 $81 $74 $51 $E1 $6F $D0 $F9  $54 $50 $F1 $1F $D0 $61 $14 $90
  4833 				.by  $41 $1F $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $40 $10 $0D  $38 $10 $31 $2C $10 $C1 $32 $13
  4834 				.by  $01 $11 $14 $01 $08 $93 $01 $05  $D3 $C1 $03 $D1 $A1 $01 $91 $11  $00 $10 $01 $FF $FF $FF $00 $10
  4835 				.by  $01 $00 $10 $01 $54 $17 $C1 $01  $10 $31 $00 $10 $09 $00 $90 $09  $00 $10 $09 $01 $10 $31 $54 $17
  4836 				.by  $C1 $00 $10 $01 $00 $10 $01 $FF  $FF $FF $00 $10 $01 $00 $10 $01  $07 $D0 $01 $1F $90 $01 $23 $10
  4837 				.by  $01 $47 $10 $01 $3F $10 $01 $1F  $90 $01 $07 $D0 $01 $00 $10 $01  $00 $10 $01 $FF $FF $FF $00 $00
  4838 				.by  $00 $00 $3E $00 $01 $80 $00 $40  $00 $40 $00 $40 $00 $80 $00 $80  $1F $00 $00 $00 $00 $00 $00 $00
  4839 				.by  $00 $00 $00 $00 $03 $80 $0E $00  $1B $80 $0E $00 $03 $80 $00 $00  $00 $00 $00 $00 $00 $00 $40 $40
  4840 				.by  $40 $00 $40 $A0 $A0 $00 $00 $00  $A0 $E0 $A0 $E0 $A0 $40 $60 $80  $20 $C0 $A0 $20 $40 $80 $A0 $40
  4841 				.by  $A0 $40 $A0 $60 $40 $40 $00 $00  $00 $40 $80 $80 $80 $40 $80 $40  $40 $40 $80 $00 $A0 $40 $A0 $00
  4842 				.by  $00 $40 $E0 $40 $00 $00 $00 $00  $40 $80 $00 $00 $E0 $00 $00 $00  $00 $00 $00 $40 $20 $20 $40 $80
  4843 				.by  $80 $40 $A0 $A0 $A0 $40 $40 $C0  $40 $40 $40 $C0 $20 $40 $80 $E0  $C0 $20 $40 $20 $C0 $80 $A0 $60
  4844 				.by  $20 $20 $E0 $80 $C0 $20 $C0 $40  $80 $C0 $A0 $40 $E0 $20 $40 $80  $80 $40 $A0 $40 $A0 $40 $40 $A0
  4845 				.by  $60 $20 $40 $00 $40 $00 $40 $00  $00 $40 $00 $40 $80 $20 $40 $80  $40 $20 $00 $E0 $00 $E0 $00 $80
  4846 				.by  $40 $20 $40 $80 $E0 $20 $40 $00  $40 $E0 $A0 $A0 $80 $E0 $E0 $A0  $A0 $E0 $A0 $E0 $A0 $C0 $A0 $E0
  4847 				.by  $E0 $80 $80 $80 $E0 $C0 $A0 $A0  $A0 $C0 $E0 $80 $C0 $80 $E0 $E0  $80 $C0 $80 $80 $E0 $80 $A0 $A0
  4848 				.by  $E0 $A0 $A0 $E0 $A0 $A0 $E0 $40  $40 $40 $E0 $20 $20 $20 $A0 $E0  $A0 $A0 $C0 $A0 $A0 $80 $80 $80
  4849 				.by  $80 $E0 $C0 $E0 $E0 $A0 $A0 $C0  $A0 $A0 $A0 $A0 $E0 $A0 $A0 $A0  $E0 $E0 $A0 $E0 $80 $80 $E0 $A0
  4850 				.by  $A0 $A0 $C0 $E0 $A0 $C0 $A0 $A0  $60 $80 $40 $20 $C0 $E0 $40 $40  $40 $40 $A0 $A0 $A0 $A0 $C0 $A0
  4851 				.by  $A0 $A0 $C0 $80 $A0 $A0 $E0 $E0  $C0 $A0 $A0 $40 $A0 $A0 $A0 $A0  $60 $20 $C0 $E0 $20 $40 $80 $E0
  4852 				.by  $60 $40 $40 $40 $60 $80 $80 $40  $20 $20 $C0 $40 $40 $40 $C0 $40  $A0 $00 $00 $00 $00 $00 $00 $00
  4853 				.by  $E0 $04 $04 $04 $00 $04 $0A $0A  $00 $00 $00 $0A $0E $0A $0E $0A  $04 $06 $08 $02 $0C $0A $02 $04
  4854 				.by  $08 $0A $04 $0A $04 $0A $06 $04  $04 $00 $00 $00 $04 $08 $08 $08  $04 $08 $04 $04 $04 $08 $00 $0A
  4855 				.by  $04 $0A $00 $00 $04 $0E $04 $00  $00 $00 $00 $04 $08 $00 $00 $0E  $00 $00 $00 $00 $00 $00 $04 $02
  4856 				.by  $02 $04 $08 $08 $04 $0A $0A $0A  $04 $04 $0C $04 $04 $04 $0C $02  $04 $08 $0E $0C $02 $04 $02 $0C
  4857 				.by  $08 $0A $06 $02 $02 $0E $08 $0C  $02 $0C $04 $08 $0C $0A $04 $0E  $02 $04 $08 $08 $04 $0A $04 $0A
  4858 				.by  $04 $04 $0A $06 $02 $04 $00 $04  $00 $04 $00 $00 $04 $00 $04 $08  $02 $04 $08 $04 $02 $00 $0E $00
  4859 				.by  $0E $00 $08 $04 $02 $04 $08 $0E  $02 $04 $00 $04 $0E $0A $0A $08  $0E $0E $0A $0A $0E $0A $0E $0A
  4860 				.by  $0C $0A $0E $0E $08 $08 $08 $0E  $0C $0A $0A $0A $0C $0E $08 $0C  $08 $0E $0E $08 $0C $08 $08 $0E
  4861 				.by  $08 $0A $0A $0E $0A $0A $0E $0A  $0A $0E $04 $04 $04 $0E $02 $02  $02 $0A $0E $0A $0A $0C $0A $0A
  4862 				.by  $08 $08 $08 $08 $0E $0C $0E $0E  $0A $0A $0C $0A $0A $0A $0A $0E  $0A $0A $0A $0E $0E $0A $0E $08
  4863 				.by  $08 $0E $0A $0A $0A $0C $0E $0A  $0C $0A $0A $06 $08 $04 $02 $0C  $0E $04 $04 $04 $04 $0A $0A $0A
  4864 				.by  $0A $0C $0A $0A $0A $0C $08 $0A  $0A $0E $0E $0C $0A $0A $04 $0A  $0A $0A $0A $06 $02 $0C $0E $02
  4865 				.by  $04 $08 $0E $06 $04 $04 $04 $06  $08 $08 $04 $02 $02 $0C $04 $04  $04 $0C $04 $0A $00 $00 $00 $00
  4866 				.by  $00 $00 $00 $0E $30 $30 $30 $00  $30 $CC $CC $00 $00 $00 $CC $FC  $CC $FC $CC $3C $F0 $30 $3C $F0
  4867 				.by  $CC $0C $30 $C0 $CC $30 $CC $30  $CC $3C $30 $30 $00 $00 $00 $30  $C0 $C0 $C0 $30 $30 $0C $0C $0C
  4868 				.by  $30 $00 $00 $30 $00 $00 $00 $30  $FC $30 $00 $00 $00 $00 $30 $C0  $00 $00 $FC $00 $00 $00 $00 $00
  4869 				.by  $00 $30 $0C $0C $30 $C0 $C0 $FC  $CC $CC $CC $FC $30 $F0 $30 $30  $30 $F0 $0C $30 $C0 $FC $FC $0C
  4870 				.by  $30 $0C $F0 $CC $CC $3C $0C $0C  $FC $C0 $F0 $0C $F0 $30 $C0 $F0  $CC $30 $FC $0C $30 $C0 $C0 $30
  4871 				.by  $CC $30 $CC $30 $30 $CC $3C $0C  $30 $00 $30 $00 $30 $00 $00 $30  $00 $30 $C0 $0C $30 $C0 $30 $0C
  4872 				.by  $00 $FC $00 $FC $00 $C0 $30 $0C  $30 $C0 $F0 $0C $30 $00 $30 $30  $CC $CC $C0 $3C $FC $CC $CC $FC
  4873 				.by  $CC $FC $CC $F0 $CC $FC $FC $C0  $C0 $C0 $FC $F0 $CC $CC $CC $F0  $FC $C0 $F0 $C0 $FC $FC $C0 $F0
  4874 				.by  $C0 $C0 $FC $C0 $CC $CC $FC $CC  $CC $FC $CC $CC $FC $30 $30 $30  $FC $0C $0C $0C $0C $F0 $CC $CC
  4875 				.by  $F0 $CC $CC $C0 $C0 $C0 $C0 $FC  $F0 $FC $FC $CC $CC $F0 $CC $CC  $CC $CC $30 $CC $CC $CC $30 $FC
  4876 				.by  $CC $FC $C0 $C0 $30 $CC $CC $CC  $3C $FC $CC $F0 $CC $CC $3C $C0  $30 $0C $F0 $FC $30 $30 $30 $30
  4877 				.by  $CC $CC $CC $CC $F0 $CC $CC $CC  $F0 $C0 $CC $CC $FC $FC $F0 $CC  $CC $30 $CC $CC $CC $CC $3C $0C
  4878 				.by  $F0 $FC $0C $30 $C0 $FC $3C $30  $30 $30 $3C $C0 $C0 $30 $0C $0C  $F0 $30 $30 $30 $F0 $30 $CC $00
  4879 				.by  $00 $00 $00 $00 $00 $00 $FC $57  $81 $87 $81 $E7 $81 $B7 $81 $17  $82 $47 $82 $6F $81 $9F $81 $FF
  4880 				.by  $81 $CF $81 $2F $82 $5F $82 $77  $82 $9B $82 $BF $82 $E3 $82 $07  $83 $2B $83 $4F $83 $73 $83 $97
  4881 				.by  $83 $01 $01 $01 $01 $01 $0E $0E  $0E $0E $0E $1B $1B $1B $1B $1B  $0D $14 $1B $22 $29 $0D $14 $1B
  4882 				.by  $22 $29 $0D $14 $1B $22 $29 $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $41 $42 $43 $44 $45 $46
  4883 				.endm
  4884
  4885 					end
