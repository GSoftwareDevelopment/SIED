; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/02/28] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $E000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0004

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

.local	PUTIMAGE					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000063  -------------------

 icl 'asm/put-image.a65' 
; ------------------------------------------------------------

ADR	= :EDX
X	= :ECX
Y	= :EAX
WIDTH	= DATAORIGIN+$000B
HEIGHT	= DATAORIGIN+$000C

@VarData	= WIDTH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTSPRITE					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000064  -------------------

 icl 'asm/put-sprite-or.a65' 
; ------------------------------------------------------------

ADR	= :EDX
X	= :ECX
Y	= :EAX
WIDTH	= DATAORIGIN+$000D
HEIGHT	= DATAORIGIN+$000E

@VarData	= WIDTH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTSPRITEXOR					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000065  -------------------

 icl 'asm/put-sprite-xor.a65' 
; ------------------------------------------------------------

ADR	= :EDX
X	= :ECX
Y	= :EAX
WIDTH	= DATAORIGIN+$000F
HEIGHT	= DATAORIGIN+$0010

@VarData	= WIDTH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTTEXT						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000066  -------------------

 icl 'asm/put-text.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
S	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTTEXTC					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000067  -------------------

 icl 'asm/put-textc.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
S	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INVERT						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000068  -------------------

 icl 'asm/invert.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
W	= :EAX
H	= DATAORIGIN+$0011

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLANK						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000069  -------------------

 icl 'asm/blank.a65' 
; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
W	= :EAX
H	= DATAORIGIN+$0012

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETSCREENWIDTH					; PROCEDURE | ASSEMBLER | REGISTER | INLINE

	.MACRO m@INLINE
	sta NSW

; -------------------  ASM Block 00000070  -------------------

  sta MAIN.PUTIMAGE._LNWIDTH
  sta MAIN.PUTSPRITE._LNWIDTH1
  sta MAIN.PUTSPRITE._LNWIDTH2

	.ENDM

; ------------------------------------------------------------

NSW	= :EDX
@exit
.endl

.local	CLEARPAGE					; PROCEDURE | ASSEMBLER | REGISTER
	sta PAGE

; -------------------  ASM Block 00000071  -------------------

  // lda page
  bne setPage1

setPage0:
  ldy #>SCREEN_ADDR
  bne clear

setPage1:
  ldy #>(SCREEN_ADDR+$400)

clear:                      ; clear active page
  lda #0
  sta _pp0
  sty _pp0+1
  iny
  sta _pp1
  sty _pp1+1
  iny
  sta _pp2
  sty _pp2+1
  iny
  sta _pp3
  sty _pp3+1

  tay
lclr:
  sta _pp0:$8000,y
  sta _pp1:$8100,y
  sta _pp2:$8200,y
  sta _pp3:$8300,y
  dey
  bne lclr


; ------------------------------------------------------------

PAGE	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT						; PROCEDURE | ASSEMBLER | REGISTER
	sta F

; -------------------  ASM Block 00000072  -------------------

  // Accu have value od variable 'f'
  // lda $14
  // add f
  add $14
loop:
  cmp $14
  bne *-2

; ------------------------------------------------------------

F	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0004

; ------------------------------------------------------------

SCREEN_LINES_ADDR	= $0600
PMG_ADDR	= $2000
SCREEN_ADDR	= $2400
EDITOR_ADDR	= $2800
AFONT_ADDR	= $2C00
AFONTC_ADDR	= $3000
MAX_SPRITE	= $0F
MAX_GROUP	= $07
DLIV	= $0200
NMIEN	= $D40E
SDLST	= $0230
GTIACS	= $026F
PFCOL0	= $02C4
PFCOL1	= $02C5
PFCOL2	= $02C6
PFCOL3	= $02C7
PFCOL4	= $02C8
ACTIVEPAGE	= $D4
SCR	= $58
adr.YSCR	= $0600
.var YSCR	= adr.YSCR .word
I	= $3E
adr.AFONT	= $2C00
.var AFONT	= adr.AFONT .word
adr.AFONTC	= $3000
.var AFONTC	= adr.AFONTC .word
adr._ASC2INT	= $0480
.var _ASC2INT	= adr._ASC2INT .word
@exit

@halt	ldx #$00
	txs

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00

PROGRAMSTACK

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
